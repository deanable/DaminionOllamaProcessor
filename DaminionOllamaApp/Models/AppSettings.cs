// DaminionOllamaApp/Models/AppSettings.cs
using System.ComponentModel;
using System.Security; // Required for SecureString if you choose to use it later
using System.Collections.Generic;

namespace DaminionOllamaApp.Models
{
    /// <summary>
    /// Enum representing the available AI providers for the application.
    /// </summary>
    public enum AiProvider
    {
        /// <summary>Use the local Ollama AI service.</summary>
        Ollama,
        /// <summary>Use the OpenRouter cloud AI service.</summary>
        OpenRouter,
        /// <summary>Use the Google Gemma AI service.</summary>
        Gemma
    }

    /// <summary>
    /// Tracks usage statistics and estimated spend for a given AI model.
    /// </summary>
    public class ModelUsageInfo
    {
        /// <summary>Number of input tokens used by this model.</summary>
        public int InputTokensUsed { get; set; }
        /// <summary>Number of output tokens generated by this model.</summary>
        public int OutputTokensUsed { get; set; }
        /// <summary>Estimated spend in USD for this model.</summary>
        public double EstimatedSpendUSD { get; set; }
        /// <summary>Indicates if the free tier for this model has been exceeded.</summary>
        public bool FreeTierExceeded { get; set; }
    }

    /// <summary>
    /// Stores all application settings, including AI provider configuration, Daminion server details, and model usage tracking.
    /// Implements INotifyPropertyChanged for data binding.
    /// </summary>
    public class AppSettings : INotifyPropertyChanged
    {
        // -- AI Provider Selection --
        private AiProvider _selectedAiProvider = AiProvider.Ollama; // Default to Ollama

        // -- Existing Daminion Properties --
        private string _daminionServerUrl = "http://researchserver.juicefilm.local/daminion"; // Example default
        private string _daminionUsername = "admin";
        private string _daminionPassword = "admin"; // For simplicity now, consider SecureString later

        // -- Existing Ollama Properties --
        private string _ollamaServerUrl = "http://researchserver.juicefilm.local:11434"; // Example default
        private string _ollamaModelName = "llava:13b"; // Example default
        private string _ollamaPrompt = "Please describe this image in detail. Identify key objects, subjects, and the overall scene. If relevant, suggest suitable categories and keywords.\n\nDescription:\n\nCategories:\n- Category1\n- Category2\n\nKeywords:\n- Keyword1, Keyword2, Keyword3"; // Example default

        // -- OpenRouter Properties --
        private string _openRouterApiKey = string.Empty;
        private string _openRouterHttpReferer = "http://localhost"; // Replace with your actual app name or URL
        private string _openRouterModelName = "google/gemini-pro-vision"; // A sensible default

        /// <summary>
        /// Gets or sets the selected AI provider for image analysis.
        /// Changing this property will synchronize UseOpenRouter accordingly.
        /// </summary>
        public AiProvider SelectedAiProvider
        {
            get => _selectedAiProvider;
            set
            {
                if (_selectedAiProvider != value)
                {
                    _selectedAiProvider = value;
                    // Synchronize UseOpenRouter
                    UseOpenRouter = (value == AiProvider.OpenRouter);
                    OnPropertyChanged(nameof(SelectedAiProvider));
                }
            }
        }

        /// <summary>
        /// Gets or sets the Daminion server URL.
        /// </summary>
        public string DaminionServerUrl
        {
            get => _daminionServerUrl;
            set
            {
                if (_daminionServerUrl != value)
                {
                    _daminionServerUrl = value;
                    OnPropertyChanged(nameof(DaminionServerUrl));
                }
            }
        }

        /// <summary>
        /// Gets or sets the Daminion username for authentication.
        /// </summary>
        public string DaminionUsername
        {
            get => _daminionUsername;
            set
            {
                if (_daminionUsername != value)
                {
                    _daminionUsername = value;
                    OnPropertyChanged(nameof(DaminionUsername));
                }
            }
        }

        /// <summary>
        /// Gets or sets the Daminion password for authentication.
        /// </summary>
        public string DaminionPassword // Consider changing to SecureString for better security
        {
            get => _daminionPassword;
            set
            {
                if (_daminionPassword != value)
                {
                    _daminionPassword = value;
                    OnPropertyChanged(nameof(DaminionPassword));
                }
            }
        }

        /// <summary>
        /// Gets or sets the Ollama server URL.
        /// </summary>
        public string OllamaServerUrl
        {
            get => _ollamaServerUrl;
            set
            {
                if (_ollamaServerUrl != value)
                {
                    _ollamaServerUrl = value;
                    OnPropertyChanged(nameof(OllamaServerUrl));
                }
            }
        }

        /// <summary>
        /// Gets or sets the Ollama model name to use for image analysis.
        /// </summary>
        public string OllamaModelName
        {
            get => _ollamaModelName;
            set
            {
                if (_ollamaModelName != value)
                {
                    _ollamaModelName = value;
                    OnPropertyChanged(nameof(OllamaModelName));
                }
            }
        }

        /// <summary>
        /// Gets or sets the prompt sent to the AI model for image analysis.
        /// </summary>
        public string OllamaPrompt
        {
            get => _ollamaPrompt;
            set
            {
                if (_ollamaPrompt != value)
                {
                    _ollamaPrompt = value;
                    OnPropertyChanged(nameof(OllamaPrompt));
                }
            }
        }

        /// <summary>
        /// Gets or sets the OpenRouter API key for authentication.
        /// </summary>
        public string OpenRouterApiKey
        {
            get => _openRouterApiKey;
            set
            {
                if (_openRouterApiKey != value)
                {
                    _openRouterApiKey = value;
                    OnPropertyChanged(nameof(OpenRouterApiKey));
                }
            }
        }

        /// <summary>
        /// Gets or sets the HTTP referer sent to OpenRouter for API requests.
        /// </summary>
        public string OpenRouterHttpReferer
        {
            get => _openRouterHttpReferer;
            set
            {
                if (_openRouterHttpReferer != value)
                {
                    _openRouterHttpReferer = value;
                    OnPropertyChanged(nameof(OpenRouterHttpReferer));
                }
            }
        }

        /// <summary>
        /// Gets or sets the OpenRouter model name to use for image analysis.
        /// </summary>
        public string OpenRouterModelName
        {
            get => _openRouterModelName;
            set
            {
                if (_openRouterModelName != value)
                {
                    _openRouterModelName = value;
                    OnPropertyChanged(nameof(OpenRouterModelName));
                }
            }
        }

        // --- Gemma Properties ---
        private string _gemmaApiKey = string.Empty;
        private string _gemmaModelName = "gemma-3n-e2b-it";
        private string _gemmaServiceAccountJsonPath = string.Empty; // Path to service account JSON
        /// <summary>
        /// Gets or sets the Gemma API key for authentication.
        /// </summary>
        public string GemmaApiKey
        {
            get => _gemmaApiKey;
            set
            {
                if (_gemmaApiKey != value)
                {
                    _gemmaApiKey = value;
                    OnPropertyChanged(nameof(GemmaApiKey));
                }
            }
        }
        /// <summary>
        /// Gets or sets the Gemma model name to use for image analysis.
        /// </summary>
        public string GemmaModelName
        {
            get => _gemmaModelName;
            set
            {
                if (_gemmaModelName != value)
                {
                    _gemmaModelName = value;
                    OnPropertyChanged(nameof(GemmaModelName));
                }
            }
        }
        /// <summary>
        /// Gets or sets the path to the service account JSON file for Gemma authentication.
        /// </summary>
        public string GemmaServiceAccountJsonPath
        {
            get => _gemmaServiceAccountJsonPath;
            set
            {
                if (_gemmaServiceAccountJsonPath != value)
                {
                    _gemmaServiceAccountJsonPath = value;
                    OnPropertyChanged(nameof(GemmaServiceAccountJsonPath));
                }
            }
        }
        // Optional: For compatibility
        public bool UseGemma => SelectedAiProvider == AiProvider.Gemma;


        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        // ... existing properties for Daminion Tag GUIDs and Flags ...
        private string _daminionDescriptionTagGuid = string.Empty;
        private string _daminionKeywordsTagGuid = string.Empty;
        private string _daminionCategoriesTagGuid = string.Empty;
        private string _daminionFlagTagGuid = string.Empty;

        public string DaminionDescriptionTagGuid
        {
            get => _daminionDescriptionTagGuid;
            set { if (_daminionDescriptionTagGuid != value) { _daminionDescriptionTagGuid = value; OnPropertyChanged(nameof(DaminionDescriptionTagGuid)); } }
        }
        public string DaminionKeywordsTagGuid
        {
            get => _daminionKeywordsTagGuid;
            set { if (_daminionKeywordsTagGuid != value) { _daminionKeywordsTagGuid = value; OnPropertyChanged(nameof(DaminionKeywordsTagGuid)); } }
        }
        public string DaminionCategoriesTagGuid
        {
            get => _daminionCategoriesTagGuid;
            set { if (_daminionCategoriesTagGuid != value) { _daminionCategoriesTagGuid = value; OnPropertyChanged(nameof(DaminionCategoriesTagGuid)); } }
        }
        public string DaminionFlagTagGuid
        {
            get => _daminionFlagTagGuid;
            set { if (_daminionFlagTagGuid != value) { _daminionFlagTagGuid = value; OnPropertyChanged(nameof(DaminionFlagTagGuid)); } }
        }

        private bool _automaticallyUpdateFlagAfterOllama = false;
        private string _flagValueIdToClearAfterOllama = string.Empty;
        private string _flagValueIdToSetAfterOllama = string.Empty;

        public bool AutomaticallyUpdateFlagAfterOllama
        {
            get => _automaticallyUpdateFlagAfterOllama;
            set
            {
                if (_automaticallyUpdateFlagAfterOllama != value)
                {
                    _automaticallyUpdateFlagAfterOllama = value;
                    OnPropertyChanged(nameof(AutomaticallyUpdateFlagAfterOllama));
                }
            }
        }

        public string FlagValueIdToClearAfterOllama
        {
            get => _flagValueIdToClearAfterOllama;
            set
            {
                if (_flagValueIdToClearAfterOllama != value)
                {
                    _flagValueIdToClearAfterOllama = value;
                    OnPropertyChanged(nameof(FlagValueIdToClearAfterOllama));
                }
            }
        }

        public string FlagValueIdToSetAfterOllama
        {
            get => _flagValueIdToSetAfterOllama;
            set
            {
                if (_flagValueIdToSetAfterOllama != value)
                {
                    _flagValueIdToSetAfterOllama = value;
                    OnPropertyChanged(nameof(FlagValueIdToSetAfterOllama));
                }
            }
        }

        // --- Daminion Query Properties ---
        private string _daminionQueryType = string.Empty;
        private string _daminionQueryLine = string.Empty;
        private string _daminionProcessingPrompt = "Please describe this image in detail. Identify key objects, subjects, and the overall scene. If relevant, suggest suitable categories and keywords.\n\nDescription:\n\nCategories:\n- Category1\n- Category2\n\nKeywords:\n- Keyword1, Keyword2, Keyword3";

        public string DaminionQueryType
        {
            get => _daminionQueryType;
            set
            {
                if (_daminionQueryType != value)
                {
                    _daminionQueryType = value;
                    OnPropertyChanged(nameof(DaminionQueryType));
                }
            }
        }

        public string DaminionQueryLine
        {
            get => _daminionQueryLine;
            set
            {
                if (_daminionQueryLine != value)
                {
                    _daminionQueryLine = value;
                    OnPropertyChanged(nameof(DaminionQueryLine));
                }
            }
        }

        public string DaminionProcessingPrompt
        {
            get => _daminionProcessingPrompt;
            set
            {
                if (_daminionProcessingPrompt != value)
                {
                    _daminionProcessingPrompt = value;
                    OnPropertyChanged(nameof(DaminionProcessingPrompt));
                }
            }
        }

        // --- AI Provider Selection Properties ---
        private bool _useOpenRouter = false;

        /// <summary>
        /// Gets or sets a value indicating whether to use the OpenRouter AI service.
        /// Changing this property will synchronize SelectedAiProvider accordingly.
        /// </summary>
        public bool UseOpenRouter
        {
            get => _useOpenRouter;
            set
            {
                if (_useOpenRouter != value)
                {
                    _useOpenRouter = value;
                    // Synchronize SelectedAiProvider
                    SelectedAiProvider = value ? AiProvider.OpenRouter : AiProvider.Ollama;
                    OnPropertyChanged(nameof(UseOpenRouter));
                }
            }
        }

        // --- Usage/Spend Tracking ---
        // Key: Model name, Value: Usage info
        private Dictionary<string, ModelUsageInfo> _modelUsage = new Dictionary<string, ModelUsageInfo>();
        public Dictionary<string, ModelUsageInfo> ModelUsage
        {
            get => _modelUsage;
            set { if (_modelUsage != value) { _modelUsage = value; OnPropertyChanged(nameof(ModelUsage)); } }
        }
        // Helper to get usage for a model (creates if missing)
        public ModelUsageInfo GetOrCreateModelUsage(string modelName)
        {
            if (!_modelUsage.ContainsKey(modelName))
                _modelUsage[modelName] = new ModelUsageInfo();
            return _modelUsage[modelName];
        }

        // --- Alias Properties for Compatibility ---
        public string OllamaModel => OllamaModelName;
        public string OpenRouterModel => OpenRouterModelName;

        // --- BigQuery Billing Export Settings ---
        private string _bigQueryProjectId = string.Empty;
        private string _bigQueryDataset = string.Empty;
        private string _bigQueryTable = string.Empty;
        public string BigQueryProjectId
        {
            get => _bigQueryProjectId;
            set { if (_bigQueryProjectId != value) { _bigQueryProjectId = value; OnPropertyChanged(nameof(BigQueryProjectId)); } }
        }
        public string BigQueryDataset
        {
            get => _bigQueryDataset;
            set { if (_bigQueryDataset != value) { _bigQueryDataset = value; OnPropertyChanged(nameof(BigQueryDataset)); } }
        }
        public string BigQueryTable
        {
            get => _bigQueryTable;
            set { if (_bigQueryTable != value) { _bigQueryTable = value; OnPropertyChanged(nameof(BigQueryTable)); } }
        }
    }
}