
<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Converters\CountToBooleanConverter.cs">
<![CDATA[
// DaminionOllamaApp/Converters/CountToBooleanConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace DaminionOllamaApp.Converters // Or DaminionOllamaApp.Views if you prefer to keep converters with views
{
    public class CountToBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is int count)
            {
                return count > 0;
            }
            return false;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Converters\EnumToBooleanConverter.cs">
<![CDATA[
// DaminionOllamaApp/Converters/EnumToBooleanConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace DaminionOllamaApp.Converters
{
    /// <summary>
    /// Converts a specific enum value to a boolean (true if the value matches the parameter) and back.
    /// This is used to bind RadioButtons to an enum property.
    /// </summary>
    public class EnumToBooleanConverter : IValueConverter
    {
        /// <summary>
        /// Converts the enum value to a boolean.
        /// </summary>
        /// <param name="value">The enum value from the binding source.</param>
        /// <param name="targetType">The type of the binding target property.</param>
        /// <param name="parameter">The specific enum value to check for (e.g., "Ollama" or "OpenRouter").</param>
        /// <param name="culture">The culture to use in the converter.</param>
        /// <returns>True if the value matches the parameter; otherwise, false.</returns>
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value == null || parameter == null)
                return false;

            string enumValue = value.ToString();
            string targetValue = parameter.ToString();

            return enumValue.Equals(targetValue, StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        /// Converts a boolean (from a checked RadioButton) back to the corresponding enum value.
        /// </summary>
        /// <param name="value">The boolean value from the binding target.</param>
        /// <param name="targetType">The type to convert to (the enum type).</param>
        /// <param name="parameter">The specific enum value this RadioButton represents.</param>
        /// <param name="culture">The culture to use in the converter.</param>
        /// <returns>The enum value corresponding to the parameter if the RadioButton is checked.</returns>
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // If the RadioButton is checked (value is true), return the enum value it represents.
            if (value is bool isChecked && isChecked)
            {
                return Enum.Parse(targetType, parameter.ToString());
            }
            // Otherwise, do nothing.
            return Binding.DoNothing;
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Models\AppSettings.cs">
<![CDATA[
// DaminionOllamaApp/Models/AppSettings.cs
using System.ComponentModel;
using System.Security; // Required for SecureString if you choose to use it later

namespace DaminionOllamaApp.Models
{
    // NEW: Enum to define the available AI providers.
    public enum AiProvider
    {
        Ollama,
        OpenRouter
    }

    public class AppSettings : INotifyPropertyChanged
    {
        // -- AI Provider Selection --
        private AiProvider _selectedAiProvider = AiProvider.Ollama; // Default to Ollama

        // -- Existing Daminion Properties --
        private string _daminionServerUrl = "http://researchserver.juicefilm.local/daminion"; // Example default
        private string _daminionUsername = "admin";
        private string _daminionPassword = "admin"; // For simplicity now, consider SecureString later

        // -- Existing Ollama Properties --
        private string _ollamaServerUrl = "http://researchserver.juicefilm.local:11434"; // Example default
        private string _ollamaModelName = "llava:13b"; // Example default
        private string _ollamaPrompt = "Please describe this image in detail. Identify key objects, subjects, and the overall scene. If relevant, suggest suitable categories and keywords.\n\nDescription:\n\nCategories:\n- Category1\n- Category2\n\nKeywords:\n- Keyword1, Keyword2, Keyword3"; // Example default

        // -- OpenRouter Properties --
        private string _openRouterApiKey = string.Empty;
        private string _openRouterHttpReferer = "http://localhost"; // Replace with your actual app name or URL
        private string _openRouterModelName = "google/gemini-pro-vision"; // A sensible default

        // NEW: Public property for the selected AI provider
        public AiProvider SelectedAiProvider
        {
            get => _selectedAiProvider;
            set
            {
                if (_selectedAiProvider != value)
                {
                    _selectedAiProvider = value;
                    OnPropertyChanged(nameof(SelectedAiProvider));
                }
            }
        }

        public string DaminionServerUrl
        {
            get => _daminionServerUrl;
            set
            {
                if (_daminionServerUrl != value)
                {
                    _daminionServerUrl = value;
                    OnPropertyChanged(nameof(DaminionServerUrl));
                }
            }
        }

        public string DaminionUsername
        {
            get => _daminionUsername;
            set
            {
                if (_daminionUsername != value)
                {
                    _daminionUsername = value;
                    OnPropertyChanged(nameof(DaminionUsername));
                }
            }
        }

        public string DaminionPassword // Consider changing to SecureString for better security
        {
            get => _daminionPassword;
            set
            {
                if (_daminionPassword != value)
                {
                    _daminionPassword = value;
                    OnPropertyChanged(nameof(DaminionPassword));
                }
            }
        }

        public string OllamaServerUrl
        {
            get => _ollamaServerUrl;
            set
            {
                if (_ollamaServerUrl != value)
                {
                    _ollamaServerUrl = value;
                    OnPropertyChanged(nameof(OllamaServerUrl));
                }
            }
        }

        public string OllamaModelName
        {
            get => _ollamaModelName;
            set
            {
                if (_ollamaModelName != value)
                {
                    _ollamaModelName = value;
                    OnPropertyChanged(nameof(OllamaModelName));
                }
            }
        }

        public string OllamaPrompt
        {
            get => _ollamaPrompt;
            set
            {
                if (_ollamaPrompt != value)
                {
                    _ollamaPrompt = value;
                    OnPropertyChanged(nameof(OllamaPrompt));
                }
            }
        }

        public string OpenRouterApiKey
        {
            get => _openRouterApiKey;
            set
            {
                if (_openRouterApiKey != value)
                {
                    _openRouterApiKey = value;
                    OnPropertyChanged(nameof(OpenRouterApiKey));
                }
            }
        }

        public string OpenRouterHttpReferer
        {
            get => _openRouterHttpReferer;
            set
            {
                if (_openRouterHttpReferer != value)
                {
                    _openRouterHttpReferer = value;
                    OnPropertyChanged(nameof(OpenRouterHttpReferer));
                }
            }
        }

        public string OpenRouterModelName
        {
            get => _openRouterModelName;
            set
            {
                if (_openRouterModelName != value)
                {
                    _openRouterModelName = value;
                    OnPropertyChanged(nameof(OpenRouterModelName));
                }
            }
        }


        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        // ... existing properties for Daminion Tag GUIDs and Flags ...
        private string _daminionDescriptionTagGuid = string.Empty;
        private string _daminionKeywordsTagGuid = string.Empty;
        private string _daminionCategoriesTagGuid = string.Empty;
        private string _daminionFlagTagGuid = string.Empty;

        public string DaminionDescriptionTagGuid
        {
            get => _daminionDescriptionTagGuid;
            set { if (_daminionDescriptionTagGuid != value) { _daminionDescriptionTagGuid = value; OnPropertyChanged(nameof(DaminionDescriptionTagGuid)); } }
        }
        public string DaminionKeywordsTagGuid
        {
            get => _daminionKeywordsTagGuid;
            set { if (_daminionKeywordsTagGuid != value) { _daminionKeywordsTagGuid = value; OnPropertyChanged(nameof(DaminionKeywordsTagGuid)); } }
        }
        public string DaminionCategoriesTagGuid
        {
            get => _daminionCategoriesTagGuid;
            set { if (_daminionCategoriesTagGuid != value) { _daminionCategoriesTagGuid = value; OnPropertyChanged(nameof(DaminionCategoriesTagGuid)); } }
        }
        public string DaminionFlagTagGuid
        {
            get => _daminionFlagTagGuid;
            set { if (_daminionFlagTagGuid != value) { _daminionFlagTagGuid = value; OnPropertyChanged(nameof(DaminionFlagTagGuid)); } }
        }

        private bool _automaticallyUpdateFlagAfterOllama = false;
        private string _flagValueIdToClearAfterOllama = string.Empty;
        private string _flagValueIdToSetAfterOllama = string.Empty;

        public bool AutomaticallyUpdateFlagAfterOllama
        {
            get => _automaticallyUpdateFlagAfterOllama;
            set
            {
                if (_automaticallyUpdateFlagAfterOllama != value)
                {
                    _automaticallyUpdateFlagAfterOllama = value;
                    OnPropertyChanged(nameof(AutomaticallyUpdateFlagAfterOllama));
                }
            }
        }

        public string FlagValueIdToClearAfterOllama
        {
            get => _flagValueIdToClearAfterOllama;
            set
            {
                if (_flagValueIdToClearAfterOllama != value)
                {
                    _flagValueIdToClearAfterOllama = value;
                    OnPropertyChanged(nameof(FlagValueIdToClearAfterOllama));
                }
            }
        }

        public string FlagValueIdToSetAfterOllama
        {
            get => _flagValueIdToSetAfterOllama;
            set
            {
                if (_flagValueIdToSetAfterOllama != value)
                {
                    _flagValueIdToSetAfterOllama = value;
                    OnPropertyChanged(nameof(FlagValueIdToSetAfterOllama));
                }
            }
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Models\DaminionQueueItem.cs">
<![CDATA[
// DaminionOllamaApp/Models/DaminionQueueItem.cs
using System.ComponentModel;
using System.IO;

namespace DaminionOllamaApp.Models
{
    // We can reuse the ProcessingStatus enum from FileQueueItem.cs
    // If it's not accessible due to namespace/file structure, you might need to move it
    // to a more common location or redeclare it here. For now, assume it's accessible.

    public class DaminionQueueItem : INotifyPropertyChanged
    {
        private long _daminionItemId;
        private string _filePath = string.Empty;
        private string _fileName = string.Empty; // Can be Daminion item name or file name
        private ProcessingStatus _status = ProcessingStatus.Unprocessed;
        private string _statusMessage = string.Empty;

        public long DaminionItemId
        {
            get => _daminionItemId;
            set
            {
                if (_daminionItemId != value)
                {
                    _daminionItemId = value;
                    OnPropertyChanged(nameof(DaminionItemId));
                }
            }
        }

        public string FilePath
        {
            get => _filePath;
            set
            {
                if (_filePath != value)
                {
                    _filePath = value;
                    if (string.IsNullOrEmpty(_fileName) && !string.IsNullOrEmpty(_filePath))
                    {
                        FileName = Path.GetFileName(_filePath);
                    }
                    OnPropertyChanged(nameof(FilePath));
                }
            }
        }

        public string FileName // Could be Daminion item's title or filename
        {
            get => _fileName;
            set
            {
                if (_fileName != value)
                {
                    _fileName = value;
                    OnPropertyChanged(nameof(FileName));
                }
            }
        }

        public ProcessingStatus Status
        {
            get => _status;
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged(nameof(Status));
                }
            }
        }

        public string StatusMessage
        {
            get => _statusMessage;
            set
            {
                if (_statusMessage != value)
                {
                    _statusMessage = value;
                    OnPropertyChanged(nameof(StatusMessage));
                }
            }
        }

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public DaminionQueueItem(long daminionId, string initialName = "Loading...")
        {
            DaminionItemId = daminionId;
            FileName = initialName; // Initially set to item ID or a placeholder
            Status = ProcessingStatus.Unprocessed;
            StatusMessage = "Awaiting path information.";
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Models\FileQueueItem.cs">
<![CDATA[
// DaminionOllamaApp/Models/FileQueueItem.cs
using System.ComponentModel;
using System.IO; // Required for Path
using System.Runtime.CompilerServices; // Required for CallerMemberName

namespace DaminionOllamaApp.Models
{
    public enum ProcessingStatus
    {
        Unprocessed,
        Queued,
        Processing,
        Processed,
        Error,
        Cancelled
    }

    public class FileQueueItem : INotifyPropertyChanged
    {
        private string _filePath = string.Empty;
        private string _fileName = string.Empty;
        private ProcessingStatus _status = ProcessingStatus.Unprocessed;
        private string _statusMessage = string.Empty;
        private long? _daminionItemId; // <-- NEW PROPERTY

        public long? DaminionItemId // <-- NEW PROPERTY
        {
            get => _daminionItemId;
            set { SetProperty(ref _daminionItemId, value); }
        }

        public string FilePath
        {
            get => _filePath;
            set
            {
                if (SetProperty(ref _filePath, value))
                {
                    // Only update FileName from FilePath if FileName wasn't explicitly set by a constructor that takes fileName
                    if (string.IsNullOrEmpty(_fileName) && !string.IsNullOrEmpty(_filePath))
                    {
                        FileName = Path.GetFileName(_filePath); // FileName setter will call OnPropertyChanged
                    }
                }
            }
        }

        public string FileName
        {
            get => _fileName;
            // Allow public set for cases where filename might be different from Path.GetFileName (e.g. Daminion title)
            set { SetProperty(ref _fileName, value); }
        }

        public ProcessingStatus Status
        {
            get => _status;
            set { SetProperty(ref _status, value); }
        }

        public string StatusMessage
        {
            get => _statusMessage;
            set { SetProperty(ref _statusMessage, value); }
        }

        // --- NEW READ-ONLY PROPERTY ---
        public string DisplayIdentifier
        {
            get
            {
                if (DaminionItemId.HasValue)
                {
                    return $"Daminion ID: {DaminionItemId.Value}";
                }
                return FilePath; // Or Path.GetFileName(FilePath) if you prefer just the name as fallback
            }
        }
        // --- END NEW READ-ONLY PROPERTY ---

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string propertyName = "")
        {
            if (EqualityComparer<T>.Default.Equals(storage, value)) return false;
            storage = value;
            OnPropertyChanged(propertyName);
            return true;
        }

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        // Constructor for local files
        public FileQueueItem(string filePath)
        {
            FilePath = filePath; // Sets _filePath and calls OnPropertyChanged for FilePath
                                 // FileName is set by FilePath setter if _fileName is empty
            if (string.IsNullOrEmpty(_fileName) && !string.IsNullOrEmpty(filePath)) // Explicitly ensure FileName is set if not already
            {
                FileName = Path.GetFileName(filePath);
            }
            Status = ProcessingStatus.Unprocessed;
            StatusMessage = string.Empty;
        }

        // Constructor for Daminion items (includes Daminion ID and allows specific initial name)
        public FileQueueItem(string filePath, string initialFileName, long daminionId)
        {
            DaminionItemId = daminionId;
            FilePath = filePath; // Sets _filePath and calls OnPropertyChanged for FilePath
            FileName = initialFileName; // Explicitly set FileName
            Status = ProcessingStatus.Unprocessed;
            StatusMessage = string.Empty;
        }

        public FileQueueItem() { } // Parameterless for XAML design-time if needed/used
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Models\QueryTypeDisplayItem.cs">
<![CDATA[
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DaminionOllamaApp.Models
{
    // Add this class definition within the DaminionOllamaApp.ViewModels namespace,
    // or in a Models file and add the appropriate using statement.
    // For simplicity here, placing it in the ViewModel file.
    public class QueryTypeDisplayItem
    {
        public string DisplayName { get; set; } = string.Empty;
        public string QueryLine { get; set; } = string.Empty;
        public string Operators { get; set; } = string.Empty;

        public override string ToString() => DisplayName;
    }
}

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\Views\SettingsWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\..\Views\SettingsWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "C496C8329DEDA7A3F7C89F5AA095B7BECB5C6394"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp.Converters;
using DaminionOllamaApp.ViewModels;
using DaminionOllamaApp.Views;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp.Views {
    
    
    /// <summary>
    /// SettingsWindow
    /// </summary>
    public partial class SettingsWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 38 "..\..\..\..\Views\SettingsWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox DaminionPasswordBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;component/views/settingswindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\SettingsWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.DaminionPasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            
            #line 38 "..\..\..\..\Views\SettingsWindow.xaml"
            this.DaminionPasswordBox.PasswordChanged += new System.Windows.RoutedEventHandler(this.DaminionPasswordBox_PasswordChanged);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\Views\SettingsWindow.g.i.cs">
<![CDATA[
#pragma checksum "..\..\..\..\Views\SettingsWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "C496C8329DEDA7A3F7C89F5AA095B7BECB5C6394"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp.Converters;
using DaminionOllamaApp.ViewModels;
using DaminionOllamaApp.Views;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp.Views {
    
    
    /// <summary>
    /// SettingsWindow
    /// </summary>
    public partial class SettingsWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 38 "..\..\..\..\Views\SettingsWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox DaminionPasswordBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;V1.0.0.0;component/views/settingswindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\SettingsWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.DaminionPasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            
            #line 38 "..\..\..\..\Views\SettingsWindow.xaml"
            this.DaminionPasswordBox.PasswordChanged += new System.Windows.RoutedEventHandler(this.DaminionPasswordBox_PasswordChanged);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs">
<![CDATA[
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\App.g.cs">
<![CDATA[
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "88514ABD88AA65BE74C3914C65B33231E93773F2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public static void Main() {
            DaminionOllamaApp.App app = new DaminionOllamaApp.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\App.g.i.cs">
<![CDATA[
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "88514ABD88AA65BE74C3914C65B33231E93773F2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public static void Main() {
            DaminionOllamaApp.App app = new DaminionOllamaApp.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\DaminionOllamaApp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7e6fec4546ae6195e485009c8044edf76e6c87a2")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\DaminionOllamaApp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\DaminionOllamaApp_Content.g.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("daminion-llama.ico")]



]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\DaminionOllamaApp_Content.g.i.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("daminion-llama.ico")]



]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\DaminionOllamaApp_z4idmbnw_wpftmp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7e6fec4546ae6195e485009c8044edf76e6c87a2")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\DaminionOllamaApp_z4idmbnw_wpftmp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\GeneratedInternalTypeHelper.g.cs">
<![CDATA[



]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\GeneratedInternalTypeHelper.g.i.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XamlGeneratedNamespace {
    
    
    /// <summary>
    /// GeneratedInternalTypeHelper
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper {
        
        /// <summary>
        /// CreateInstance
        /// </summary>
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) {
            return System.Activator.CreateInstance(type, ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) 
                            | (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.CreateInstance)), null, null, culture);
        }
        
        /// <summary>
        /// GetPropertyValue
        /// </summary>
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) {
            return propertyInfo.GetValue(target, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// SetPropertyValue
        /// </summary>
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
            propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// CreateDelegate
        /// </summary>
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) {
            return ((System.Delegate)(target.GetType().InvokeMember("_CreateDelegate", (System.Reflection.BindingFlags.InvokeMethod 
                            | (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)), null, target, new object[] {
                        delegateType,
                        handler}, null)));
        }
        
        /// <summary>
        /// AddEventHandler
        /// </summary>
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) {
            eventInfo.AddEventHandler(target, handler);
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\MainWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "D554D918BF22BC7B90EE74255B920DB4E4136B69"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows\MainWindow.g.i.cs">
<![CDATA[
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "D554D918BF22BC7B90EE74255B920DB4E4136B69"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;V1.0.0.0;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\Views\SettingsWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\..\Views\SettingsWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "424FE69C4BBD7D7C58878753873B0A376B023243"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp.Converters;
using DaminionOllamaApp.ViewModels;
using DaminionOllamaApp.Views;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp.Views {
    
    
    /// <summary>
    /// SettingsWindow
    /// </summary>
    public partial class SettingsWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 39 "..\..\..\..\Views\SettingsWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox DaminionPasswordBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;component/views/settingswindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\SettingsWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.DaminionPasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            
            #line 39 "..\..\..\..\Views\SettingsWindow.xaml"
            this.DaminionPasswordBox.PasswordChanged += new System.Windows.RoutedEventHandler(this.DaminionPasswordBox_PasswordChanged);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\Views\SettingsWindow.g.i.cs">
<![CDATA[
#pragma checksum "..\..\..\..\Views\SettingsWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "424FE69C4BBD7D7C58878753873B0A376B023243"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp.Converters;
using DaminionOllamaApp.ViewModels;
using DaminionOllamaApp.Views;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp.Views {
    
    
    /// <summary>
    /// SettingsWindow
    /// </summary>
    public partial class SettingsWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 39 "..\..\..\..\Views\SettingsWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox DaminionPasswordBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;component/views/settingswindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\SettingsWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.DaminionPasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            
            #line 39 "..\..\..\..\Views\SettingsWindow.xaml"
            this.DaminionPasswordBox.PasswordChanged += new System.Windows.RoutedEventHandler(this.DaminionPasswordBox_PasswordChanged);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs">
<![CDATA[
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\App.g.cs">
<![CDATA[
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "88514ABD88AA65BE74C3914C65B33231E93773F2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public static void Main() {
            DaminionOllamaApp.App app = new DaminionOllamaApp.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\App.g.i.cs">
<![CDATA[
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "88514ABD88AA65BE74C3914C65B33231E93773F2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public static void Main() {
            DaminionOllamaApp.App app = new DaminionOllamaApp.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e91857bf783337c97b8aeeca0d1579206e4a8902")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows10.0.26100.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows10.0.26100.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_0hzhxjsq_wpftmp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7e6fec4546ae6195e485009c8044edf76e6c87a2")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows10.0.26100.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows10.0.26100.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_0hzhxjsq_wpftmp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_0pzitgh4_wpftmp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7e6fec4546ae6195e485009c8044edf76e6c87a2")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows10.0.26100.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows10.0.26100.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_0pzitgh4_wpftmp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_2hwduf1b_wpftmp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e91857bf783337c97b8aeeca0d1579206e4a8902")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows10.0.26100.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows10.0.26100.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_2hwduf1b_wpftmp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_3a22a55h_wpftmp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e91857bf783337c97b8aeeca0d1579206e4a8902")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows10.0.26100.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows10.0.26100.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_3a22a55h_wpftmp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_3tskpocd_wpftmp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e91857bf783337c97b8aeeca0d1579206e4a8902")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows10.0.26100.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows10.0.26100.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_3tskpocd_wpftmp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_Content.g.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("daminion-llama.ico")]



]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_Content.g.i.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("daminion-llama.ico")]



]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_sm2bquqp_wpftmp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e91857bf783337c97b8aeeca0d1579206e4a8902")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows10.0.26100.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows10.0.26100.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\DaminionOllamaApp_sm2bquqp_wpftmp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\GeneratedInternalTypeHelper.g.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XamlGeneratedNamespace {
    
    
    /// <summary>
    /// GeneratedInternalTypeHelper
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper {
        
        /// <summary>
        /// CreateInstance
        /// </summary>
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) {
            return System.Activator.CreateInstance(type, ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) 
                            | (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.CreateInstance)), null, null, culture);
        }
        
        /// <summary>
        /// GetPropertyValue
        /// </summary>
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) {
            return propertyInfo.GetValue(target, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// SetPropertyValue
        /// </summary>
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
            propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// CreateDelegate
        /// </summary>
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) {
            return ((System.Delegate)(target.GetType().InvokeMember("_CreateDelegate", (System.Reflection.BindingFlags.InvokeMethod 
                            | (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)), null, target, new object[] {
                        delegateType,
                        handler}, null)));
        }
        
        /// <summary>
        /// AddEventHandler
        /// </summary>
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) {
            eventInfo.AddEventHandler(target, handler);
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\GeneratedInternalTypeHelper.g.i.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XamlGeneratedNamespace {
    
    
    /// <summary>
    /// GeneratedInternalTypeHelper
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper {
        
        /// <summary>
        /// CreateInstance
        /// </summary>
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) {
            return System.Activator.CreateInstance(type, ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) 
                            | (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.CreateInstance)), null, null, culture);
        }
        
        /// <summary>
        /// GetPropertyValue
        /// </summary>
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) {
            return propertyInfo.GetValue(target, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// SetPropertyValue
        /// </summary>
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
            propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// CreateDelegate
        /// </summary>
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) {
            return ((System.Delegate)(target.GetType().InvokeMember("_CreateDelegate", (System.Reflection.BindingFlags.InvokeMethod 
                            | (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)), null, target, new object[] {
                        delegateType,
                        handler}, null)));
        }
        
        /// <summary>
        /// AddEventHandler
        /// </summary>
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) {
            eventInfo.AddEventHandler(target, handler);
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\MainWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "57072EA7550955CD7393477A00B11B616D9E7663"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using DaminionOllamaApp.Converters;
using DaminionOllamaApp.Models;
using DaminionOllamaApp.ViewModels;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Debug\net8.0-windows10.0.26100.0\MainWindow.g.i.cs">
<![CDATA[
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "57072EA7550955CD7393477A00B11B616D9E7663"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using DaminionOllamaApp.Converters;
using DaminionOllamaApp.Models;
using DaminionOllamaApp.ViewModels;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows\Views\SettingsWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\..\Views\SettingsWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "C496C8329DEDA7A3F7C89F5AA095B7BECB5C6394"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp.Converters;
using DaminionOllamaApp.ViewModels;
using DaminionOllamaApp.Views;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp.Views {
    
    
    /// <summary>
    /// SettingsWindow
    /// </summary>
    public partial class SettingsWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 38 "..\..\..\..\Views\SettingsWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox DaminionPasswordBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;component/views/settingswindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\SettingsWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.DaminionPasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            
            #line 38 "..\..\..\..\Views\SettingsWindow.xaml"
            this.DaminionPasswordBox.PasswordChanged += new System.Windows.RoutedEventHandler(this.DaminionPasswordBox_PasswordChanged);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs">
<![CDATA[
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows\App.g.cs">
<![CDATA[
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "88514ABD88AA65BE74C3914C65B33231E93773F2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public static void Main() {
            DaminionOllamaApp.App app = new DaminionOllamaApp.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows\DaminionOllamaApp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7e6fec4546ae6195e485009c8044edf76e6c87a2")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows\DaminionOllamaApp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows\DaminionOllamaApp_Content.g.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("daminion-llama.ico")]



]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows\GeneratedInternalTypeHelper.g.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XamlGeneratedNamespace {
    
    
    /// <summary>
    /// GeneratedInternalTypeHelper
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper {
        
        /// <summary>
        /// CreateInstance
        /// </summary>
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) {
            return System.Activator.CreateInstance(type, ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) 
                            | (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.CreateInstance)), null, null, culture);
        }
        
        /// <summary>
        /// GetPropertyValue
        /// </summary>
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) {
            return propertyInfo.GetValue(target, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// SetPropertyValue
        /// </summary>
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
            propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// CreateDelegate
        /// </summary>
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) {
            return ((System.Delegate)(target.GetType().InvokeMember("_CreateDelegate", (System.Reflection.BindingFlags.InvokeMethod 
                            | (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)), null, target, new object[] {
                        delegateType,
                        handler}, null)));
        }
        
        /// <summary>
        /// AddEventHandler
        /// </summary>
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) {
            eventInfo.AddEventHandler(target, handler);
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows\MainWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "D554D918BF22BC7B90EE74255B920DB4E4136B69"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows10.0.26100.0\Views\SettingsWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\..\Views\SettingsWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "C496C8329DEDA7A3F7C89F5AA095B7BECB5C6394"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp.Converters;
using DaminionOllamaApp.ViewModels;
using DaminionOllamaApp.Views;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp.Views {
    
    
    /// <summary>
    /// SettingsWindow
    /// </summary>
    public partial class SettingsWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 38 "..\..\..\..\Views\SettingsWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox DaminionPasswordBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;component/views/settingswindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\SettingsWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.DaminionPasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            
            #line 38 "..\..\..\..\Views\SettingsWindow.xaml"
            this.DaminionPasswordBox.PasswordChanged += new System.Windows.RoutedEventHandler(this.DaminionPasswordBox_PasswordChanged);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows10.0.26100.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs">
<![CDATA[
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows10.0.26100.0\App.g.cs">
<![CDATA[
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "88514ABD88AA65BE74C3914C65B33231E93773F2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public static void Main() {
            DaminionOllamaApp.App app = new DaminionOllamaApp.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows10.0.26100.0\DaminionOllamaApp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7e6fec4546ae6195e485009c8044edf76e6c87a2")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows10.0.26100.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows10.0.26100.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows10.0.26100.0\DaminionOllamaApp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows10.0.26100.0\DaminionOllamaApp_Content.g.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("daminion-llama.ico")]



]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows10.0.26100.0\DaminionOllamaApp_iou0sjfd_wpftmp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7e6fec4546ae6195e485009c8044edf76e6c87a2")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows10.0.26100.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows10.0.26100.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows10.0.26100.0\DaminionOllamaApp_iou0sjfd_wpftmp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows10.0.26100.0\GeneratedInternalTypeHelper.g.cs">
<![CDATA[



]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\obj\Release\net8.0-windows10.0.26100.0\MainWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "D554D918BF22BC7B90EE74255B920DB4E4136B69"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaApp {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaApp;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.7.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Services\ProcessingService.cs">
<![CDATA[
// DaminionOllamaApp/Services/ProcessingService.cs
using DaminionOllamaApp.Models;
using DaminionOllamaInteractionLib.Ollama;
using DaminionOllamaInteractionLib.Services; // For ImageMetadataService
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace DaminionOllamaApp.Services
{
    public class ProcessingService
    {
        public async Task ProcessLocalFileAsync(
            FileQueueItem item,
            AppSettings settings,
            Action<string> reportProgress,
            CancellationToken cancellationToken)
        {
            if (item == null || settings == null)
            {
                reportProgress?.Invoke($"Error: File item or settings are null for {item?.FileName ?? "Unknown File"}.");
                if (item != null) item.Status = ProcessingStatus.Error;
                return;
            }

            try
            {
                item.Status = ProcessingStatus.Processing;
                item.StatusMessage = "Starting...";
                reportProgress?.Invoke($"Processing: {item.FileName} - Reading file...");

                if (cancellationToken.IsCancellationRequested)
                {
                    item.Status = ProcessingStatus.Cancelled;
                    item.StatusMessage = "Cancelled before starting.";
                    reportProgress?.Invoke($"Cancelled: {item.FileName}");
                    return;
                }

                // 1. Read image bytes
                byte[] imageBytes;
                try
                {
                    imageBytes = await File.ReadAllBytesAsync(item.FilePath, cancellationToken);
                }
                catch (Exception ex)
                {
                    item.Status = ProcessingStatus.Error;
                    item.StatusMessage = $"Error reading file: {ex.Message}";
                    reportProgress?.Invoke($"Error: {item.FileName} - {item.StatusMessage}");
                    return;
                }

                reportProgress?.Invoke($"Processing: {item.FileName} - Sending to Ollama...");
                if (cancellationToken.IsCancellationRequested) throw new OperationCanceledException(cancellationToken);

                // 2. Call Ollama API
                OllamaApiClient ollamaClient = new OllamaApiClient(settings.OllamaServerUrl);
                OllamaGenerateResponse? ollamaResponse = null;
                try
                {
                    ollamaResponse = await ollamaClient.AnalyzeImageAsync(settings.OllamaModelName, settings.OllamaPrompt, imageBytes);
                }
                catch (Exception ex) // Catch specific exceptions if OllamaApiClient throws them, or general Exception
                {
                    item.Status = ProcessingStatus.Error;
                    item.StatusMessage = $"Ollama API error: {ex.Message}";
                    reportProgress?.Invoke($"Error: {item.FileName} - {item.StatusMessage}");
                    return;
                }


                if (cancellationToken.IsCancellationRequested) throw new OperationCanceledException(cancellationToken);

                if (ollamaResponse == null || !ollamaResponse.Done || string.IsNullOrWhiteSpace(ollamaResponse.Response))
                {
                    item.Status = ProcessingStatus.Error;
                    item.StatusMessage = $"Ollama returned an empty or invalid response. API Message: {ollamaResponse?.Response?.Substring(0, Math.Min(ollamaResponse.Response.Length, 100)) ?? "N/A"}";
                    reportProgress?.Invoke($"Error: {item.FileName} - {item.StatusMessage}");
                    return;
                }

                reportProgress?.Invoke($"Processing: {item.FileName} - Parsing Ollama response...");

                // 3. Parse Ollama response
                ParsedOllamaContent parsedContent = OllamaResponseParser.ParseLlavaResponse(ollamaResponse.Response);
                if (!parsedContent.SuccessfullyParsed)
                {
                    item.Status = ProcessingStatus.Error;
                    // If parsing fails but we have a description, use the raw response as description.
                    // Otherwise, indicate parsing failure.
                    if (!string.IsNullOrWhiteSpace(ollamaResponse.Response) && string.IsNullOrWhiteSpace(parsedContent.Description) && !parsedContent.Keywords.Any() && !parsedContent.Categories.Any())
                    {
                        parsedContent.Description = ollamaResponse.Response; // Fallback
                        parsedContent.SuccessfullyParsed = true; // Consider it parsed as a single block
                        reportProgress?.Invoke($"Warning: {item.FileName} - Could not parse structured data, using full response as description.");
                    }
                    else
                    {
                        item.StatusMessage = "Failed to parse structured data from Ollama response.";
                        reportProgress?.Invoke($"Error: {item.FileName} - {item.StatusMessage}");
                        return;
                    }
                }


                reportProgress?.Invoke($"Processing: {item.FileName} - Writing metadata to file...");
                if (cancellationToken.IsCancellationRequested) throw new OperationCanceledException(cancellationToken);

                // 4. Write metadata to image file
                try
                {
                    // Using ImageMetadataService as it's more comprehensive
                    var metadataService = new ImageMetadataService(item.FilePath);
                    metadataService.Read(); // Read existing metadata first
                    metadataService.PopulateFromOllamaContent(parsedContent);
                    metadataService.Save(); // Save changes

                    item.Status = ProcessingStatus.Processed;
                    item.StatusMessage = "Metadata written successfully.";
                    reportProgress?.Invoke($"Success: {item.FileName} - Metadata written.");
                }
                catch (Exception ex)
                {
                    item.Status = ProcessingStatus.Error;
                    item.StatusMessage = $"Error writing metadata: {ex.Message}";
                    reportProgress?.Invoke($"Error: {item.FileName} - {item.StatusMessage}");
                    return;
                }
            }
            catch (OperationCanceledException)
            {
                item.Status = ProcessingStatus.Cancelled;
                item.StatusMessage = "Processing cancelled by user.";
                reportProgress?.Invoke($"Cancelled: {item.FileName}");
            }
            catch (Exception ex)
            {
                item.Status = ProcessingStatus.Error;
                item.StatusMessage = $"Unexpected error: {ex.Message}";
                reportProgress?.Invoke($"Error: {item.FileName} - {item.StatusMessage}");
            }
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Services\SettingsService.cs">
<![CDATA[
// DaminionOllamaApp/Services/SettingsService.cs
using DaminionOllamaApp.Models;
using System;
using System.IO;
using System.Text.Json;

namespace DaminionOllamaApp.Services
{
    public class SettingsService
    {
        private static readonly string AppName = "DaminionOllamaApp";
        private static readonly string SettingsFileName = "settings.json";
        private readonly string _settingsFilePath;

        public SettingsService()
        {
            // Store settings in a subdirectory within the user's LocalApplicationData folder
            string appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            string appSpecificFolder = Path.Combine(appDataPath, AppName);
            Directory.CreateDirectory(appSpecificFolder); // Ensure the directory exists
            _settingsFilePath = Path.Combine(appSpecificFolder, SettingsFileName);
        }

        public AppSettings LoadSettings()
        {
            try
            {
                if (File.Exists(_settingsFilePath))
                {
                    string json = File.ReadAllText(_settingsFilePath);
                    var settings = JsonSerializer.Deserialize<AppSettings>(json);
                    return settings ?? new AppSettings(); // Return new settings if deserialization fails
                }
            }
            catch (Exception ex)
            {
                // Log or handle the exception (e.g., corrupted settings file)
                Console.Error.WriteLine($"Error loading settings: {ex.Message}");
            }
            return new AppSettings(); // Return default settings if file doesn't exist or error occurs
        }

        public void SaveSettings(AppSettings settings)
        {
            try
            {
                string json = JsonSerializer.Serialize(settings, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(_settingsFilePath, json);
            }
            catch (Exception ex)
            {
                // Log or handle the exception (e.g., permission issues)
                Console.Error.WriteLine($"Error saving settings: {ex.Message}");
                // Optionally, re-throw or notify the user
            }
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Utils\RelayCommand.cs">
<![CDATA[
// DaminionOllamaApp/Utils/RelayCommand.cs
using System;
using System.Windows.Input;

namespace DaminionOllamaApp.Utils
{
    public class RelayCommand : ICommand
    {
        private readonly Action<object?> _execute;
        private readonly Predicate<object?>? _canExecute;

        public RelayCommand(Action<object?> execute, Predicate<object?>? canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public event EventHandler? CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public bool CanExecute(object? parameter)
        {
            return _canExecute == null || _canExecute(parameter);
        }

        public void Execute(object? parameter)
        {
            _execute(parameter);
        }

        public void RaiseCanExecuteChanged()
        {
            CommandManager.InvalidateRequerySuggested();
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\ViewModels\DaminionCollectionTaggerViewModel.cs">
<![CDATA[
// DaminionOllamaApp/ViewModels/DaminionCollectionTaggerViewModel.cs
using DaminionOllamaApp.Models;
using DaminionOllamaApp.Services;
using DaminionOllamaApp.Utils;
using DaminionOllamaInteractionLib;
using DaminionOllamaInteractionLib.Daminion;
using DaminionOllamaInteractionLib.Ollama;
using DaminionOllamaInteractionLib.OpenRouter;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace DaminionOllamaApp.ViewModels
{
    public class DaminionCollectionTaggerViewModel : INotifyPropertyChanged
    {
        // --- Fields ---
        private readonly SettingsService _settingsService;
        private DaminionApiClient? _daminionClient;

        private bool _isLoggedIn;
        private string _daminionStatus = "Not logged in. Please configure Daminion settings and click Login.";
        private ObservableCollection<QueryTypeDisplayItem> _queryTypes;
        private QueryTypeDisplayItem? _selectedQueryType;
        private ObservableCollection<DaminionQueueItem> _daminionFilesToProcess;
        private bool _isLoadingItems;
        private bool _isProcessingDaminionQueue;
        private CancellationTokenSource? _daminionCts;

        // --- Properties ---
        public AppSettings Settings { get; }

        public bool IsLoggedIn
        {
            get => _isLoggedIn;
            set { SetProperty(ref _isLoggedIn, value); UpdateCommandStates(); }
        }

        public string DaminionStatus
        {
            get => _daminionStatus;
            set { SetProperty(ref _daminionStatus, value); }
        }

        public ObservableCollection<QueryTypeDisplayItem> QueryTypes
        {
            get => _queryTypes;
            set { SetProperty(ref _queryTypes, value); }
        }

        public QueryTypeDisplayItem? SelectedQueryType
        {
            get => _selectedQueryType;
            set
            {
                if (SetProperty(ref _selectedQueryType, value))
                {
                    if (DaminionFilesToProcess != null)
                    {
                        Application.Current.Dispatcher.Invoke(() => DaminionFilesToProcess.Clear());
                    }
                    UpdateCommandStates();
                }
            }
        }

        public ObservableCollection<DaminionQueueItem> DaminionFilesToProcess
        {
            get => _daminionFilesToProcess;
            set
            {
                if (SetProperty(ref _daminionFilesToProcess, value))
                {
                    UpdateCommandStates();
                }
            }
        }

        public bool IsLoadingItems
        {
            get => _isLoadingItems;
            set { SetProperty(ref _isLoadingItems, value); UpdateCommandStates(); }
        }

        public bool IsProcessingDaminionQueue
        {
            get => _isProcessingDaminionQueue;
            set { SetProperty(ref _isProcessingDaminionQueue, value); UpdateCommandStates(); }
        }

        // --- Commands ---
        public ICommand LoginCommand { get; }
        public ICommand LoadItemsByQueryCommand { get; }
        public ICommand StartDaminionQueueCommand { get; }
        public ICommand StopDaminionQueueCommand { get; }

        public DaminionCollectionTaggerViewModel(AppSettings settings, SettingsService settingsService)
        {
            Settings = settings;
            _settingsService = settingsService;

            _daminionFilesToProcess = new ObservableCollection<DaminionQueueItem>();
            _queryTypes = new ObservableCollection<QueryTypeDisplayItem>
            {
                new QueryTypeDisplayItem { DisplayName = "Unflagged Items", QueryLine = "1,7179;41,1", Operators = "1,any;41,any" },
                new QueryTypeDisplayItem { DisplayName = "Flagged Items", QueryLine = "1,7179;41,2", Operators = "1,any;41,any" },
                new QueryTypeDisplayItem { DisplayName = "Rejected Items", QueryLine = "1,7179;41,3", Operators = "1,any;41,any" }
            };
            _selectedQueryType = _queryTypes.FirstOrDefault();

            LoginCommand = new RelayCommand(async param => await LoginAsync(), param => CanLogin());
            LoadItemsByQueryCommand = new RelayCommand(async param => await LoadItemsByQueryAsync(), param => CanLoadItemsByQuery());
            StartDaminionQueueCommand = new RelayCommand(async param => await StartDaminionQueueProcessingAsync(), param => CanStartDaminionQueue());
            StopDaminionQueueCommand = new RelayCommand(param => StopDaminionQueueProcessing(), param => CanStopDaminionQueue());
        }

        private void UpdateCommandStates()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                (LoginCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (LoadItemsByQueryCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (StartDaminionQueueCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (StopDaminionQueueCommand as RelayCommand)?.RaiseCanExecuteChanged();
            });
        }

        private bool CanLogin() => !IsLoggedIn && !IsLoadingItems && !IsProcessingDaminionQueue;
        private async Task LoginAsync()
        {
            if (string.IsNullOrWhiteSpace(Settings.DaminionServerUrl) ||
                string.IsNullOrWhiteSpace(Settings.DaminionUsername))
            {
                DaminionStatus = "Error: Daminion server URL or username is not configured in settings.";
                return;
            }

            _daminionClient = new DaminionApiClient();
            DaminionStatus = $"Logging in to {Settings.DaminionServerUrl}...";
            IsLoggedIn = false;

            try
            {
                bool success = await _daminionClient.LoginAsync(
                    Settings.DaminionServerUrl,
                    Settings.DaminionUsername,
                    Settings.DaminionPassword);

                if (success)
                {
                    IsLoggedIn = true;
                    DaminionStatus = "Logged in successfully. Select a query type and load items.";
                }
                else
                {
                    DaminionStatus = "Login failed. Check credentials and server URL. See console for details.";
                    IsLoggedIn = false;
                }
            }
            catch (Exception ex)
            {
                DaminionStatus = $"Login error: {ex.Message}";
                IsLoggedIn = false;
                System.Diagnostics.Debug.WriteLine($"Daminion Login Exception: {ex}");
            }
        }

        private bool CanLoadItemsByQuery() => SelectedQueryType != null && IsLoggedIn && !IsLoadingItems && !IsProcessingDaminionQueue;
        private async Task LoadItemsByQueryAsync()
        {
            if (SelectedQueryType == null || _daminionClient == null || !_daminionClient.IsAuthenticated)
            {
                DaminionStatus = "Cannot load items: No query type selected or not logged in.";
                return;
            }

            IsLoadingItems = true;
            DaminionStatus = $"Loading items for query: '{SelectedQueryType.DisplayName}'...";
            Application.Current.Dispatcher.Invoke(() => DaminionFilesToProcess.Clear());
            try
            {
                DaminionSearchMediaItemsResponse? searchResult = await _daminionClient.SearchMediaItemsAsync(
                    SelectedQueryType.QueryLine,
                    SelectedQueryType.Operators,
                    pageSize: 1000);
                if (searchResult != null && searchResult.Success && searchResult.MediaItems != null)
                {
                    if (!searchResult.MediaItems.Any())
                    {
                        DaminionStatus = $"No items found for query: '{SelectedQueryType.DisplayName}'.";
                        IsLoadingItems = false;
                        return;
                    }

                    DaminionStatus = $"{searchResult.MediaItems.Count} item(s) found. Fetching paths...";
                    var itemIds = searchResult.MediaItems.Select(item => item.Id).ToList();

                    if (!itemIds.Any())
                    {
                        DaminionStatus = $"No item IDs found to fetch paths for query: '{SelectedQueryType.DisplayName}'.";
                        IsLoadingItems = false;
                        return;
                    }

                    DaminionPathResult pathResult = await _daminionClient.GetAbsolutePathsAsync(itemIds);
                    if (pathResult.Success && pathResult.Paths != null)
                    {
                        var tempQueueItems = new List<DaminionQueueItem>();
                        foreach (var daminionItem in searchResult.MediaItems)
                        {
                            string displayName = !string.IsNullOrWhiteSpace(daminionItem.Name) ? daminionItem.Name :
                                                 (!string.IsNullOrWhiteSpace(daminionItem.FileName) ? daminionItem.FileName : $"Item {daminionItem.Id}");
                            if (pathResult.Paths.TryGetValue(daminionItem.Id.ToString(), out string? filePath) && !string.IsNullOrEmpty(filePath))
                            {
                                tempQueueItems.Add(new DaminionQueueItem(daminionItem.Id, displayName) { FilePath = filePath });
                            }
                            else
                            {
                                tempQueueItems.Add(new DaminionQueueItem(daminionItem.Id, displayName)
                                {
                                    Status = ProcessingStatus.Error,
                                    StatusMessage = $"Path not found for item ID {daminionItem.Id}."
                                });
                            }
                        }
                        DaminionFilesToProcess = new ObservableCollection<DaminionQueueItem>(tempQueueItems);
                        DaminionStatus = $"{DaminionFilesToProcess.Count(f => f.Status != ProcessingStatus.Error)} items loaded with paths for query '{SelectedQueryType.DisplayName}'. Ready to process.";
                    }
                    else
                    {
                        DaminionStatus = $"Found {searchResult.MediaItems.Count} items, but failed to get their paths: {pathResult.ErrorMessage}";
                        var tempErrorItems = new List<DaminionQueueItem>();
                        foreach (var daminionItem in searchResult.MediaItems)
                        {
                            string displayName = !string.IsNullOrWhiteSpace(daminionItem.Name) ? daminionItem.Name :
                                                (!string.IsNullOrWhiteSpace(daminionItem.FileName) ? daminionItem.FileName : $"Item {daminionItem.Id}");
                            tempErrorItems.Add(new DaminionQueueItem(daminionItem.Id, displayName)
                            {
                                Status = ProcessingStatus.Error,
                                StatusMessage = $"Failed to retrieve file path. API Error: {pathResult.ErrorMessage}"
                            });
                        }
                        DaminionFilesToProcess = new ObservableCollection<DaminionQueueItem>(tempErrorItems);
                    }
                }
                else
                {
                    DaminionStatus = $"Failed to search items for query '{SelectedQueryType.DisplayName}': {searchResult?.Error ?? "Unknown API error."}";
                }
            }
            catch (Exception ex)
            {
                DaminionStatus = $"Error loading items by query: {ex.Message}";
                System.Diagnostics.Debug.WriteLine($"Error in LoadItemsByQueryAsync: {ex}");
            }
            finally
            {
                IsLoadingItems = false;
            }
        }

        private bool CanStartDaminionQueue() => DaminionFilesToProcess.Any(f => (f.Status == ProcessingStatus.Unprocessed || f.Status == ProcessingStatus.Error) && !string.IsNullOrEmpty(f.FilePath)) && IsLoggedIn && !IsProcessingDaminionQueue && !IsLoadingItems;
        private async Task StartDaminionQueueProcessingAsync()
        {
            if (!IsLoggedIn || _daminionClient == null)
            {
                DaminionStatus = "Cannot start: Not logged in to Daminion.";
                return;
            }

            IsProcessingDaminionQueue = true;
            _daminionCts = new CancellationTokenSource();
            var token = _daminionCts.Token;

            DaminionStatus = "Starting Daminion queue processing...";
            int successCount = 0;
            int failureCount = 0;

            var itemsToProcessThisRun = DaminionFilesToProcess
                .Where(f => (f.Status == ProcessingStatus.Unprocessed || f.Status == ProcessingStatus.Error) && !string.IsNullOrEmpty(f.FilePath))
                .ToList();
            if (!itemsToProcessThisRun.Any())
            {
                DaminionStatus = "No valid items with paths to process in the Daminion queue.";
                IsProcessingDaminionQueue = false;
                return;
            }

            string descTagGuid = Settings.DaminionDescriptionTagGuid;
            string keywordsTagGuid = Settings.DaminionKeywordsTagGuid;
            string categoriesTagGuid = Settings.DaminionCategoriesTagGuid;

            if (string.IsNullOrWhiteSpace(descTagGuid) || string.IsNullOrWhiteSpace(keywordsTagGuid) || string.IsNullOrWhiteSpace(categoriesTagGuid))
            {
                DaminionStatus = "Error: Target Daminion Tag GUIDs (Description, Keywords, Categories) are not configured in AppSettings. Please configure them.";
                System.Diagnostics.Debug.WriteLine("Missing Daminion Tag GUIDs for metadata update. Check AppSettings values.");
                IsProcessingDaminionQueue = false;
                return;
            }

            try
            {
                foreach (var item in itemsToProcessThisRun)
                {
                    if (token.IsCancellationRequested)
                    {
                        item.Status = ProcessingStatus.Cancelled;
                        item.StatusMessage = "Daminion queue stopped by user.";
                        break;
                    }

                    item.Status = ProcessingStatus.Processing;
                    UpdateOverallDaminionStatus($"Processing item: {item.FileName} (ID: {item.DaminionItemId})");

                    string aiResponse = string.Empty;
                    bool aiSuccess = false;

                    try
                    {
                        if (string.IsNullOrEmpty(item.FilePath))
                        {
                            throw new InvalidOperationException("File path is missing.");
                        }

                        byte[] imageBytes = await File.ReadAllBytesAsync(item.FilePath, token);
                        item.StatusMessage = $"Sending to {Settings.SelectedAiProvider}...";

                        // --- AI Provider Switch ---
                        if (Settings.SelectedAiProvider == AiProvider.Ollama)
                        {
                            var ollamaClient = new OllamaApiClient(Settings.OllamaServerUrl);
                            var ollamaResponse = await ollamaClient.AnalyzeImageAsync(Settings.OllamaModelName, Settings.OllamaPrompt, imageBytes);
                            if (ollamaResponse != null && ollamaResponse.Done)
                            {
                                aiResponse = ollamaResponse.Response;
                                aiSuccess = true;
                            }
                            else
                            {
                                throw new Exception($"Ollama API error: {ollamaResponse?.Response ?? "Empty response."}");
                            }
                        }
                        else // AiProvider.OpenRouter
                        {
                            var routerClient = new OpenRouterApiClient(Settings.OpenRouterApiKey, Settings.OpenRouterHttpReferer);
                            string base64Image = Convert.ToBase64String(imageBytes);
                            string? routerResponse = await routerClient.AnalyzeImageAsync(Settings.OpenRouterModelName, Settings.OllamaPrompt, base64Image);
                            if (!string.IsNullOrEmpty(routerResponse) && !routerResponse.StartsWith("Error:"))
                            {
                                aiResponse = routerResponse;
                                aiSuccess = true;
                            }
                            else
                            {
                                throw new Exception($"OpenRouter API error: {routerResponse ?? "Empty response."}");
                            }
                        }
                    }
                    catch (OperationCanceledException) { throw; }
                    catch (Exception ex)
                    {
                        item.StatusMessage = $"AI processing error: {ex.Message}";
                        System.Diagnostics.Debug.WriteLine($"AI error for {item.FileName}: {ex}");
                        aiSuccess = false;
                    }

                    if (token.IsCancellationRequested) throw new OperationCanceledException();

                    if (!aiSuccess)
                    {
                        item.Status = ProcessingStatus.Error;
                        failureCount++;
                        continue;
                    }

                    item.StatusMessage = "Parsing AI response...";
                    ParsedOllamaContent parsedContent = OllamaResponseParser.ParseLlavaResponse(aiResponse);

                    item.StatusMessage = "Updating local file and Daminion...";
                    var operations = new List<DaminionUpdateOperation>();

                    if (!string.IsNullOrWhiteSpace(parsedContent.Description))
                    {
                        operations.Add(new DaminionUpdateOperation { Guid = descTagGuid, Value = parsedContent.Description, Id = 0, Remove = false });
                    }
                    if (parsedContent.Keywords.Any())
                    {
                        foreach (var keyword in parsedContent.Keywords.Where(k => !string.IsNullOrWhiteSpace(k)))
                        {
                            operations.Add(new DaminionUpdateOperation { Guid = keywordsTagGuid, Value = keyword, Id = 0, Remove = false });
                        }
                    }
                    if (parsedContent.Categories.Any())
                    {
                        foreach (var category in parsedContent.Categories.Where(c => !string.IsNullOrWhiteSpace(c)))
                        {
                            operations.Add(new DaminionUpdateOperation { Guid = categoriesTagGuid, Value = category, Id = 0, Remove = false });
                        }
                    }

                    if (operations.Any())
                    {
                        var updateResult = await _daminionClient.UpdateItemMetadataAsync(new List<long> { item.DaminionItemId }, operations);
                        if (updateResult != null && updateResult.Success)
                        {
                            item.Status = ProcessingStatus.Processed;
                            item.StatusMessage = "Processed and Daminion metadata updated.";
                            successCount++;
                        }
                        else
                        {
                            item.Status = ProcessingStatus.Error;
                            item.StatusMessage = $"Daminion server update failed: {updateResult?.Error ?? "Unknown error"}";
                            failureCount++;
                        }
                    }
                    else
                    {
                        item.Status = ProcessingStatus.Processed;
                        item.StatusMessage = "Local file processed; no new metadata from AI to update in Daminion.";
                        successCount++;
                    }
                }
            }
            catch (OperationCanceledException)
            {
                UpdateOverallDaminionStatus("Daminion queue processing cancelled by user.");
                foreach (var item in DaminionFilesToProcess.Where(i => i.Status == ProcessingStatus.Processing))
                {
                    item.Status = ProcessingStatus.Cancelled;
                    item.StatusMessage = "Cancelled during queue processing.";
                }
            }
            catch (Exception ex)
            {
                UpdateOverallDaminionStatus($"An error occurred during Daminion queue processing: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"Error in StartDaminionQueueProcessingAsync: {ex}");
                foreach (var item in DaminionFilesToProcess.Where(i => i.Status == ProcessingStatus.Processing))
                {
                    item.Status = ProcessingStatus.Error;
                    item.StatusMessage = "Queue processing error.";
                }
            }
            finally
            {
                IsProcessingDaminionQueue = false;
                _daminionCts?.Dispose();
                _daminionCts = null;
                successCount = DaminionFilesToProcess.Count(i => i.Status == ProcessingStatus.Processed);
                failureCount = DaminionFilesToProcess.Count(i => i.Status == ProcessingStatus.Error);
                int cancelledCount = DaminionFilesToProcess.Count(i => i.Status == ProcessingStatus.Cancelled);
                string finalSummary = $"Daminion queue finished. Successful: {successCount}, Failures: {failureCount}, Cancelled: {cancelledCount}.";
                UpdateOverallDaminionStatus(finalSummary);
            }
        }

        private void UpdateOverallDaminionStatus(string message)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                DaminionStatus = message;
            });
        }

        private bool CanStopDaminionQueue() => IsProcessingDaminionQueue;
        private void StopDaminionQueueProcessing()
        {
            _daminionCts?.Cancel();
            UpdateOverallDaminionStatus("Daminion queue stop requested by user.");
        }

        public event PropertyChangedEventHandler? PropertyChanged;
        protected virtual bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string propertyName = "")
        {
            if (EqualityComparer<T>.Default.Equals(storage, value)) return false;
            storage = value;
            OnPropertyChanged(propertyName);
            return true;
        }
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            });
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\ViewModels\LocalFileTaggerViewModel.cs">
<![CDATA[
// DaminionOllamaApp/ViewModels/LocalFileTaggerViewModel.cs
using DaminionOllamaApp.Models;
using DaminionOllamaApp.Services;
using DaminionOllamaApp.Utils;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace DaminionOllamaApp.ViewModels
{
    /// <summary>
    /// ViewModel for the "Local File Tagger" tab.
    /// Manages the state and logic for processing a queue of local image files.
    /// </summary>
    public class LocalFileTaggerViewModel : INotifyPropertyChanged
    {
        // --- Private Fields ---
        private string _currentOperationStatus = "Ready. Add files to begin.";
        private ObservableCollection<FileQueueItem> _filesToProcess;
        private bool _isProcessingQueue;
        private CancellationTokenSource? _cancellationTokenSource;
        private FileQueueItem? _selectedFile;

        private readonly ProcessingService _processingService;
        private readonly SettingsService _settingsService;

        // --- Public Properties ---

        /// <summary>
        /// Holds the shared application settings, passed in from the MainViewModel.
        /// This allows the ViewModel to react to global settings changes.
        /// </summary>
        public AppSettings Settings { get; }

        /// <summary>
        /// A collection of files that are queued for processing. This is bound to the ListView in the UI.
        /// </summary>
        public ObservableCollection<FileQueueItem> FilesToProcess
        {
            get => _filesToProcess;
            set
            {
                _filesToProcess = value;
                OnPropertyChanged(nameof(FilesToProcess));
            }
        }

        /// <summary>
        /// The currently selected file in the ListView.
        /// </summary>
        public FileQueueItem? SelectedFile
        {
            get => _selectedFile;
            set
            {
                if (_selectedFile != value)
                {
                    _selectedFile = value;
                    OnPropertyChanged(nameof(SelectedFile));
                    // Notify that the "Remove Selected" command's executability might have changed.
                    ((RelayCommand)RemoveSelectedFileCommand).RaiseCanExecuteChanged();
                }
            }
        }

        /// <summary>
        /// A status message displayed to the user, indicating the current operation or result.
        /// </summary>
        public string CurrentOperationStatus
        {
            get => _currentOperationStatus;
            set
            {
                _currentOperationStatus = value;
                OnPropertyChanged(nameof(CurrentOperationStatus));
            }
        }

        /// <summary>
        /// A flag indicating whether the processing queue is currently active.
        /// Used to enable/disable UI controls.
        /// </summary>
        public bool IsProcessingQueue
        {
            get => _isProcessingQueue;
            set
            {
                if (_isProcessingQueue != value)
                {
                    _isProcessingQueue = value;
                    OnPropertyChanged(nameof(IsProcessingQueue));
                    // When this property changes, update the state of all related commands.
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        ((RelayCommand)StartQueueCommand).RaiseCanExecuteChanged();
                        ((RelayCommand)StopQueueCommand).RaiseCanExecuteChanged();
                        ((RelayCommand)AddFilesCommand).RaiseCanExecuteChanged();
                        ((RelayCommand)RemoveSelectedFileCommand).RaiseCanExecuteChanged();
                        ((RelayCommand)ClearProcessedFilesCommand).RaiseCanExecuteChanged();
                        ((RelayCommand)ClearAllFilesCommand).RaiseCanExecuteChanged();
                    });
                }
            }
        }

        // --- Commands ---
        public ICommand AddFilesCommand { get; }
        public ICommand StartQueueCommand { get; }
        public ICommand StopQueueCommand { get; }
        public ICommand RemoveSelectedFileCommand { get; }
        public ICommand ClearProcessedFilesCommand { get; }
        public ICommand ClearAllFilesCommand { get; }

        /// <summary>
        /// Initializes a new instance of the LocalFileTaggerViewModel.
        /// </summary>
        /// <param name="settings">The shared AppSettings instance.</param>
        /// <param name="settingsService">The service for loading/saving settings.</param>
        public LocalFileTaggerViewModel(AppSettings settings, SettingsService settingsService)
        {
            // Store the shared settings instance
            Settings = settings;
            _settingsService = settingsService;

            FilesToProcess = new ObservableCollection<FileQueueItem>();
            _processingService = new ProcessingService();

            // Initialize commands
            AddFilesCommand = new RelayCommand(param => AddFiles(), param => CanAddFiles());
            StartQueueCommand = new RelayCommand(async param => await StartQueueAsync(), param => CanStartQueue());
            StopQueueCommand = new RelayCommand(param => StopQueue(), param => CanStopQueue());
            RemoveSelectedFileCommand = new RelayCommand(param => RemoveSelectedFile(), param => CanRemoveSelectedFile());
            ClearProcessedFilesCommand = new RelayCommand(param => ClearProcessedFiles(), param => CanClearProcessedFiles());
            ClearAllFilesCommand = new RelayCommand(param => ClearAllFiles(), param => CanClearAllFiles());
        }

        private bool CanAddFiles() => !IsProcessingQueue;
        private void AddFiles()
        {
            var openFileDialog = new OpenFileDialog
            {
                Multiselect = true,
                Filter = "Image Files (*.jpg; *.jpeg; *.png; *.bmp; *.gif; *.tiff)|*.jpg;*.jpeg;*.png;*.bmp;*.gif;*.tiff|All files (*.*)|*.*",
                Title = "Select Image Files"
            };
            if (openFileDialog.ShowDialog() == true)
            {
                int filesAddedCount = 0;
                foreach (string filePath in openFileDialog.FileNames)
                {
                    if (!FilesToProcess.Any(f => f.FilePath.Equals(filePath, StringComparison.OrdinalIgnoreCase)))
                    {
                        FilesToProcess.Add(new FileQueueItem(filePath));
                        filesAddedCount++;
                    }
                }
                CurrentOperationStatus = $"{filesAddedCount} file(s) added to the queue. {FilesToProcess.Count} total.";
                // Update command states after modifying the list
                ((RelayCommand)StartQueueCommand).RaiseCanExecuteChanged();
                ((RelayCommand)ClearAllFilesCommand).RaiseCanExecuteChanged();
                ((RelayCommand)ClearProcessedFilesCommand).RaiseCanExecuteChanged();
            }
        }

        private bool CanStartQueue()
        {
            return !IsProcessingQueue && FilesToProcess.Any(f => f.Status == ProcessingStatus.Unprocessed || f.Status == ProcessingStatus.Error);
        }

        private async Task StartQueueAsync()
        {
            IsProcessingQueue = true;
            _cancellationTokenSource = new CancellationTokenSource();
            var token = _cancellationTokenSource.Token;

            CurrentOperationStatus = "Processing queue...";
            int processedCount = 0;
            int errorCount = 0;

            var itemsToProcessThisRun = FilesToProcess
                                        .Where(f => f.Status == ProcessingStatus.Unprocessed || f.Status == ProcessingStatus.Error)
                                        .ToList();
            foreach (var item in itemsToProcessThisRun)
            {
                if (token.IsCancellationRequested)
                {
                    item.Status = ProcessingStatus.Cancelled;
                    item.StatusMessage = "Queue stopped.";
                    break;
                }
                item.Status = ProcessingStatus.Queued;
                item.StatusMessage = "Waiting for processing...";

                // Use the shared Settings property directly
                await _processingService.ProcessLocalFileAsync(item, Settings, UpdateOverallStatus, token);

                if (item.Status == ProcessingStatus.Processed) processedCount++;
                else if (item.Status == ProcessingStatus.Error || item.Status == ProcessingStatus.Cancelled) errorCount++;
            }

            IsProcessingQueue = false;
            _cancellationTokenSource?.Dispose();
            _cancellationTokenSource = null;
            string summary = $"Queue finished. Processed: {processedCount}, Errors/Cancelled: {errorCount}.";
            CurrentOperationStatus = summary;
            UpdateOverallStatus(summary);
            ((RelayCommand)StartQueueCommand).RaiseCanExecuteChanged();
            ((RelayCommand)ClearProcessedFilesCommand).RaiseCanExecuteChanged();
        }

        private void UpdateOverallStatus(string message)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                CurrentOperationStatus = message;
            });
        }

        private bool CanStopQueue() => IsProcessingQueue;
        private void StopQueue()
        {
            if (_cancellationTokenSource != null && !_cancellationTokenSource.IsCancellationRequested)
            {
                CurrentOperationStatus = "Stop request received. Finishing current item then stopping...";
                _cancellationTokenSource.Cancel();
            }
        }

        private bool CanRemoveSelectedFile() => SelectedFile != null && !IsProcessingQueue;
        private void RemoveSelectedFile()
        {
            if (SelectedFile != null)
            {
                FilesToProcess.Remove(SelectedFile);
                SelectedFile = null; // Clear selection
                CurrentOperationStatus = "Selected file removed.";
                ((RelayCommand)StartQueueCommand).RaiseCanExecuteChanged();
                ((RelayCommand)ClearAllFilesCommand).RaiseCanExecuteChanged();
                ((RelayCommand)ClearProcessedFilesCommand).RaiseCanExecuteChanged();
            }
        }

        private bool CanClearProcessedFiles() => FilesToProcess.Any(f => f.Status == ProcessingStatus.Processed) && !IsProcessingQueue;
        private void ClearProcessedFiles()
        {
            var processedFiles = FilesToProcess.Where(f => f.Status == ProcessingStatus.Processed).ToList();
            foreach (var file in processedFiles)
            {
                FilesToProcess.Remove(file);
            }
            CurrentOperationStatus = $"{processedFiles.Count} processed file(s) cleared.";
            ((RelayCommand)StartQueueCommand).RaiseCanExecuteChanged();
            ((RelayCommand)ClearProcessedFilesCommand).RaiseCanExecuteChanged();
            ((RelayCommand)ClearAllFilesCommand).RaiseCanExecuteChanged();
        }

        private bool CanClearAllFiles() => FilesToProcess.Any() && !IsProcessingQueue;
        private void ClearAllFiles()
        {
            int count = FilesToProcess.Count;
            FilesToProcess.Clear();
            SelectedFile = null; // Clear selection as well
            CurrentOperationStatus = $"{count} file(s) cleared from the queue.";
            ((RelayCommand)StartQueueCommand).RaiseCanExecuteChanged();
            ((RelayCommand)ClearAllFilesCommand).RaiseCanExecuteChanged();
            ((RelayCommand)ClearProcessedFilesCommand).RaiseCanExecuteChanged();
        }

        public event PropertyChangedEventHandler? PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\ViewModels\MainViewModel.cs">
<![CDATA[
// DaminionOllamaApp/ViewModels/MainViewModel.cs
using DaminionOllamaApp.Models;
using DaminionOllamaApp.Services;
using DaminionOllamaApp.Utils;
using DaminionOllamaApp.Views;
using System.ComponentModel;
using System.Windows;
using System.Windows.Input;

namespace DaminionOllamaApp.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        public ICommand OpenSettingsCommand { get; }
        public ICommand ExitCommand { get; }

        public LocalFileTaggerViewModel LocalFileTaggerVM { get; }
        public DaminionCollectionTaggerViewModel DaminionCollectionTaggerVM { get; }
        public MetadataTidyUpViewModel MetadataTidyUpVM { get; }

        // This is the single source of truth for settings
        public AppSettings AppSettings { get; }

        public MainViewModel()
        {
            // Load settings once when the application starts
            var settingsService = new SettingsService();
            AppSettings = settingsService.LoadSettings();

            OpenSettingsCommand = new RelayCommand(param => OpenSettingsWindow());
            ExitCommand = new RelayCommand(param => ExitApplication());

            // Pass the single AppSettings instance to all child ViewModels
            LocalFileTaggerVM = new LocalFileTaggerViewModel(AppSettings, settingsService);
            DaminionCollectionTaggerVM = new DaminionCollectionTaggerViewModel(AppSettings, settingsService);
            MetadataTidyUpVM = new MetadataTidyUpViewModel(AppSettings, settingsService);
        }

        private void OpenSettingsWindow()
        {
            // Pass the single AppSettings instance to the SettingsViewModel
            var settingsViewModel = new SettingsViewModel(this.AppSettings);
            var settingsWindow = new SettingsWindow
            {
                Owner = Application.Current.MainWindow,
                DataContext = settingsViewModel
            };

            // Define what happens when the settings window is closed/saved
            settingsViewModel.CloseAction = () =>
            {
                // Save the (potentially modified) settings object to disk
                var settingsService = new SettingsService();
                settingsService.SaveSettings(this.AppSettings);
                settingsWindow.Close();
            };

            settingsViewModel.UpdatePasswordBoxAction = (pwd) => settingsWindow.SetPasswordBox(pwd);
            settingsViewModel.UpdatePasswordBoxAction?.Invoke(settingsViewModel.Settings.DaminionPassword);

            settingsWindow.ShowDialog();
        }

        private void ExitApplication()
        {
            Application.Current.Shutdown();
        }

        public event PropertyChangedEventHandler? PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\ViewModels\MetadataTidyUpViewModel.cs">
<![CDATA[
// DaminionOllamaApp/ViewModels/MetadataTidyUpViewModel.cs
using DaminionOllamaApp.Models;
using DaminionOllamaApp.Services;
using DaminionOllamaApp.Utils;
using DaminionOllamaInteractionLib;
using DaminionOllamaInteractionLib.Daminion;
using DaminionOllamaInteractionLib.Services; // For ImageMetadataService
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace DaminionOllamaApp.ViewModels
{
    public class MetadataTidyUpViewModel : INotifyPropertyChanged
    {
        private readonly SettingsService _settingsService;
        private AppSettings _currentSettings;
        private DaminionApiClient? _daminionClient;

        private ObservableCollection<FileQueueItem> _filesToProcess;
        private string _currentOperationStatus = "Select processing mode and add files.";
        private bool _isCleaningQueue;
        private CancellationTokenSource? _cleanupCts;

        private bool _isLocalFilesMode = true;
        private bool _isDaminionCatalogMode;
        private bool _isDaminionLoggedIn;
        private string _daminionLoginStatus = "Not logged in.";
        private ObservableCollection<QueryTypeDisplayItem> _daminionQueryTypes;
        private QueryTypeDisplayItem? _selectedDaminionQueryType;
        private bool _isLoadingDaminionItems;

        private bool _splitCategories = true;
        private bool _trimDescriptionPrefix = true;
        private string _descriptionPrefixToTrim = "Okay, here's a detailed description of the image, broken down as requested:";

        public ObservableCollection<FileQueueItem> FilesToProcess
        {
            get => _filesToProcess;
            set { SetProperty(ref _filesToProcess, value); }
        }

        public string CurrentOperationStatus
        {
            get => _currentOperationStatus;
            set { SetProperty(ref _currentOperationStatus, value); }
        }

        public bool IsCleaningQueue
        {
            get => _isCleaningQueue;
            set { if (SetProperty(ref _isCleaningQueue, value)) UpdateCommandStates(); }
        }

        public bool IsLocalFilesMode
        {
            get => _isLocalFilesMode;
            set
            {
                if (SetProperty(ref _isLocalFilesMode, value))
                {
                    if (_isLocalFilesMode) IsDaminionCatalogMode = false;
                    Application.Current.Dispatcher.Invoke(() => FilesToProcess.Clear());
                    CurrentOperationStatus = "Local files mode selected. Add files to tidy up.";
                    UpdateCommandStates();
                }
            }
        }

        public bool IsDaminionCatalogMode
        {
            get => _isDaminionCatalogMode;
            set
            {
                if (SetProperty(ref _isDaminionCatalogMode, value))
                {
                    if (_isDaminionCatalogMode) IsLocalFilesMode = false;
                    Application.Current.Dispatcher.Invoke(() => FilesToProcess.Clear());
                    CurrentOperationStatus = "Daminion catalog mode selected. Login and select a query.";
                    UpdateCommandStates();
                }
            }
        }

        public bool IsDaminionLoggedIn
        {
            get => _isDaminionLoggedIn;
            set { SetProperty(ref _isDaminionLoggedIn, value); UpdateCommandStates(); }
        }

        public string DaminionLoginStatus
        {
            get => _daminionLoginStatus;
            set { SetProperty(ref _daminionLoginStatus, value); }
        }

        public ObservableCollection<QueryTypeDisplayItem> DaminionQueryTypes
        {
            get => _daminionQueryTypes;
            set { SetProperty(ref _daminionQueryTypes, value); }
        }

        public QueryTypeDisplayItem? SelectedDaminionQueryType
        {
            get => _selectedDaminionQueryType;
            set
            {
                if (SetProperty(ref _selectedDaminionQueryType, value))
                {
                    Application.Current.Dispatcher.Invoke(() => FilesToProcess.Clear());
                    UpdateCommandStates();
                }
            }
        }

        public bool IsLoadingDaminionItems
        {
            get => _isLoadingDaminionItems;
            set { SetProperty(ref _isLoadingDaminionItems, value); UpdateCommandStates(); }
        }

        public bool SplitCategories
        {
            get => _splitCategories;
            set { SetProperty(ref _splitCategories, value); }
        }

        public bool TrimDescriptionPrefix
        {
            get => _trimDescriptionPrefix;
            set { SetProperty(ref _trimDescriptionPrefix, value); }
        }

        public string DescriptionPrefixToTrim
        {
            get => _descriptionPrefixToTrim;
            set { SetProperty(ref _descriptionPrefixToTrim, value); }
        }

        public ICommand AddFilesCommand { get; }
        public ICommand DaminionLoginCommand { get; }
        public ICommand LoadDaminionItemsCommand { get; }
        public ICommand StartCleanupCommand { get; }
        public ICommand StopCleanupCommand { get; }

        public MetadataTidyUpViewModel()
        {
            _settingsService = new SettingsService();
            _currentSettings = _settingsService.LoadSettings();

            _filesToProcess = new ObservableCollection<FileQueueItem>();
            _daminionQueryTypes = new ObservableCollection<QueryTypeDisplayItem>
            {
                new QueryTypeDisplayItem { DisplayName = "Unflagged Items", QueryLine = "1,7179;41,1", Operators = "1,any;41,any" },
                new QueryTypeDisplayItem { DisplayName = "Flagged Items", QueryLine = "1,7179;41,2", Operators = "1,any;41,any" },
                new QueryTypeDisplayItem { DisplayName = "Rejected Items", QueryLine = "1,7179;41,3", Operators = "1,any;41,any" }
            };
            SelectedDaminionQueryType = _daminionQueryTypes.FirstOrDefault();

            AddFilesCommand = new RelayCommand(param => AddLocalFiles(), param => CanAddLocalFiles());
            DaminionLoginCommand = new RelayCommand(async param => await LoginToDaminionAsync(), param => CanLoginToDaminion());
            LoadDaminionItemsCommand = new RelayCommand(async param => await LoadDaminionItemsByQueryAsync(), param => CanLoadDaminionItems());
            StartCleanupCommand = new RelayCommand(async param => await StartCleanupAsync(), param => CanStartCleanup());
            StopCleanupCommand = new RelayCommand(param => StopCleanup(), param => CanStopCleanup());
        }

        private void UpdateCommandStates()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                (AddFilesCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (DaminionLoginCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (LoadDaminionItemsCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (StartCleanupCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (StopCleanupCommand as RelayCommand)?.RaiseCanExecuteChanged();
            });
        }

        private bool CanAddLocalFiles() => IsLocalFilesMode && !IsCleaningQueue && !IsLoadingDaminionItems;
        private void AddLocalFiles()
        {
            var openFileDialog = new OpenFileDialog
            {
                Multiselect = true,
                Filter = "Image Files (*.jpg; *.jpeg; *.png; *.bmp; *.gif; *.tiff)|*.jpg;*.jpeg;*.png;*.bmp;*.gif;*.tiff|All files (*.*)|*.*",
                Title = "Select Image Files for Meta Tidy-up"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                int filesAddedCount = 0;
                foreach (string filePath in openFileDialog.FileNames)
                {
                    if (!FilesToProcess.Any(f => f.FilePath.Equals(filePath, StringComparison.OrdinalIgnoreCase)))
                    {
                        FilesToProcess.Add(new FileQueueItem(filePath));
                        filesAddedCount++;
                    }
                }
                CurrentOperationStatus = $"{filesAddedCount} local file(s) added. {FilesToProcess.Count} total.";
                UpdateCommandStates();
            }
        }

        private bool CanLoginToDaminion() => IsDaminionCatalogMode && !IsDaminionLoggedIn && !IsLoadingDaminionItems && !IsCleaningQueue;
        private async Task LoginToDaminionAsync()
        {
            _currentSettings = _settingsService.LoadSettings();
            if (string.IsNullOrWhiteSpace(_currentSettings.DaminionServerUrl) ||
                string.IsNullOrWhiteSpace(_currentSettings.DaminionUsername))
            {
                DaminionLoginStatus = "Error: Daminion server URL or username is not configured.";
                return;
            }

            _daminionClient = new DaminionApiClient();
            DaminionLoginStatus = $"Logging in to Daminion: {_currentSettings.DaminionServerUrl}...";
            IsDaminionLoggedIn = false;

            try
            {
                bool success = await _daminionClient.LoginAsync(
                    _currentSettings.DaminionServerUrl,
                    _currentSettings.DaminionUsername,
                    _currentSettings.DaminionPassword);

                IsDaminionLoggedIn = success;
                DaminionLoginStatus = success ? "Daminion login successful. Select query and load items." : "Daminion login failed.";
            }
            catch (Exception ex)
            {
                DaminionLoginStatus = $"Daminion login error: {ex.Message}";
                IsDaminionLoggedIn = false;
                System.Diagnostics.Debug.WriteLine($"Daminion Login Exception (TidyUpVM): {ex}");
            }
        }

        private bool CanLoadDaminionItems() => IsDaminionCatalogMode && IsDaminionLoggedIn && SelectedDaminionQueryType != null && !IsLoadingDaminionItems && !IsCleaningQueue;
        private async Task LoadDaminionItemsByQueryAsync()
        {
            if (SelectedDaminionQueryType == null || _daminionClient == null || !_daminionClient.IsAuthenticated)
            {
                CurrentOperationStatus = "Cannot load: No query type selected or not logged in to Daminion.";
                return;
            }

            IsLoadingDaminionItems = true;
            CurrentOperationStatus = $"Loading Daminion items for: '{SelectedDaminionQueryType.DisplayName}'...";
            Application.Current.Dispatcher.Invoke(() => FilesToProcess.Clear());

            try
            {
                DaminionSearchMediaItemsResponse? searchResult = await _daminionClient.SearchMediaItemsAsync(
                    SelectedDaminionQueryType.QueryLine,
                    SelectedDaminionQueryType.Operators,
                    pageSize: 1000);

                if (searchResult != null && searchResult.Success && searchResult.MediaItems != null)
                {
                    if (!searchResult.MediaItems.Any())
                    {
                        CurrentOperationStatus = $"No Daminion items found for: '{SelectedDaminionQueryType.DisplayName}'.";
                    }
                    else
                    {
                        CurrentOperationStatus = $"{searchResult.MediaItems.Count} Daminion item(s) found. Fetching paths...";
                        var itemIds = searchResult.MediaItems.Select(item => item.Id).ToList();

                        if (!itemIds.Any())
                        {
                            CurrentOperationStatus = $"No Daminion item IDs to fetch paths for: '{SelectedDaminionQueryType.DisplayName}'.";
                        }
                        else
                        {
                            DaminionPathResult pathResult = await _daminionClient.GetAbsolutePathsAsync(itemIds);
                            if (pathResult.Success && pathResult.Paths != null)
                            {
                                foreach (var daminionItemFromSearch in searchResult.MediaItems)
                                {
                                    string displayName = !string.IsNullOrWhiteSpace(daminionItemFromSearch.Name) ? daminionItemFromSearch.Name :
                                                         (!string.IsNullOrWhiteSpace(daminionItemFromSearch.FileName) ? daminionItemFromSearch.FileName : $"Item {daminionItemFromSearch.Id}");

                                    if (pathResult.Paths.TryGetValue(daminionItemFromSearch.Id.ToString(), out string? filePath) && !string.IsNullOrEmpty(filePath))
                                    {
                                        FilesToProcess.Add(new FileQueueItem(filePath, displayName, daminionItemFromSearch.Id));
                                    }
                                    else
                                    {
                                        FilesToProcess.Add(new FileQueueItem(string.Empty, displayName, daminionItemFromSearch.Id)
                                        { Status = ProcessingStatus.Error, StatusMessage = $"Path not found for Daminion ID {daminionItemFromSearch.Id}." });
                                    }
                                }
                                CurrentOperationStatus = $"{FilesToProcess.Count(f => f.Status != ProcessingStatus.Error)} Daminion items loaded. Ready for cleanup.";
                            }
                            else
                            {
                                CurrentOperationStatus = $"Found {searchResult.MediaItems.Count} items, but failed to get paths: {pathResult.ErrorMessage}";
                                foreach (var daminionItemFromSearch in searchResult.MediaItems)
                                {
                                    string displayName = !string.IsNullOrWhiteSpace(daminionItemFromSearch.Name) ? daminionItemFromSearch.Name :
                                                        (!string.IsNullOrWhiteSpace(daminionItemFromSearch.FileName) ? daminionItemFromSearch.FileName : $"Item {daminionItemFromSearch.Id}");
                                    FilesToProcess.Add(new FileQueueItem(string.Empty, displayName, daminionItemFromSearch.Id)
                                    { Status = ProcessingStatus.Error, StatusMessage = $"Path retrieval failed. API Error: {pathResult.ErrorMessage}" });
                                }
                            }
                        }
                    }
                }
                else
                {
                    CurrentOperationStatus = $"Failed to search Daminion items: {searchResult?.Error ?? "Unknown API error."}";
                }
            }
            catch (Exception ex)
            {
                CurrentOperationStatus = $"Error loading Daminion items: {ex.Message}";
                System.Diagnostics.Debug.WriteLine($"Error in LoadDaminionItemsByQueryAsync (TidyUpVM): {ex}");
            }
            finally
            {
                IsLoadingDaminionItems = false;
            }
        }

        private bool CanStartCleanup() => FilesToProcess.Any(f => (f.Status == ProcessingStatus.Unprocessed || f.Status == ProcessingStatus.Error) && !string.IsNullOrEmpty(f.FilePath)) && !IsCleaningQueue && !IsLoadingDaminionItems;

        // =======================================================================================
        // REFINED StartCleanupAsync METHOD
        // =======================================================================================
        private async Task StartCleanupAsync()
        {
            IsCleaningQueue = true;
            _currentSettings = _settingsService.LoadSettings();
            _cleanupCts = new CancellationTokenSource();
            var token = _cleanupCts.Token;

            CurrentOperationStatus = "Starting metadata cleanup...";
            int processedCount = 0;
            int errorCount = 0;

            var itemsToClean = FilesToProcess.Where(f => (f.Status == ProcessingStatus.Unprocessed || f.Status == ProcessingStatus.Error) && !string.IsNullOrEmpty(f.FilePath)).ToList();

            if (IsDaminionCatalogMode &&
                (string.IsNullOrWhiteSpace(_currentSettings.DaminionDescriptionTagGuid) ||
                 string.IsNullOrWhiteSpace(_currentSettings.DaminionKeywordsTagGuid) || // Ensure Keywords GUID is also checked if you plan to update it
                 string.IsNullOrWhiteSpace(_currentSettings.DaminionCategoriesTagGuid)))
            {
                CurrentOperationStatus = "Error: Key Daminion Tag GUIDs (Description, Keywords, Categories) are not set in AppSettings. Cannot update Daminion catalog.";
                IsCleaningQueue = false;
                return;
            }

            System.Diagnostics.Debug.WriteLine($"Starting cleanup. SplitCategories: {SplitCategories}, TrimDescriptionPrefix: {TrimDescriptionPrefix}, Prefix: '{DescriptionPrefixToTrim}'");

            try
            {
                foreach (var item in itemsToClean)
                {
                    if (token.IsCancellationRequested)
                    {
                        item.Status = ProcessingStatus.Cancelled;
                        item.StatusMessage = "Cleanup cancelled by user.";
                        break;
                    }

                    item.Status = ProcessingStatus.Processing;
                    item.StatusMessage = "";
                    UpdateOverallStatus($"Tidying: {item.FileName}");
                    System.Diagnostics.Debug.WriteLine($"Tidying: {item.FileName}");

                    bool changesMadeToLocalFile = false;
                    ImageMetadataService metadataService = new ImageMetadataService(item.FilePath);

                    try
                    {
                        metadataService.Read();
                        System.Diagnostics.Debug.WriteLine($"  Read metadata. Desc: '{metadataService.Description?.Substring(0, Math.Min(50, metadataService.Description?.Length ?? 0))}', Cats: {string.Join(";", metadataService.Categories ?? new List<string>())}");

                        // 1. Trim Description Prefix
                        if (TrimDescriptionPrefix && !string.IsNullOrEmpty(metadataService.Description))
                        {
                            string originalDesc = metadataService.Description;
                            string currentDesc = metadataService.Description;

                            string[] prefixesToTrim = {
                                DescriptionPrefixToTrim, // User-defined prefix first
                                "Okay, here’s a detailed description of the image, broken down as requested:",
                                "Okay, here's a detailed description of the image, broken down as requested:",
                                "Okay, here’s a detailed description of the image, categorized and with keywords as requested:",
                                "Here's a detailed description of the image:",
                                "Here’s a detailed description of the image:"
                            };

                            foreach (var prefix in prefixesToTrim.Where(p => !string.IsNullOrWhiteSpace(p))) // Only consider non-empty prefixes
                            {
                                if (currentDesc.TrimStart().StartsWith(prefix, StringComparison.OrdinalIgnoreCase))
                                {
                                    currentDesc = currentDesc.TrimStart().Substring(prefix.Length);
                                    System.Diagnostics.Debug.WriteLine($"    Trimmed prefix '{prefix}' from description.");
                                    break;
                                }
                            }

                            string followUpPattern = "<br><br>**Description:**";
                            int followUpIndex = currentDesc.IndexOf(followUpPattern, StringComparison.OrdinalIgnoreCase);
                            if (followUpIndex != -1)
                            {
                                currentDesc = currentDesc.Substring(followUpIndex + followUpPattern.Length);
                                System.Diagnostics.Debug.WriteLine($"    Trimmed follow-up pattern '{followUpPattern}' from description.");
                            }

                            currentDesc = currentDesc.Trim();
                            if (currentDesc != originalDesc.Trim())
                            {
                                metadataService.Description = currentDesc;
                                changesMadeToLocalFile = true;
                                item.StatusMessage += "Description trimmed. ";
                                System.Diagnostics.Debug.WriteLine($"    Description changed. New: '{metadataService.Description?.Substring(0, Math.Min(50, metadataService.Description?.Length ?? 0))}'");
                            }
                        }

                        // 2. Split and Clean Categories
                        if (SplitCategories && metadataService.Categories != null && metadataService.Categories.Any())
                        {
                            System.Diagnostics.Debug.WriteLine($"    Original categories: [{string.Join("] | [", metadataService.Categories)}]");
                            var newCategoriesList = new List<string>();
                            bool anyCategoryStringWasSplit = false;

                            foreach (var catString in metadataService.Categories) // Iterate over each string entry in the list
                            {
                                if (string.IsNullOrWhiteSpace(catString)) continue;

                                if (catString.Contains(',')) // This specific string needs splitting
                                {
                                    anyCategoryStringWasSplit = true;
                                    var splitParts = catString.Split(',')
                                        .Select(s => s.Trim())
                                        .Select(s => s.Trim('*', ' '))
                                        .Select(s => s.Trim())      // Trim again after asterisk removal
                                        .Where(s => !string.IsNullOrWhiteSpace(s) &&
                                                    !(s.Contains(@"\") || s.Contains(@"/")) && // Filter out path-like strings (your clarification)
                                                    !Regex.IsMatch(s, @"^\d{4}$") &&
                                                    s.Length > 1)
                                        .ToList();
                                    newCategoriesList.AddRange(splitParts);
                                }
                                else // This string does not contain a comma, clean it individually
                                {
                                    string cleanedSingleCat = catString.Trim().Trim('*', ' ').Trim();
                                    if (!string.IsNullOrWhiteSpace(cleanedSingleCat) &&
                                        !(cleanedSingleCat.Contains(@"\") || cleanedSingleCat.Contains(@"/")) &&
                                        !Regex.IsMatch(cleanedSingleCat, @"^\d{4}$") &&
                                        cleanedSingleCat.Length > 1)
                                    {
                                        newCategoriesList.Add(cleanedSingleCat);
                                    }
                                    else if (anyCategoryStringWasSplit)
                                    {
                                        // If splitting happened elsewhere, and this was a "bad" token even before, it might indicate a change
                                    }
                                }
                            }

                            var distinctCleanedCategories = newCategoriesList
                                                            .Distinct(StringComparer.OrdinalIgnoreCase)
                                                            .OrderBy(c => c)
                                                            .ToList();

                            // Determine if a change actually occurred more reliably
                            var originalEffectiveCategories = metadataService.Categories
                               .SelectMany(c => c.Split(',')) // Split all original entries as if they were one big list
                               .Select(s => s.Trim().Trim('*', ' ').Trim())
                               .Where(s => !string.IsNullOrWhiteSpace(s) && !(s.Contains(@"\") || s.Contains(@"/")) && !Regex.IsMatch(s, @"^\d{4}$") && s.Length > 1)
                               .Distinct(StringComparer.OrdinalIgnoreCase)
                               .OrderBy(c => c)
                               .ToList();

                            if (!originalEffectiveCategories.SequenceEqual(distinctCleanedCategories, StringComparer.OrdinalIgnoreCase))
                            {
                                metadataService.Categories = distinctCleanedCategories;
                                changesMadeToLocalFile = true;
                                item.StatusMessage += "Categories split/cleaned. ";
                                System.Diagnostics.Debug.WriteLine($"    Categories changed. New: [{string.Join("] | [", metadataService.Categories)}]");
                            }
                        }

                        if (changesMadeToLocalFile)
                        {
                            metadataService.Save();
                            item.StatusMessage += "Local file updated. ";
                            System.Diagnostics.Debug.WriteLine($"    Local file saved for {item.FileName}");
                        }
                        else
                        {
                            item.StatusMessage = string.IsNullOrWhiteSpace(item.StatusMessage) ? "No applicable tidy-up changes to local file." : item.StatusMessage;
                        }

                        // 3. If Daminion Catalog mode, changes were made, and client is ready -> Update Daminion
                        if (IsDaminionCatalogMode && item.DaminionItemId.HasValue && changesMadeToLocalFile && _daminionClient != null && _daminionClient.IsAuthenticated)
                        {
                            item.StatusMessage += "Updating Daminion...";
                            UpdateOverallStatus($"Updating Daminion for: {item.FileName}");
                            System.Diagnostics.Debug.WriteLine($"    Attempting Daminion update for {item.FileName} (ID: {item.DaminionItemId.Value})");

                            var operations = new List<DaminionUpdateOperation>();
                            if (!string.IsNullOrWhiteSpace(metadataService.Description) && !string.IsNullOrWhiteSpace(_currentSettings.DaminionDescriptionTagGuid))
                                operations.Add(new DaminionUpdateOperation { Guid = _currentSettings.DaminionDescriptionTagGuid, Value = metadataService.Description, Id = 0, Remove = false });

                            if (metadataService.Categories != null && metadataService.Categories.Any() && !string.IsNullOrWhiteSpace(_currentSettings.DaminionCategoriesTagGuid))
                            {
                                // IMPORTANT: This ADDS categories. If you want to REPLACE all existing categories for this item in Daminion,
                                // you would first need an operation to REMOVE ALL existing categories for this tag from this item.
                                // The Daminion API doc doesn't explicitly show a "remove all by GUID" for an item.
                                // It shows remove by ID (of tag value) or by text value (if ID=0 for Remove=true).
                                // For now, this will APPEND the cleaned categories. This might lead to duplicates if the item is processed multiple times
                                // or if the original combined string is not also removed.
                                // We will address "removing the original combined tag value" later if this append behavior is not desired.
                                System.Diagnostics.Debug.WriteLine($"      Adding to Daminion Categories ({_currentSettings.DaminionCategoriesTagGuid}): [{string.Join(" | ", metadataService.Categories)}]");
                                foreach (var category in metadataService.Categories.Where(c => !string.IsNullOrWhiteSpace(c)))
                                    operations.Add(new DaminionUpdateOperation { Guid = _currentSettings.DaminionCategoriesTagGuid, Value = category, Id = 0, Remove = false });
                            }
                            // Add similar logic for Keywords if you implement keyword tidying

                            if (operations.Any())
                            {
                                var updateResult = await _daminionClient.UpdateItemMetadataAsync(new List<long> { item.DaminionItemId.Value }, operations);
                                if (updateResult != null && updateResult.Success)
                                {
                                    item.StatusMessage += "Daminion metadata updated.";
                                    System.Diagnostics.Debug.WriteLine($"      Daminion update successful for {item.FileName}.");
                                }
                                else
                                {
                                    item.StatusMessage += $"Daminion update failed: {updateResult?.Error ?? "Unknown"}.";
                                    item.Status = ProcessingStatus.Error;
                                    System.Diagnostics.Debug.WriteLine($"      Daminion update FAILED for {item.FileName}: {updateResult?.Error}");
                                }
                            }
                            else
                            {
                                item.StatusMessage += "No metadata operations to send to Daminion.";
                                System.Diagnostics.Debug.WriteLine($"      No operations to send to Daminion for {item.FileName}.");
                            }
                        }

                        item.StatusMessage = item.StatusMessage.Trim();
                        if (item.Status != ProcessingStatus.Error)
                        {
                            item.Status = ProcessingStatus.Processed;
                            if (string.IsNullOrWhiteSpace(item.StatusMessage) || item.StatusMessage == "Reading metadata.")
                                item.StatusMessage = changesMadeToLocalFile ? "Cleanup successful." : "No changes applied.";
                        }

                        if (item.Status == ProcessingStatus.Processed) processedCount++; else errorCount++;
                    }
                    catch (OperationCanceledException)
                    {
                        item.Status = ProcessingStatus.Cancelled; item.StatusMessage = "Cancelled during item processing.";
                        System.Diagnostics.Debug.WriteLine($"    Item {item.FileName} cancelled.");
                        throw;
                    }
                    catch (Exception ex)
                    {
                        item.Status = ProcessingStatus.Error;
                        item.StatusMessage = $"Error cleaning file {item.FileName}: {ex.Message}";
                        System.Diagnostics.Debug.WriteLine($"    Error cleaning {item.FileName}: {ex}");
                        errorCount++; // Increment here as it's an item-specific error
                    }
                } // End foreach
            }
            catch (OperationCanceledException)
            {
                UpdateOverallStatus("Metadata cleanup cancelled by user.");
                // Update status for any items that were processing but didn't get set to Cancelled
                foreach (var item in FilesToProcess.Where(i => i.Status == ProcessingStatus.Processing || i.Status == ProcessingStatus.Queued))
                {
                    item.Status = ProcessingStatus.Cancelled;
                    item.StatusMessage = "Queue cancelled.";
                }
            }
            catch (Exception ex)
            {
                UpdateOverallStatus($"An error occurred during metadata cleanup: {ex.Message}");
                System.Diagnostics.Debug.WriteLine($"Error in StartCleanupAsync loop: {ex}");
                foreach (var item in FilesToProcess.Where(i => i.Status == ProcessingStatus.Processing || i.Status == ProcessingStatus.Queued))
                {
                    item.Status = ProcessingStatus.Error;
                    item.StatusMessage = "Queue processing error.";
                }
            }
            finally
            {
                IsCleaningQueue = false;
                _cleanupCts?.Dispose();
                _cleanupCts = null;

                processedCount = FilesToProcess.Count(i => i.Status == ProcessingStatus.Processed);
                errorCount = FilesToProcess.Count(i => i.Status == ProcessingStatus.Error);
                int cancelledCount = FilesToProcess.Count(i => i.Status == ProcessingStatus.Cancelled);
                CurrentOperationStatus = $"Cleanup finished. Processed: {processedCount}, Errors: {errorCount}, Cancelled: {cancelledCount}.";
                System.Diagnostics.Debug.WriteLine(CurrentOperationStatus);
            }
        }

        private void UpdateOverallStatus(string message)
        {
            Application.Current.Dispatcher.Invoke(() => CurrentOperationStatus = message);
        }

        private bool CanStopCleanup() => IsCleaningQueue;
        private void StopCleanup()
        {
            _cleanupCts?.Cancel();
            CurrentOperationStatus = "Cleanup stop requested.";
        }

        public event PropertyChangedEventHandler? PropertyChanged;
        protected virtual bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string propertyName = "")
        {
            if (EqualityComparer<T>.Default.Equals(storage, value)) return false;
            storage = value;
            OnPropertyChanged(propertyName);
            return true;
        }
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            });
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\ViewModels\SettingsViewModel.cs">
<![CDATA[
// DaminionOllamaApp/ViewModels/SettingsViewModel.cs
using DaminionOllamaApp.Models;
using DaminionOllamaApp.Services;
using DaminionOllamaApp.Utils;
using DaminionOllamaInteractionLib;
using DaminionOllamaInteractionLib.Daminion;
using DaminionOllamaInteractionLib.Ollama;
using DaminionOllamaInteractionLib.OpenRouter;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace DaminionOllamaApp.ViewModels
{
    public class SettingsViewModel : INotifyPropertyChanged
    {
        private AppSettings _settings;

        // --- Ollama Settings ---
        private string _ollamaConnectionStatus = "Ollama connection not verified.";
        private bool _isVerifyingOllamaConnection;
        private bool _isFetchingOllamaModels;
        private ObservableCollection<string> _ollamaModels;

        // --- OpenRouter Settings ---
        private string _openRouterConnectionStatus = "OpenRouter connection not verified.";
        private bool _isVerifyingOpenRouterConnection;
        private bool _isFetchingOpenRouterModels;
        private ObservableCollection<string> _openRouterModels;

        // --- Daminion Settings ---
        private bool _isDiscoveringGuids;
        private string _discoveryStatusMessage = string.Empty;
        private string _daminionConnectionTestStatus = "Daminion connection not verified.";
        private bool _isVerifyingDaminionConnectionTest;

        public AppSettings Settings
        {
            get => _settings;
            set { SetProperty(ref _settings, value); }
        }

        // --- Ollama Properties ---
        public string OllamaConnectionStatus
        {
            get => _ollamaConnectionStatus;
            private set { SetProperty(ref _ollamaConnectionStatus, value); }
        }

        public bool IsVerifyingOllamaConnection
        {
            get => _isVerifyingOllamaConnection;
            private set
            {
                if (SetProperty(ref _isVerifyingOllamaConnection, value))
                {
                    Application.Current.Dispatcher.Invoke(() =>
                        (VerifyOllamaConnectionCommand as RelayCommand)?.RaiseCanExecuteChanged());
                }
            }
        }

        public bool IsFetchingOllamaModels
        {
            get => _isFetchingOllamaModels;
            private set { SetProperty(ref _isFetchingOllamaModels, value); }
        }

        public ObservableCollection<string> OllamaModels
        {
            get => _ollamaModels;
            private set { SetProperty(ref _ollamaModels, value); }
        }

        public string? SelectedOllamaModelName
        {
            get => Settings?.OllamaModelName;
            set
            {
                if (Settings != null && Settings.OllamaModelName != value)
                {
                    Settings.OllamaModelName = value ?? string.Empty;
                    OnPropertyChanged(nameof(SelectedOllamaModelName));
                }
            }
        }

        // --- OpenRouter Properties ---
        public string OpenRouterConnectionStatus
        {
            get => _openRouterConnectionStatus;
            private set { SetProperty(ref _openRouterConnectionStatus, value); }
        }

        public bool IsVerifyingOpenRouterConnection
        {
            get => _isVerifyingOpenRouterConnection;
            private set
            {
                if (SetProperty(ref _isVerifyingOpenRouterConnection, value))
                {
                    Application.Current.Dispatcher.Invoke(() =>
                        (VerifyOpenRouterConnectionCommand as RelayCommand)?.RaiseCanExecuteChanged());
                }
            }
        }

        public bool IsFetchingOpenRouterModels
        {
            get => _isFetchingOpenRouterModels;
            private set { SetProperty(ref _isFetchingOpenRouterModels, value); }
        }

        public ObservableCollection<string> OpenRouterModels
        {
            get => _openRouterModels;
            private set { SetProperty(ref _openRouterModels, value); }
        }

        public string? SelectedOpenRouterModelName
        {
            get => Settings?.OpenRouterModelName;
            set
            {
                if (Settings != null && Settings.OpenRouterModelName != value)
                {
                    Settings.OpenRouterModelName = value ?? string.Empty;
                    OnPropertyChanged(nameof(SelectedOpenRouterModelName));
                }
            }
        }

        // Daminion GUID Discovery Properties
        public bool IsDiscoveringGuids
        {
            get => _isDiscoveringGuids;
            private set
            {
                if (SetProperty(ref _isDiscoveringGuids, value))
                {
                    Application.Current.Dispatcher.Invoke(() =>
                        (DiscoverTagGuidsCommand as RelayCommand)?.RaiseCanExecuteChanged());
                }
            }
        }

        public string DiscoveryStatusMessage
        {
            get => _discoveryStatusMessage;
            private set { SetProperty(ref _discoveryStatusMessage, value); }
        }

        // Daminion Connection Test Properties
        public string DaminionConnectionTestStatus
        {
            get => _daminionConnectionTestStatus;
            private set { SetProperty(ref _daminionConnectionTestStatus, value); }
        }

        public bool IsVerifyingDaminionConnectionTest
        {
            get => _isVerifyingDaminionConnectionTest;
            private set
            {
                if (SetProperty(ref _isVerifyingDaminionConnectionTest, value))
                {
                    Application.Current.Dispatcher.Invoke(() =>
                        (TestDaminionConnectionCommand as RelayCommand)?.RaiseCanExecuteChanged());
                }
            }
        }

        // --- Commands ---
        public ICommand SaveCommand { get; }
        public ICommand CloseCommand { get; }
        public ICommand DiscoverTagGuidsCommand { get; }
        public ICommand VerifyOllamaConnectionCommand { get; }
        public ICommand TestDaminionConnectionCommand { get; }
        public ICommand VerifyOpenRouterConnectionCommand { get; }

        // Actions for View Interaction
        public Action? CloseAction { get; set; }
        public Action<string>? UpdatePasswordBoxAction { get; set; }

        public SettingsViewModel(AppSettings settings)
        {
            _settings = settings;

            _ollamaModels = new ObservableCollection<string>();
            _openRouterModels = new ObservableCollection<string>();

            // The Save command simply invokes the CloseAction, which also handles saving in MainViewModel.
            SaveCommand = new RelayCommand(param => CloseAction?.Invoke());
            CloseCommand = new RelayCommand(param => CloseAction?.Invoke());

            DiscoverTagGuidsCommand = new RelayCommand(async param => await DiscoverTagGuidsAsync(), param => CanDiscoverTagGuids());
            VerifyOllamaConnectionCommand = new RelayCommand(async param => await VerifyAndFetchOllamaModelsAsync(), param => CanVerifyOllamaConnection());
            TestDaminionConnectionCommand = new RelayCommand(async param => await TestDaminionConnectionAsync(), param => CanTestDaminionConnection());
            VerifyOpenRouterConnectionCommand = new RelayCommand(async param => await VerifyAndFetchOpenRouterModelsAsync(), param => CanVerifyOpenRouterConnection());
        }

        public void SetDaminionPassword(string password)
        {
            if (Settings != null)
            {
                Settings.DaminionPassword = password;
                Application.Current.Dispatcher.Invoke(() => {
                    (DiscoverTagGuidsCommand as RelayCommand)?.RaiseCanExecuteChanged();
                    (TestDaminionConnectionCommand as RelayCommand)?.RaiseCanExecuteChanged();
                });
            }
        }

        private bool CanDiscoverTagGuids()
        {
            return !IsDiscoveringGuids && Settings != null &&
                   !string.IsNullOrWhiteSpace(Settings.DaminionServerUrl) &&
                   !string.IsNullOrWhiteSpace(Settings.DaminionUsername) &&
                   !string.IsNullOrWhiteSpace(Settings.DaminionPassword);
        }

        private async Task DiscoverTagGuidsAsync()
        {
            if (!CanDiscoverTagGuids()) return;

            IsDiscoveringGuids = true;
            DiscoveryStatusMessage = "Connecting to Daminion to discover GUIDs...";

            using (var tempDaminionClient = new DaminionApiClient())
            {
                try
                {
                    bool loginSuccess = await tempDaminionClient.LoginAsync(Settings.DaminionServerUrl, Settings.DaminionUsername, Settings.DaminionPassword);
                    if (loginSuccess)
                    {
                        DiscoveryStatusMessage = "Login successful. Fetching all tags...";
                        DaminionGetTagsResponse? tagsResponse = await tempDaminionClient.GetTagsAsync();
                        if (tagsResponse != null && tagsResponse.Success && tagsResponse.Data != null)
                        {
                            var tags = tagsResponse.Data;
                            int foundCount = 0;
                            List<string> notFoundNames = new List<string>();

                            var descTag = tags.FirstOrDefault(t => t.Name.Equals("Description", StringComparison.OrdinalIgnoreCase) || t.Name.Equals("Caption", StringComparison.OrdinalIgnoreCase) || t.Name.Equals("Image Description", StringComparison.OrdinalIgnoreCase));
                            if (descTag != null) { Settings.DaminionDescriptionTagGuid = descTag.Guid; foundCount++; } else { notFoundNames.Add("Description/Caption"); }

                            var keywordsTag = tags.FirstOrDefault(t => t.Name.Equals("Keywords", StringComparison.OrdinalIgnoreCase));
                            if (keywordsTag != null) { Settings.DaminionKeywordsTagGuid = keywordsTag.Guid; foundCount++; } else { notFoundNames.Add("Keywords"); }

                            var categoriesTag = tags.FirstOrDefault(t => t.Name.Equals("Categories", StringComparison.OrdinalIgnoreCase));
                            if (categoriesTag != null) { Settings.DaminionCategoriesTagGuid = categoriesTag.Guid; foundCount++; } else { notFoundNames.Add("Categories"); }

                            var flagTag = tags.FirstOrDefault(t => t.Name.Equals("Flag", StringComparison.OrdinalIgnoreCase));
                            if (flagTag != null) { Settings.DaminionFlagTagGuid = flagTag.Guid; foundCount++; } else { notFoundNames.Add("Flag"); }

                            string report = $"Discovered {foundCount} GUID(s).";
                            if (notFoundNames.Any()) report += $" Could not find: {string.Join(", ", notFoundNames)}.";
                            DiscoveryStatusMessage = report + " Review and Save.";
                        }
                        else
                        {
                            DiscoveryStatusMessage = $"Failed to fetch tags: {tagsResponse?.Error ?? "Unknown error"}.";
                        }
                    }
                    else
                    {
                        DiscoveryStatusMessage = "Login failed for discovery. Check credentials/URL.";
                    }
                }
                catch (Exception ex)
                {
                    DiscoveryStatusMessage = $"Error during GUID discovery: {ex.Message}";
                    System.Diagnostics.Debug.WriteLine($"GUID Discovery Exception: {ex}");
                }
                finally
                {
                    IsDiscoveringGuids = false;
                }
            }
        }

        private bool CanVerifyOpenRouterConnection()
        {
            return !IsVerifyingOpenRouterConnection && Settings != null && !string.IsNullOrWhiteSpace(Settings.OpenRouterApiKey);
        }

        private async Task VerifyAndFetchOpenRouterModelsAsync()
        {
            if (!CanVerifyOpenRouterConnection() || Settings == null) return;

            IsVerifyingOpenRouterConnection = true;
            IsFetchingOpenRouterModels = true;
            OpenRouterConnectionStatus = "Verifying OpenRouter connection...";
            Application.Current.Dispatcher.Invoke(() => OpenRouterModels.Clear());

            try
            {
                using (var client = new OpenRouterApiClient(Settings.OpenRouterApiKey, Settings.OpenRouterHttpReferer))
                {
                    var modelsResponse = await client.ListModelsAsync();
                    if (modelsResponse?.Data != null)
                    {
                        var multimodalModels = modelsResponse.Data
                            .Where(m => m.Id != null && (m.Id.Contains("vision") || m.Id.Contains("claude-3")))
                            .OrderBy(m => m.Name)
                            .ToList();

                        foreach (var model in multimodalModels)
                        {
                            OpenRouterModels.Add(model.Id!);
                        }
                        OpenRouterConnectionStatus = $"{OpenRouterModels.Count} multimodal models found.";

                        if (!string.IsNullOrWhiteSpace(Settings.OpenRouterModelName) && OpenRouterModels.Contains(Settings.OpenRouterModelName))
                        {
                            SelectedOpenRouterModelName = Settings.OpenRouterModelName;
                        }
                        else if (OpenRouterModels.Any())
                        {
                            SelectedOpenRouterModelName = OpenRouterModels.FirstOrDefault();
                        }
                    }
                    else
                    {
                        OpenRouterConnectionStatus = "Failed to fetch models from OpenRouter. Check API Key.";
                    }
                }
            }
            catch (Exception ex)
            {
                OpenRouterConnectionStatus = $"Error: {ex.Message}";
                System.Diagnostics.Debug.WriteLine($"OpenRouter Verification Exception: {ex}");
            }
            finally
            {
                IsFetchingOpenRouterModels = false;
                IsVerifyingOpenRouterConnection = false;
            }
        }

        private bool CanVerifyOllamaConnection()
        {
            return !IsVerifyingOllamaConnection && Settings != null && !string.IsNullOrWhiteSpace(Settings.OllamaServerUrl);
        }

        private async Task VerifyAndFetchOllamaModelsAsync()
        {
            if (!CanVerifyOllamaConnection() || Settings == null) return;

            IsVerifyingOllamaConnection = true;
            IsFetchingOllamaModels = false;
            OllamaConnectionStatus = $"Verifying Ollama connection to {Settings.OllamaServerUrl}...";

            Application.Current.Dispatcher.Invoke(() => OllamaModels.Clear());

            try
            {
                using (var tempOllamaClient = new OllamaApiClient(Settings.OllamaServerUrl))
                {
                    bool connected = await tempOllamaClient.CheckConnectionAsync();
                    if (connected)
                    {
                        OllamaConnectionStatus = "Ollama server connected. Fetching models...";
                        IsFetchingOllamaModels = true;
                        OllamaListTagsResponse? modelsResponse = await tempOllamaClient.ListLocalModelsAsync();
                        if (modelsResponse != null && modelsResponse.Models != null)
                        {
                            foreach (var modelInfo in modelsResponse.Models.OrderBy(m => m.Name))
                            {
                                OllamaModels.Add(modelInfo.Name);
                            }
                            OllamaConnectionStatus = $"{OllamaModels.Count} Ollama models found.";

                            if (!string.IsNullOrWhiteSpace(Settings.OllamaModelName) && OllamaModels.Contains(Settings.OllamaModelName))
                            {
                                SelectedOllamaModelName = Settings.OllamaModelName;
                            }
                            else if (OllamaModels.Any())
                            {
                                SelectedOllamaModelName = OllamaModels.FirstOrDefault();
                            }
                        }
                        else
                        {
                            OllamaConnectionStatus = "Connected, but failed to fetch models or no models found.";
                        }
                        IsFetchingOllamaModels = false;
                    }
                    else
                    {
                        OllamaConnectionStatus = "Failed to connect to Ollama server. Check URL and ensure server is running.";
                    }
                }
            }
            catch (ArgumentException ex)
            {
                OllamaConnectionStatus = $"Error: Invalid Ollama Server URL - {ex.Message}";
            }
            catch (Exception ex)
            {
                OllamaConnectionStatus = $"Error interacting with Ollama: {ex.Message}";
                System.Diagnostics.Debug.WriteLine($"Ollama Interaction Exception: {ex}");
            }
            finally
            {
                IsVerifyingOllamaConnection = false;
                IsFetchingOllamaModels = false;
            }
        }

        private bool CanTestDaminionConnection()
        {
            return !IsVerifyingDaminionConnectionTest && Settings != null &&
                   !string.IsNullOrWhiteSpace(Settings.DaminionServerUrl) &&
                   !string.IsNullOrWhiteSpace(Settings.DaminionUsername) &&
                   !string.IsNullOrWhiteSpace(Settings.DaminionPassword);
        }

        private async Task TestDaminionConnectionAsync()
        {
            if (!CanTestDaminionConnection() || Settings == null) return;

            IsVerifyingDaminionConnectionTest = true;
            DaminionConnectionTestStatus = $"Testing Daminion connection to {Settings.DaminionServerUrl}...";

            using (var testDaminionClient = new DaminionApiClient())
            {
                try
                {
                    bool loginSuccess = await testDaminionClient.LoginAsync(Settings.DaminionServerUrl, Settings.DaminionUsername, Settings.DaminionPassword);
                    DaminionConnectionTestStatus = loginSuccess ? "Daminion connection successful!" : "Daminion login failed. Check credentials/URL. See Output window for DaminionApiClient logs.";
                }
                catch (Exception ex)
                {
                    DaminionConnectionTestStatus = $"Daminion connection error: {ex.Message}";
                    System.Diagnostics.Debug.WriteLine($"Daminion Connection Test Exception: {ex}");
                }
                finally
                {
                    IsVerifyingDaminionConnectionTest = false;
                }
            }
        }

        public event PropertyChangedEventHandler? PropertyChanged;
        protected virtual bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string propertyName = "")
        {
            if (EqualityComparer<T>.Default.Equals(storage, value)) return false;
            storage = value;
            OnPropertyChanged(propertyName);
            return true;
        }
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            });
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Views\SettingsWindow.xaml">
<![CDATA[
<Window x:Class="DaminionOllamaApp.Views.SettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DaminionOllamaApp.Views" 
        xmlns:viewModels="clr-namespace:DaminionOllamaApp.ViewModels"
        xmlns:converters="clr-namespace:DaminionOllamaApp.Converters"
        mc:Ignorable="d"
        Title="Settings" Width="650" Height="Auto"
        SizeToContent="Height"
        WindowStartupLocation="CenterOwner" ResizeMode="NoResize"
        MaxHeight="850">
    <Window.DataContext>
        <viewModels:SettingsViewModel />
    </Window.DataContext>
    <Window.Resources>
        <converters:CountToBooleanConverter x:Key="CountToBoolConverter" />
    </Window.Resources>
    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
        <Grid Margin="10">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <GroupBox Header="Daminion API Settings" Grid.Row="0" Margin="0,0,0,5" Padding="5">
                <StackPanel>
                    <Label Content="Daminion Server URL:" Padding="0,0,0,1"/>
                    <TextBox Text="{Binding Settings.DaminionServerUrl, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,3" />
                    <Label Content="Username:" Padding="0,0,0,1"/>
                    <TextBox Text="{Binding Settings.DaminionUsername, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,3" />
                    <Label Content="Password:" Padding="0,0,0,1"/>
                    <PasswordBox x:Name="DaminionPasswordBox" PasswordChanged="DaminionPasswordBox_PasswordChanged" Margin="0,0,0,3" />
                    <Button Content="Test Daminion Connection" 
                            Command="{Binding TestDaminionConnectionCommand}" 
                            HorizontalAlignment="Left" 
                            Margin="0,8,0,0" Padding="5,2"/>
                    <TextBlock Text="{Binding DaminionConnectionTestStatus}" Margin="0,3,0,3" TextWrapping="Wrap" Foreground="Gray" MinHeight="16"/>
                </StackPanel>
            </GroupBox>

            <GroupBox Header="Ollama API Settings" Grid.Row="1" Margin="0,5,0,5" Padding="5">
                <StackPanel>
                    <Label Content="Ollama Server URL:" Padding="0,0,0,1"/>
                    <Grid Margin="0,0,0,3">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBox Grid.Column="0" Text="{Binding Settings.OllamaServerUrl, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,5,0" VerticalAlignment="Center"/>
                        <Button Grid.Column="1" Content="Verify &amp; Load Models" 
                                Command="{Binding VerifyOllamaConnectionCommand}" 
                                MinWidth="140" Padding="5,2"/>
                    </Grid>
                    <TextBlock Text="{Binding OllamaConnectionStatus}" Margin="0,3,0,3" TextWrapping="Wrap" Foreground="Gray" MinHeight="16"/>

                    <Label Content="Select Ollama Model:" Margin="0,8,0,0" Padding="0,0,0,1"/>
                    <ComboBox ItemsSource="{Binding OllamaModels}" 
                              SelectedItem="{Binding SelectedOllamaModelName}"
                              IsEnabled="{Binding OllamaModels.Count, Converter={StaticResource CountToBoolConverter}}" 
                              Margin="0,0,0,3">
                        <ComboBox.Style>
                            <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="ToolTip" Value="Verify connection to load models, or no models found."/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>
                </StackPanel>
            </GroupBox>

            <GroupBox Header="OpenRouter API Settings" Grid.Row="2" Margin="0,5,0,5" Padding="5">
                <StackPanel>
                    <Label Content="OpenRouter API Key:" Padding="0,0,0,1"/>
                    <TextBox Text="{Binding Settings.OpenRouterApiKey, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,3" />

                    <Label Content="Your Site URL / App Name (HTTP-Referer):" Padding="0,0,0,1" Margin="0,5,0,0"/>
                    <TextBox Text="{Binding Settings.OpenRouterHttpReferer, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,3" />

                    <Button Content="Verify &amp; Load Models" 
                            Command="{Binding VerifyOpenRouterConnectionCommand}" 
                            HorizontalAlignment="Left" 
                            MinWidth="140" Padding="5,2" Margin="0,8,0,0"/>

                    <TextBlock Text="{Binding OpenRouterConnectionStatus}" Margin="0,3,0,3" TextWrapping="Wrap" Foreground="Gray" MinHeight="16"/>

                    <Label Content="Select OpenRouter Model:" Margin="0,8,0,0" Padding="0,0,0,1"/>
                    <ComboBox ItemsSource="{Binding OpenRouterModels}" 
                              SelectedItem="{Binding SelectedOpenRouterModelName}"
                              IsEnabled="{Binding OpenRouterModels.Count, Converter={StaticResource CountToBoolConverter}}">
                        <ComboBox.Style>
                            <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="ToolTip" Value="Verify connection to load models, or no models found."/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>
                </StackPanel>
            </GroupBox>

            <GroupBox Header="Ollama Prompt" Grid.Row="3" Margin="0,5,0,5" Padding="5">
                <TextBox Text="{Binding Settings.OllamaPrompt, UpdateSourceTrigger=PropertyChanged}"
                         AcceptsReturn="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"
                         MinHeight="70" MaxHeight="120" FontFamily="Consolas"/>
            </GroupBox>

            <GroupBox Header="Daminion Target Tag GUIDs" Grid.Row="4" Margin="0,5,0,5" Padding="5">
                <StackPanel>
                    <Button Content="Discover Standard GUIDs" 
                            Command="{Binding DiscoverTagGuidsCommand}" 
                            HorizontalAlignment="Left" 
                            Margin="0,0,0,3" Padding="5,2"/>
                    <TextBlock Text="{Binding DiscoveryStatusMessage}" Foreground="DimGray" TextWrapping="Wrap" Margin="0,0,0,8" MinHeight="20" VerticalAlignment="Top"/>

                    <Label Content="Description Tag GUID:" Padding="0,0,0,1"/>
                    <TextBox Text="{Binding Settings.DaminionDescriptionTagGuid, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,3" FontFamily="Consolas"/>
                    <Label Content="Keywords Tag GUID:" Padding="0,0,0,1"/>
                    <TextBox Text="{Binding Settings.DaminionKeywordsTagGuid, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,3" FontFamily="Consolas"/>
                    <Label Content="Categories Tag GUID:" Padding="0,0,0,1"/>
                    <TextBox Text="{Binding Settings.DaminionCategoriesTagGuid, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,3" FontFamily="Consolas"/>
                    <Label Content="Flag Tag GUID (Optional):" Padding="0,0,0,1"/>
                    <TextBox Text="{Binding Settings.DaminionFlagTagGuid, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,3" FontFamily="Consolas"/>
                </StackPanel>
            </GroupBox>

            <GroupBox Header="Post-Ollama Processing Daminion Flag Options" Grid.Row="5" Margin="0,5,0,5" Padding="5">
                <StackPanel>
                    <CheckBox Content="Automatically update Daminion flag after successful Ollama processing"
                              IsChecked="{Binding Settings.AutomaticallyUpdateFlagAfterOllama}" Margin="0,0,0,5"/>
                    <Grid IsEnabled="{Binding Settings.AutomaticallyUpdateFlagAfterOllama}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <Label Grid.Row="0" Grid.Column="0" Content="Flag Value ID to Clear (e.g., 'Unflagged' ID):" VerticalAlignment="Center" Margin="20,0,5,0"/>
                        <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding Settings.FlagValueIdToClearAfterOllama, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,3" FontFamily="Consolas"/>

                        <Label Grid.Row="1" Grid.Column="0" Content="Flag Value ID to Set (e.g., 'Processed' ID):" VerticalAlignment="Center" Margin="20,0,5,0"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Settings.FlagValueIdToSetAfterOllama, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,3" FontFamily="Consolas"/>
                    </Grid>
                    <TextBlock Text="Note: 'Flag Tag GUID' must be set in 'Daminion Target Tag GUIDs' section for this to work." FontStyle="Italic" FontSize="10" Margin="20,5,0,0" TextWrapping="Wrap"/>
                </StackPanel>
            </GroupBox>

            <StackPanel Orientation="Horizontal" Grid.Row="6" HorizontalAlignment="Right" Margin="0,10,0,0">
                <Button Content="Save" Command="{Binding SaveCommand}" Width="75" Margin="0,0,10,0" IsDefault="True" />
                <Button Content="Close" Command="{Binding CloseCommand}" Width="75" IsCancel="True" />
            </StackPanel>
        </Grid>
    </ScrollViewer>
</Window>
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\Views\SettingsWindow.xaml.cs">
<![CDATA[
// DaminionOllamaApp/Views/SettingsWindow.xaml.cs
using DaminionOllamaApp.ViewModels;
using System.Windows;
using System.Windows.Controls; // Required for PasswordBox

namespace DaminionOllamaApp.Views
{
    public partial class SettingsWindow : Window
    {
        public SettingsWindow()
        {
            InitializeComponent();
        }

        // This event handler updates the ViewModel's password property when the PasswordBox changes.
        private void DaminionPasswordBox_PasswordChanged(object sender, RoutedEventArgs e)
        {
            if (DataContext is SettingsViewModel viewModel && sender is PasswordBox passwordBox)
            {
                viewModel.SetDaminionPassword(passwordBox.Password);
            }
        }

        // This method can be called by the ViewModel (or the code that shows the window)
        // to set the initial value of the PasswordBox when settings are loaded.
        public void SetPasswordBox(string password)
        {
            DaminionPasswordBox.Password = password;
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\App.xaml">
<![CDATA[
<Application x:Class="DaminionOllamaApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:DaminionOllamaApp"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\App.xaml.cs">
<![CDATA[
using System.Configuration;
using System.Data;
using System.Windows;

namespace DaminionOllamaApp
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
    }

}

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\AssemblyInfo.cs">
<![CDATA[
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\DaminionOllamaApp.csproj">
<![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows10.0.26100.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
    <ApplicationIcon>Daminion-Llama.ico</ApplicationIcon>
    <UseWindowsForms>False</UseWindowsForms>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="Daminion-Llama.ico" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\DaminionOllamaInteractionLib\DaminionOllamaInteractionLib.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Text.Json" Version="9.0.5" />
  </ItemGroup>

</Project>

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\MainWindow.xaml">
<![CDATA[
<Window x:Class="DaminionOllamaApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DaminionOllamaApp"
        xmlns:viewModels="clr-namespace:DaminionOllamaApp.ViewModels"
        xmlns:models="clr-namespace:DaminionOllamaApp.Models"
        xmlns:converters="clr-namespace:DaminionOllamaApp.Converters"
        mc:Ignorable="d"
        Title="Daminion Llama Processor" Height="600" Width="900">
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

        <converters:EnumToBooleanConverter x:Key="EnumToBooleanConverter"/>

    </Window.Resources>
    <Window.DataContext>
        <viewModels:MainViewModel/>
    </Window.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Menu Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="_Settings" Command="{Binding OpenSettingsCommand}" />
                <Separator />
                <MenuItem Header="E_xit" Command="{Binding ExitCommand}" />
            </MenuItem>
        </Menu>

        <TabControl Grid.Row="1" Margin="5">
            <TabItem Header="Local File Tagger">
                <Grid Margin="5" DataContext="{Binding LocalFileTaggerVM}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <GroupBox Grid.Row="0" Header="AI Provider" Padding="5" Margin="0,0,0,10">
                        <StackPanel Orientation="Horizontal">
                            <RadioButton GroupName="LocalProvider" Content="Ollama" Margin="0,0,20,0"
                                         IsChecked="{Binding Settings.SelectedAiProvider, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static models:AiProvider.Ollama}}"/>
                            <RadioButton GroupName="LocalProvider" Content="OpenRouter"
                                         IsChecked="{Binding Settings.SelectedAiProvider, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static models:AiProvider.OpenRouter}}"/>
                        </StackPanel>
                    </GroupBox>

                    <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,5,0,10">
                        <Button Content="Add Files..." Command="{Binding AddFilesCommand}" Width="100" Margin="0,0,5,0" />
                        <Button Content="Start Queue" Command="{Binding StartQueueCommand}" Width="100" Margin="0,0,5,0" />
                        <Button Content="Stop Queue" Command="{Binding StopQueueCommand}" Width="100" Margin="0,0,15,0" />
                        <Button Content="Remove Selected" Command="{Binding RemoveSelectedFileCommand}" Width="120" Margin="0,0,5,0" />
                        <Button Content="Clear Processed" Command="{Binding ClearProcessedFilesCommand}" Width="110" Margin="0,0,5,0" />
                        <Button Content="Clear All" Command="{Binding ClearAllFilesCommand}" Width="80" />
                    </StackPanel>

                    <ListView Grid.Row="2" ItemsSource="{Binding FilesToProcess}" SelectionMode="Single"
                              SelectedItem="{Binding SelectedFile}">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="File Name" Width="300" DisplayMemberBinding="{Binding FileName}" />
                                <GridViewColumn Header="Status" Width="150" DisplayMemberBinding="{Binding Status}" />
                                <GridViewColumn Header="Details" Width="300" DisplayMemberBinding="{Binding StatusMessage}" />
                            </GridView>
                        </ListView.View>
                    </ListView>

                    <TextBox Grid.Row="3" Text="{Binding CurrentOperationStatus}"
                             IsReadOnly="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"
                             MinHeight="60" MaxHeight="150" Margin="0,10,0,0" />
                </Grid>
            </TabItem>

            <TabItem Header="Daminion Query Tagger">
                <Grid Margin="5" DataContext="{Binding DaminionCollectionTaggerVM}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <GroupBox Grid.Row="0" Header="AI Provider" Padding="5" Margin="0,0,0,10">
                        <StackPanel Orientation="Horizontal">
                            <RadioButton GroupName="DaminionProvider" Content="Ollama" Margin="0,0,20,0"
                                         IsChecked="{Binding Settings.SelectedAiProvider, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static models:AiProvider.Ollama}}"/>
                            <RadioButton GroupName="DaminionProvider" Content="OpenRouter"
                                         IsChecked="{Binding Settings.SelectedAiProvider, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static models:AiProvider.OpenRouter}}"/>
                        </StackPanel>
                    </GroupBox>

                    <StackPanel Grid.Row="1" Orientation="Vertical" Margin="0,0,0,10">
                        <StackPanel Orientation="Horizontal">
                            <Button Content="Login to Daminion" Command="{Binding LoginCommand}" Width="150" Margin="0,0,10,0" />
                            <TextBlock Text="{Binding DaminionStatus}" VerticalAlignment="Center" Margin="10,0,0,0" TextWrapping="Wrap" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                            <Label Content="Select Query Type:" VerticalAlignment="Center" IsEnabled="{Binding IsLoggedIn}" />
                            <ComboBox ItemsSource="{Binding QueryTypes}"
                                      SelectedItem="{Binding SelectedQueryType}"
                                      DisplayMemberPath="DisplayName" 
                                      MinWidth="200" Margin="5,0,10,0"
                                      IsEnabled="{Binding IsLoggedIn}" />
                            <Button Content="Load Daminion Items" Command="{Binding LoadItemsByQueryCommand}" Width="150" IsEnabled="{Binding IsLoggedIn}"/>
                        </StackPanel>
                    </StackPanel>

                    <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0,5,0,10">
                        <Button Content="Start Daminion Queue" Command="{Binding StartDaminionQueueCommand}" Width="160" Margin="0,0,5,0" />
                        <Button Content="Stop Daminion Queue" Command="{Binding StopDaminionQueueCommand}" Width="160" />
                    </StackPanel>

                    <ListView Grid.Row="3" ItemsSource="{Binding DaminionFilesToProcess}" SelectionMode="Single">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="Daminion ID" Width="100" DisplayMemberBinding="{Binding DaminionItemId}" />
                                <GridViewColumn Header="Item Name" Width="250" DisplayMemberBinding="{Binding FileName}" />
                                <GridViewColumn Header="File Path" Width="250" DisplayMemberBinding="{Binding FilePath}" />
                                <GridViewColumn Header="Status" Width="120" DisplayMemberBinding="{Binding Status}" />
                                <GridViewColumn Header="Details" Width="200" DisplayMemberBinding="{Binding StatusMessage}" />
                            </GridView>
                        </ListView.View>
                    </ListView>

                    <TextBox Grid.Row="4" Text="{Binding DaminionStatus}"
                             IsReadOnly="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"
                             MinHeight="40" MaxHeight="100" Margin="0,10,0,0" />
                </Grid>
            </TabItem>

            <TabItem Header="Metadata Tidy-up">
                <Grid Margin="5" DataContext="{Binding MetadataTidyUpVM}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,10">
                        <Label Content="Processing Mode:" VerticalAlignment="Center"/>
                        <RadioButton Content="Local Files" GroupName="TidyUpMode" Margin="5,0,0,0"
                                     IsChecked="{Binding IsLocalFilesMode, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center"/>
                        <RadioButton Content="Daminion Catalog" GroupName="TidyUpMode" Margin="10,0,0,0"
                                     IsChecked="{Binding IsDaminionCatalogMode, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center"/>
                    </StackPanel>

                    <Border Grid.Row="1" BorderBrush="LightGray" BorderThickness="0,0,0,1" Margin="0,0,0,5" Padding="0,0,0,5"
                            Visibility="{Binding IsDaminionCatalogMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <StackPanel Orientation="Vertical">
                            <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                <Button Content="Login to Daminion" Command="{Binding DaminionLoginCommand}" Width="150" Margin="0,0,10,0" />
                                <TextBlock Text="{Binding DaminionLoginStatus}" VerticalAlignment="Center" TextWrapping="Wrap" />
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="0,5,0,0" IsEnabled="{Binding IsDaminionLoggedIn}">
                                <Label Content="Select Daminion Query:" VerticalAlignment="Center"/>
                                <ComboBox ItemsSource="{Binding DaminionQueryTypes}"
                                          SelectedItem="{Binding SelectedDaminionQueryType}"
                                          DisplayMemberPath="DisplayName" 
                                          MinWidth="200" Margin="5,0,10,0" />
                                <Button Content="Load Daminion Items" Command="{Binding LoadDaminionItemsCommand}" Width="150"/>
                            </StackPanel>
                        </StackPanel>
                    </Border>

                    <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0,0,0,5"
                                Visibility="{Binding IsLocalFilesMode, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Button Content="Add Local Files..." Command="{Binding AddFilesCommand}" Width="130"/>
                    </StackPanel>

                    <GroupBox Header="Cleanup Options" Grid.Row="3" Margin="0,5,0,10" Padding="5">
                        <StackPanel>
                            <CheckBox Content="Split comma-separated categories into individual items" 
                                      IsChecked="{Binding SplitCategories}" Margin="0,0,0,3"/>
                            <CheckBox Content="Trim standard prefix from descriptions" 
                                      IsChecked="{Binding TrimDescriptionPrefix}" Margin="0,0,0,3"/>
                            <StackPanel Orientation="Horizontal" IsEnabled="{Binding TrimDescriptionPrefix}">
                                <Label Content="Prefix to trim:" VerticalAlignment="Center" Margin="20,0,5,0"/>
                                <TextBox Text="{Binding DescriptionPrefixToTrim}" MinWidth="300" MaxWidth="450" VerticalAlignment="Center"/>
                            </StackPanel>
                        </StackPanel>
                    </GroupBox>

                    <StackPanel Grid.Row="4" Orientation="Horizontal" Margin="0,5,0,10">
                        <Button Content="Start Cleanup" Command="{Binding StartCleanupCommand}" Width="120" Margin="0,0,5,0" />
                        <Button Content="Stop Cleanup" Command="{Binding StopCleanupCommand}" Width="120" />
                    </StackPanel>

                    <ListView Grid.Row="5" ItemsSource="{Binding FilesToProcess}" SelectionMode="Single">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="Source ID / Path" Width="150">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding DisplayIdentifier}" ToolTip="{Binding FilePath}"/>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="File Name" Width="250" DisplayMemberBinding="{Binding FileName}" />
                                <GridViewColumn Header="Status" Width="120" DisplayMemberBinding="{Binding Status}" />
                                <GridViewColumn Header="Details" Width="200" DisplayMemberBinding="{Binding StatusMessage}" />
                            </GridView>
                        </ListView.View>
                    </ListView>

                    <TextBox Grid.Row="6" Text="{Binding CurrentOperationStatus}"
                             IsReadOnly="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"
                             MinHeight="60" MaxHeight="100" Margin="0,10,0,0" />
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaApp\MainWindow.xaml.cs">
<![CDATA[
// DaminionOllamaApp/MainWindow.xaml.cs
using DaminionOllamaApp.ViewModels; // For MainViewModel
using System.Windows;

namespace DaminionOllamaApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel(); // Set the DataContext here
        }

        // Ensure the old OpenSettings_Click handler from the test button is removed
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Daminion\DaminionMediaItem.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Daminion/DaminionMediaItem.cs
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace DaminionOllamaInteractionLib.Daminion
{
    // This class corresponds to the 'Item' structure described on page 16
    // of the "API v4 original by Yuri.pdf" document.
    public class DaminionMediaItem
    {
        [JsonPropertyName("id")]
        public long Id { get; set; } // [cite: 84]

        [JsonPropertyName("hashCode")]
        public long? HashCode { get; set; } // [cite: 84]

        [JsonPropertyName("name")]
        public string? Name { get; set; } // [cite: 85]

        [JsonPropertyName("fileName")]
        public string? FileName { get; set; } // [cite: 86]

        [JsonPropertyName("mediaFormat")]
        public string? MediaFormat { get; set; } // [cite: 86]

        [JsonPropertyName("versionControlState")]
        public int? VersionControlState { get; set; } // [cite: 87]

        [JsonPropertyName("colorLabel")]
        public long? ColorLabel { get; set; } // ID of the value, [cite: 89]

        [JsonPropertyName("width")]
        public int? Width { get; set; } // [cite: 90]

        [JsonPropertyName("height")]
        public int? Height { get; set; } // [cite: 91]

        [JsonPropertyName("fileSize")]
        public long? FileSize { get; set; } // [cite: 92]

        [JsonPropertyName("formatType")]
        public string? FormatType { get; set; } // [cite: 92]

        [JsonPropertyName("expirationDate")]
        public string? ExpirationDate { get; set; } // [cite: 92]
    }

    // This class is a wrapper for the response from the GET /api/mediaItems/get endpoint
    // as described on page 15 of the "API v4 original by Yuri.pdf" document.
    public class DaminionSearchMediaItemsResponse
    {
        [JsonPropertyName("mediaItems")]
        public List<DaminionMediaItem>? MediaItems { get; set; } // [cite: 83]

        [JsonPropertyName("error")]
        public string? Error { get; set; } // [cite: 82]

        [JsonPropertyName("errorCode")]
        public int ErrorCode { get; set; } // [cite: 82]

        [JsonPropertyName("success")]
        public bool Success { get; set; } // [cite: 83]

        // The API documentation for /api/mediaItems/get (page 15) does not explicitly show "totalCount".
        // However, /api/mediaItems/getSort (page 13) does. If you find "totalCount" in the actual
        // response for /api/mediaItems/get, you can add it here.
        // [JsonPropertyName("totalCount")]
        // public int TotalCount { get; set; }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Daminion\DaminionPathInfo.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Daminion/DaminionPathInfo.cs
using System.Collections.Generic;

namespace DaminionOllamaInteractionLib.Daminion
{
    /// <summary>
    /// Represents the result of a Daminion path operation. 
    /// </summary>
    public class DaminionPathResult // Must be public
    {
        /// <summary>
        /// Gets or sets the paths returned by the Daminion operation.
        /// </summary>
        public Dictionary<string, string>? Paths { get; set; }
        /// <summary>
        /// Gets or sets the success status of the Daminion operation.
        /// </summary>
        public bool Success { get; set; }
        /// <summary>
        /// Gets or sets the error message if the operation was not successful.
        /// </summary>
        public string? ErrorMessage { get; set; }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Daminion\DaminionTagInfo.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Daminion/DaminionTagInfo.cs
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace DaminionOllamaInteractionLib.Daminion // <--- Check this namespace
{
    /// <summary>
    /// Represents the response from the Daminion API for getting tags.
    /// </summary>
    public class DaminionGetTagsResponse // <--- Must be public
    {
        [JsonPropertyName("data")]
        public List<DaminionTag>? Data { get; set; }

        [JsonPropertyName("error")]
        public string? Error { get; set; }

        [JsonPropertyName("errorCode")]
        public int ErrorCode { get; set; }

        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    /// <summary>
    /// Represents a tag in Daminion.
    /// </summary>
    public class DaminionTag // <--- Must be public
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("indexed")]
        public bool Indexed { get; set; }

        [JsonPropertyName("guid")]
        public string Guid { get; set; } = string.Empty;

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("originName")]
        public string? OriginName { get; set; }

        [JsonPropertyName("readOnly")]
        public bool ReadOnly { get; set; }

        [JsonPropertyName("dataType")]
        public string DataType { get; set; } = string.Empty;

        /// <summary>
        /// Returns a string representation of the DaminionTag object.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return $"{Name} (ID: {Id}, GUID: {Guid}, Type: {DataType}, Indexed: {Indexed})";
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Daminion\DaminionTagValueInfo.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Daminion/DaminionTagValueInfo.cs
using System.Collections.Generic;
using System.Text.Json.Serialization; // Ensure this using directive is present

namespace DaminionOllamaInteractionLib.Daminion
{
    /// <summary>
    /// Represents a tag value in Daminion.
    /// </summary>
    public class DaminionTagValue
    {
        [JsonPropertyName("text")]
        public string Text { get; set; } = string.Empty;

        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("isDefaultValue")]
        public bool IsDefaultValue { get; set; }

        [JsonPropertyName("tagId")]
        public long TagId { get; set; }

        [JsonPropertyName("rawValue")]
        public string RawValue { get; set; } = string.Empty;

        [JsonPropertyName("tagName")]
        public string TagName { get; set; } = string.Empty;

        [JsonPropertyName("hasChilds")]
        public bool HasChilds { get; set; }
    }

    /// <summary>
    /// Represents the response from the Daminion API for getting tag values.
    /// </summary>
    public class DaminionGetTagValuesResponse
    {
        [JsonPropertyName("values")]
        public List<DaminionTagValue>? Values { get; set; }

        [JsonPropertyName("path")]
        public List<DaminionTagValue>? Path { get; set; }

        [JsonPropertyName("tag")]
        public DaminionTag? Tag { get; set; }

        [JsonPropertyName("error")]
        public string? Error { get; set; }

        [JsonPropertyName("errorCode")]
        public int ErrorCode { get; set; }

        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Daminion\DaminionUpdatePayload.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Daminion/DaminionUpdatePayload.cs
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace DaminionOllamaInteractionLib.Daminion
{
    /// <summary>
    /// This class is used to create a batch change request for Daminion.
    /// </summary>
    public class DaminionBatchChangeRequest // Must be public
    {
        [JsonPropertyName("ids")]
        public List<long> Ids { get; set; } = new List<long>();

        [JsonPropertyName("data")]
        public List<DaminionUpdateOperation> Data { get; set; } = new List<DaminionUpdateOperation>();
    }

    /// <summary>
    /// This class is used to create a batch change request for Daminion.
    /// </summary>
    public class DaminionUpdateOperation // Must be public
    {
        [JsonPropertyName("guid")]
        public string Guid { get; set; } = string.Empty;

        [JsonPropertyName("id")]
        public long Id { get; set; } // Tag value ID. Set to 0 if assigning by text.

        [JsonPropertyName("value")]
        public string Value { get; set; } = string.Empty;

        [JsonPropertyName("remove")]
        public bool Remove { get; set; } = false;
    }

    /// <summary>
    /// This class is used to create a batch change response for Daminion.
    /// </summary>
    public class DaminionBatchChangeResponse // Must be public
    {
        [JsonPropertyName("success")]
        public bool Success { get; set; } // Must be public

        [JsonPropertyName("error")]
        public string? Error { get; set; }

        [JsonPropertyName("errorCode")]
        public int ErrorCode { get; set; }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs">
<![CDATA[
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\obj\Debug\net8.0\DaminionOllamaInteractionLib.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaInteractionLib")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e91857bf783337c97b8aeeca0d1579206e4a8902")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaInteractionLib")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaInteractionLib")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\obj\Debug\net8.0\DaminionOllamaInteractionLib.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\obj\Release\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs">
<![CDATA[
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\obj\Release\net8.0\DaminionOllamaInteractionLib.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaInteractionLib")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7e6fec4546ae6195e485009c8044edf76e6c87a2")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaInteractionLib")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaInteractionLib")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\obj\Release\net8.0\DaminionOllamaInteractionLib.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Ollama\OllamaApiClient.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Ollama/OllamaApiClient.cs
using System;
using System.Collections.Generic; // For List in OllamaModelInfo if used directly
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json; // For JsonSerializer
using System.Threading.Tasks;
// Ensure this using statement correctly points to where your Ollama DTOs are:
using DaminionOllamaInteractionLib.Ollama;

namespace DaminionOllamaInteractionLib.Ollama
{
    /// <summary>
    /// Client for interacting with the Ollama API.
    /// </summary>
    public class OllamaApiClient : IDisposable
    {
        private readonly HttpClient _httpClient;
        private string _apiBaseUrl;

        /// <summary>
        /// Initializes a new instance of the <see cref="OllamaApiClient"/> class.
        /// </summary>
        /// <param name="ollamaServerUrl"></param>
        /// <exception cref="ArgumentException"></exception>
        public OllamaApiClient(string ollamaServerUrl)
        {
            if (string.IsNullOrWhiteSpace(ollamaServerUrl))
                throw new ArgumentException("Ollama server URL cannot be empty.", nameof(ollamaServerUrl));

            _apiBaseUrl = ollamaServerUrl.TrimEnd('/');
            _httpClient = new HttpClient();
            _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            // Increased timeout for potentially long-running Ollama requests
            _httpClient.Timeout = TimeSpan.FromMinutes(5);
            Console.WriteLine($"[OllamaApiClient] Initialized with base URL: {_apiBaseUrl}");
        }

        /// <summary>
        /// Sends a request to the Ollama API to analyze an image with a given prompt.
        /// </summary>
        /// <param name="modelName"></param>
        /// <param name="prompt"></param>
        /// <param name="imageBytes"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentNullException"></exception>
        public async Task<OllamaGenerateResponse?> AnalyzeImageAsync(string modelName, string prompt, byte[] imageBytes)
        {
            if (string.IsNullOrWhiteSpace(modelName))
                throw new ArgumentNullException(nameof(modelName), "Model name cannot be empty.");
            if (string.IsNullOrWhiteSpace(prompt))
                throw new ArgumentNullException(nameof(prompt), "Prompt cannot be empty.");
            if (imageBytes == null || imageBytes.Length == 0)
                throw new ArgumentNullException(nameof(imageBytes), "Image bytes cannot be null or empty.");

            string generateUrl = $"{_apiBaseUrl}/api/generate";
            Console.WriteLine($"[OllamaApiClient] Attempting to analyze image. URL: {generateUrl}, Model: {modelName}");

            string base64Image = Convert.ToBase64String(imageBytes);
            var requestPayload = new OllamaGenerateRequest
            {
                Model = modelName,
                Prompt = prompt,
                Images = new List<string> { base64Image },
                Stream = false
            };

            try
            {
                string jsonRequest = JsonSerializer.Serialize(requestPayload,
                    new JsonSerializerOptions { DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull });
                var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

                // Log a snippet of the request for brevity, as Base64 images are large.
                Console.WriteLine($"[OllamaApiClient] Request Payload (snippet): {{ \"model\": \"{modelName}\", \"prompt\": \"{prompt.Substring(0, Math.Min(prompt.Length, 50))}...\", \"images\": [\"Base64ImageSnippet...\"] }}");

                Console.WriteLine($"[OllamaApiClient] Sending POST request to {generateUrl}...");
                HttpResponseMessage response = await _httpClient.PostAsync(generateUrl, content);
                string responseBody = await response.Content.ReadAsStringAsync();

                Console.WriteLine($"[OllamaApiClient] Response Status Code: {response.StatusCode}");
                Console.WriteLine($"[OllamaApiClient] Response Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");

                if (response.IsSuccessStatusCode)
                {
                    OllamaGenerateResponse? ollamaResponse = null;
                    try
                    {
                        ollamaResponse = JsonSerializer.Deserialize<OllamaGenerateResponse>(responseBody);
                    }
                    catch (System.Text.Json.JsonException jsonEx)
                    {
                        Console.Error.WriteLine($"[OllamaApiClient] Error deserializing successful Ollama response: {jsonEx.Message}. StackTrace: {jsonEx.StackTrace}. Body: {responseBody}");
                        return new OllamaGenerateResponse { Model = modelName, Response = $"Error: Failed to parse successful response. {jsonEx.Message}", Done = false };
                    }

                    if (ollamaResponse == null || (string.IsNullOrEmpty(ollamaResponse.Response) && ollamaResponse.Done))
                    {
                        Console.Error.WriteLine("[OllamaApiClient] Ollama API returned success status but the response content is missing, invalid, or indicates an issue.");
                        return new OllamaGenerateResponse { Model = modelName, Response = $"Error: Successful API call but problematic response body. Raw: {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}", Done = ollamaResponse?.Done ?? false };
                    }
                    Console.WriteLine("[OllamaApiClient] Successfully deserialized Ollama response.");
                    return ollamaResponse;
                }
                else
                {
                    Console.Error.WriteLine($"[OllamaApiClient] Ollama API request failed. Status: {response.StatusCode}, Reason: {response.ReasonPhrase}.");
                    // The responseBody is already logged above.
                    return new OllamaGenerateResponse { Model = modelName, Response = $"Error: {response.StatusCode} - {response.ReasonPhrase}. See debug output for full body.", Done = false };
                }
            }
            catch (HttpRequestException ex)
            {
                Console.Error.WriteLine($"[OllamaApiClient] HTTP request error to Ollama: {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.Error.WriteLine($"[OllamaApiClient] Inner Exception: {ex.InnerException.Message}");
                }
                Console.Error.WriteLine($"[OllamaApiClient] StackTrace: {ex.StackTrace}");
                return new OllamaGenerateResponse { Model = modelName, Response = $"Error: HTTP request failed. {ex.Message}", Done = false };
            }
            catch (System.Text.Json.JsonException ex) // For errors during request serialization
            {
                Console.Error.WriteLine($"[OllamaApiClient] Error serializing Ollama request: {ex.Message}");
                Console.Error.WriteLine($"[OllamaApiClient] StackTrace: {ex.StackTrace}");
                return new OllamaGenerateResponse { Model = modelName, Response = $"Error: JSON processing for request failed. {ex.Message}", Done = false };
            }
            catch (TaskCanceledException ex) // Often indicates a timeout
            {
                Console.Error.WriteLine($"[OllamaApiClient] Ollama request timed out: {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.Error.WriteLine($"[OllamaApiClient] Inner Exception (Timeout): {ex.InnerException.Message}");
                }
                Console.Error.WriteLine($"[OllamaApiClient] StackTrace: {ex.StackTrace}");
                return new OllamaGenerateResponse { Model = modelName, Response = $"Error: Request to Ollama timed out. Timeout is {_httpClient.Timeout.TotalSeconds}s. {ex.Message}", Done = false };
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[OllamaApiClient] An unexpected error occurred: {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.Error.WriteLine($"[OllamaApiClient] Inner Exception: {ex.InnerException.Message}");
                }
                Console.Error.WriteLine($"[OllamaApiClient] StackTrace: {ex.StackTrace}");
                return new OllamaGenerateResponse { Model = modelName, Response = $"Error: An unexpected error occurred. {ex.Message}", Done = false };
            }
        }

        // These methods go INSIDE the OllamaApiClient class

        /// <summary>
        /// Checks if the Ollama server is running and reachable.
        /// </summary>
        /// <returns>True if the server responds positively, false otherwise.</returns>
        public async Task<bool> CheckConnectionAsync()
        {
            if (string.IsNullOrWhiteSpace(_apiBaseUrl))
            {
                Console.Error.WriteLine("[OllamaApiClient] CheckConnection Error: API base URL is not set.");
                return false;
            }

            string healthCheckUrl = _apiBaseUrl;
            Console.WriteLine($"[OllamaApiClient] Checking Ollama connection at: {healthCheckUrl}");

            try
            {
                // Use a temporary HttpClient for a quick check with a shorter timeout
                // Or, if _httpClient is already initialized with a suitable default timeout, you could use it.
                // Creating a new one here ensures a specific short timeout for this check.
                using (var tempHttpClient = new HttpClient { Timeout = TimeSpan.FromSeconds(10) }) // Increased timeout slightly
                {
                    HttpResponseMessage response = await tempHttpClient.GetAsync(healthCheckUrl);
                    Console.WriteLine($"[OllamaApiClient] Connection check response status: {response.StatusCode}");
                    // Optional: Check response body if needed, e.g., response.Content.ReadAsStringAsync();
                    return response.IsSuccessStatusCode;
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[OllamaApiClient] Error checking Ollama connection to '{healthCheckUrl}': {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Lists local models available on the Ollama server using the /api/tags endpoint.
        /// </summary>
        /// <returns>An OllamaListTagsResponse containing the list of models, or null if an error occurs.</returns>
        public async Task<OllamaListTagsResponse?> ListLocalModelsAsync()
        {
            if (string.IsNullOrWhiteSpace(_apiBaseUrl))
            {
                Console.Error.WriteLine("[OllamaApiClient] ListLocalModels Error: API base URL is not set.");
                return null;
            }

            string listModelsUrl = $"{_apiBaseUrl}/api/tags";
            Console.WriteLine($"[OllamaApiClient] Listing Ollama models from: {listModelsUrl}");

            try
            {
                // Use the class member _httpClient, assuming its timeout is appropriate for this call.
                // If not, you might consider adjusting _httpClient.Timeout or using a temporary client like in CheckConnectionAsync.
                HttpResponseMessage response = await _httpClient.GetAsync(listModelsUrl);
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[OllamaApiClient] ListLocalModels Response Status Code: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    OllamaListTagsResponse? listResponse = null;
                    try
                    {
                        // Ensure System.Text.Json.JsonSerializer is used. Add 'using System.Text.Json;' if missing.
                        listResponse = System.Text.Json.JsonSerializer.Deserialize<OllamaListTagsResponse>(responseBody,
                            new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    }
                    catch (System.Text.Json.JsonException jsonEx)
                    {
                        Console.Error.WriteLine($"[OllamaApiClient] Error deserializing ListLocalModels response: {jsonEx.Message}. Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                        return null;
                    }

                    if (listResponse != null)
                    {
                        Console.WriteLine($"[OllamaApiClient] Successfully fetched {listResponse.Models?.Count ?? 0} local models.");
                    }
                    else
                    {
                        Console.Error.WriteLine($"[OllamaApiClient] ListLocalModels deserialization resulted in null object. Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    }
                    return listResponse;
                }
                else
                {
                    Console.Error.WriteLine($"[OllamaApiClient] ListLocalModels HTTP call failed. Status: {response.StatusCode}, Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    return null;
                }
            }
            catch (Exception ex) // Catch general exceptions including HttpRequestException, TaskCanceledException (timeout)
            {
                Console.Error.WriteLine($"[OllamaApiClient] An unexpected error occurred during ListLocalModels from '{listModelsUrl}': {ex.Message}");
                return null;
            }
        }

        public void Dispose()
        {
            _httpClient?.Dispose();
            GC.SuppressFinalize(this);
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Ollama\OllamaGenerateRequest.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Ollama/OllamaGenerateRequest.cs
using System.Text.Json.Serialization; // Required for JsonPropertyName
using System.Collections.Generic;     // Required for List

namespace DaminionOllamaInteractionLib.Ollama
{
    /// <summary>
    /// Represents a request to generate text using the Ollama API.
    /// </summary>
    public class OllamaGenerateRequest
    {
        [JsonPropertyName("model")]
        public string Model { get; set; } = string.Empty;

        [JsonPropertyName("prompt")]
        public string Prompt { get; set; } = string.Empty;

        [JsonPropertyName("images")]
        public List<string>? Images { get; set; } // List of Base64 encoded images

        [JsonPropertyName("stream")]
        public bool Stream { get; set; } = false; // We want the full response, not a stream
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Ollama\OllamaGenerateResponse.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Ollama/OllamaGenerateResponse.cs
using System.Text.Json.Serialization; // Required for JsonPropertyName
using System.Collections.Generic;     // Required for List

namespace DaminionOllamaInteractionLib.Ollama
{
    /// <summary>
    /// Represents the response from the Ollama API for a generation request.
    /// </summary>
    public class OllamaGenerateResponse
    {
        [JsonPropertyName("model")]
        public string Model { get; set; } = string.Empty;

        [JsonPropertyName("created_at")]
        public string CreatedAt { get; set; } = string.Empty; // ISO 8601 date string

        [JsonPropertyName("response")]
        public string Response { get; set; } = string.Empty; // This is the main content from Llava

        [JsonPropertyName("done")]
        public bool Done { get; set; }

        // Optional fields that might be present in the response
        [JsonPropertyName("total_duration")]
        public long? TotalDuration { get; set; }

        [JsonPropertyName("load_duration")]
        public long? LoadDuration { get; set; }

        [JsonPropertyName("prompt_eval_count")]
        public int? PromptEvalCount { get; set; }

        [JsonPropertyName("prompt_eval_duration")]
        public long? PromptEvalDuration { get; set; }

        [JsonPropertyName("eval_count")]
        public int? EvalCount { get; set; }

        [JsonPropertyName("eval_duration")]
        public long? EvalDuration { get; set; }

        // Context is usually a large array of numbers, you might not need to deserialize it fully
        // unless you plan to use it for follow-up requests.
        // For now, we can ignore it or deserialize as JsonElement if needed later.
        // [JsonPropertyName("context")]
        // public List<int>? Context { get; set; }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Ollama\OllamaModelInfo.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Ollama/OllamaModelInfo.cs
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace DaminionOllamaInteractionLib.Ollama
{
    /// <summary>
    /// Represents the details of an Ollama model.
    /// </summary>
    public class OllamaModelDetails
    {
        [JsonPropertyName("format")]
        public string? Format { get; set; }

        [JsonPropertyName("family")]
        public string? Family { get; set; }

        [JsonPropertyName("families")]
        public List<string>? Families { get; set; }

        [JsonPropertyName("parameter_size")]
        public string? ParameterSize { get; set; }

        [JsonPropertyName("quantization_level")]
        public string? QuantizationLevel { get; set; }
    }

    /// <summary>
    /// Represents the information of an Ollama model.
    /// </summary>
    public class OllamaModelInfo
    {
        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("model")]
        public string Model { get; set; } = string.Empty;

        [JsonPropertyName("modified_at")]
        public string ModifiedAt { get; set; } = string.Empty;

        [JsonPropertyName("size")]
        public long Size { get; set; }

        [JsonPropertyName("digest")]
        public string Digest { get; set; } = string.Empty;

        [JsonPropertyName("details")]
        public OllamaModelDetails? Details { get; set; }
    }

    /// <summary>
    /// Represents the response from the Ollama API for listing tags.
    /// </summary>
    public class OllamaListTagsResponse
    {
        [JsonPropertyName("models")]
        public List<OllamaModelInfo>? Models { get; set; }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Ollama\OllamaResponseParser.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Ollama/OllamaResponseParser.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace DaminionOllamaInteractionLib.Ollama
{
    /// <summary>
    /// This class is responsible for parsing the response from the Ollama API.
    /// </summary>
    public static class OllamaResponseParser // Must be public and static
    {
        /// <summary>
        /// Parses the response from the Ollama API and extracts categories, keywords, and description.
        /// </summary>
        /// <param name="llavaResponseText"></param>
        /// <returns></returns>
        public static ParsedOllamaContent ParseLlavaResponse(string llavaResponseText)
        {
            var parsedContent = new ParsedOllamaContent { RawResponse = llavaResponseText };
            if (string.IsNullOrWhiteSpace(llavaResponseText))
            {
                parsedContent.Description = "Ollama returned an empty response.";
                return parsedContent;
            }

            string description = llavaResponseText;

            // Attempt to extract categories
            var categoriesMatch = Regex.Match(llavaResponseText, @"Categories:(.*?)(\n\n|\z)", RegexOptions.Singleline | RegexOptions.IgnoreCase);
            if (categoriesMatch.Success)
            {
                string categoriesBlock = categoriesMatch.Groups[1].Value.Trim();
                parsedContent.Categories = categoriesBlock.Split(new[] { '\n', '-' }, StringSplitOptions.RemoveEmptyEntries)
                                                      .Select(c => c.Trim())
                                                      .Where(c => !string.IsNullOrWhiteSpace(c))
                                                      .ToList();
                description = description.Replace(categoriesMatch.Value, "").Trim();
                parsedContent.SuccessfullyParsed = true;
            }

            // Attempt to extract keywords
            var keywordsMatch = Regex.Match(llavaResponseText, @"Keywords:(.*?)(\n\n|\z)", RegexOptions.Singleline | RegexOptions.IgnoreCase);
            if (keywordsMatch.Success)
            {
                string keywordsBlock = keywordsMatch.Groups[1].Value.Trim();
                parsedContent.Keywords = keywordsBlock.Split(new[] { '\n', '-', ',' }, StringSplitOptions.RemoveEmptyEntries)
                                                    .Select(k => k.Trim())
                                                    .Where(k => !string.IsNullOrWhiteSpace(k))
                                                    .ToList();
                description = description.Replace(keywordsMatch.Value, "").Trim();
                parsedContent.SuccessfullyParsed = true;
            }

            parsedContent.Description = description.Trim();

            // If no specific sections were found, the whole text is the description.
            if (!parsedContent.SuccessfullyParsed && !string.IsNullOrWhiteSpace(parsedContent.Description))
            {
                parsedContent.SuccessfullyParsed = true;
            }
            else if (string.IsNullOrWhiteSpace(parsedContent.Description) && !parsedContent.Categories.Any() && !parsedContent.Keywords.Any())
            {
                // This case handles if parsing resulted in empty fields but raw response wasn't empty.
                if (!string.IsNullOrWhiteSpace(llavaResponseText))
                {
                    parsedContent.Description = llavaResponseText; // Fallback to raw response as description
                    parsedContent.SuccessfullyParsed = true; // Consider it "parsed" as a description block
                }
                else
                {
                    // This case should be rare if initial null/whitespace check passed.
                    parsedContent.Description = "Ollama returned content, but parsing failed to extract structured data.";
                    parsedContent.SuccessfullyParsed = false;
                }
            }
            return parsedContent;
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Ollama\ParsedOllamaContent.cs">
<![CDATA[
// DaminionOllamaInteractionLib/Ollama/ParsedOllamaContent.cs
using System.Collections.Generic;

namespace DaminionOllamaInteractionLib.Ollama
{
    /// <summary>
    /// Represents the parsed content from an Ollama response.
    /// </summary>
    public class ParsedOllamaContent // Must be public
    {
        public string Description { get; set; } = string.Empty;
        public List<string> Categories { get; set; } = new List<string>();
        public List<string> Keywords { get; set; } = new List<string>();
        public string RawResponse { get; set; } = string.Empty;
        public bool SuccessfullyParsed { get; set; } = false;
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\OpenRouter\OpenRouterApiClient.cs">
<![CDATA[
// DaminionOllamaInteractionLib/OpenRouter/OpenRouterApiClient.cs
using DaminionOllamaInteractionLib.Ollama;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace DaminionOllamaInteractionLib.OpenRouter
{
    /// <summary>
    /// Client for interacting with the OpenRouter.ai API.
    /// </summary>
    public class OpenRouterApiClient : IDisposable
    {
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;

        /// <summary>
        /// Initializes a new instance of the <see cref="OpenRouterApiClient"/> class.
        /// </summary>
        /// <param name="apiKey">The API key for OpenRouter.</param>
        /// <param name="httpReferer">The HTTP referer, required by OpenRouter.</param>
        public OpenRouterApiClient(string apiKey, string httpReferer)
        {
            if (string.IsNullOrWhiteSpace(apiKey))
                throw new ArgumentException("OpenRouter API key cannot be empty.", nameof(apiKey));

            _apiKey = apiKey;
            _httpClient = new HttpClient();
            _httpClient.BaseAddress = new Uri("https://openrouter.ai/api/v1/");
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _apiKey);
            _httpClient.DefaultRequestHeaders.Add("HTTP-Referer", httpReferer);
            _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            _httpClient.Timeout = TimeSpan.FromMinutes(5);

            Console.WriteLine("[OpenRouterApiClient] Initialized.");
        }

        /// <summary>
        /// Lists the available models from the OpenRouter API.
        /// </summary>
        /// <returns>A response object containing the list of models.</returns>
        public async Task<OpenRouterListModelsResponse?> ListModelsAsync()
        {
            try
            {
                Console.WriteLine("[OpenRouterApiClient] Fetching models from /models endpoint.");
                HttpResponseMessage response = await _httpClient.GetAsync("models");
                string responseBody = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    Console.Error.WriteLine($"[OpenRouterApiClient] Failed to fetch models. Status: {response.StatusCode}. Body: {responseBody}");
                    return null;
                }

                return JsonSerializer.Deserialize<OpenRouterListModelsResponse>(responseBody);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[OpenRouterApiClient] Error fetching models: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Analyzes an image using a multimodal model on OpenRouter.
        /// </summary>
        /// <param name="modelName">The name of the model to use (e.g., "google/gemini-pro-vision").</param>
        /// <param name="prompt">The text prompt for the analysis.</param>
        /// <param name="base64Image">The base64 encoded image string.</param>
        /// <returns>The content of the AI's response.</returns>
        public async Task<string?> AnalyzeImageAsync(string modelName, string prompt, string base64Image)
        {
            var requestPayload = new
            {
                model = modelName,
                messages = new[]
                {
                    new {
                        role = "user",
                        content = new object[]
                        {
                            new { type = "image_url", image_url = new { url = $"data:image/jpeg;base64,{base64Image}" } },
                            new { type = "text", text = prompt }
                        }
                    }
                }
            };

            try
            {
                var content = new StringContent(JsonSerializer.Serialize(requestPayload), Encoding.UTF8, "application/json");
                Console.WriteLine($"[OpenRouterApiClient] Sending chat completion request to model: {modelName}");

                HttpResponseMessage response = await _httpClient.PostAsync("chat/completions", content);
                string responseBody = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    Console.Error.WriteLine($"[OpenRouterApiClient] Chat completion request failed. Status: {response.StatusCode}. Body: {responseBody}");
                    return $"Error: API request failed with status {response.StatusCode}.";
                }

                var openRouterResponse = JsonSerializer.Deserialize<OpenRouterChatCompletionResponse>(responseBody);
                return openRouterResponse?.Choices?.FirstOrDefault()?.Message?.Content;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[OpenRouterApiClient] Error during chat completion request: {ex.Message}");
                return $"Error: An exception occurred. {ex.Message}";
            }
        }

        public void Dispose()
        {
            _httpClient?.Dispose();
            GC.SuppressFinalize(this);
        }
    }

    // DTOs for OpenRouter API responses

    public class OpenRouterListModelsResponse
    {
        [JsonPropertyName("data")]
        public List<OpenRouterModel>? Data { get; set; }
    }

    public class OpenRouterModel
    {
        [JsonPropertyName("id")]
        public string? Id { get; set; }
        [JsonPropertyName("name")]
        public string? Name { get; set; }
    }

    public class OpenRouterChatCompletionResponse
    {
        [JsonPropertyName("choices")]
        public List<OpenRouterChoice>? Choices { get; set; }
    }

    public class OpenRouterChoice
    {
        [JsonPropertyName("message")]
        public OpenRouterMessage? Message { get; set; }
    }

    public class OpenRouterMessage
    {
        [JsonPropertyName("content")]
        public string? Content { get; set; }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Services\ImageMetadataEditor.cs">
<![CDATA[
using System;
using System.Collections.Generic;
using System.Linq;
using ImageMagick;
using System.Xml.Linq;

namespace DaminionOllamaInteractionLib.Services
{
    /// <summary>
    /// A class to read and write image metadata using ImageMagick.
    /// </summary>
    public class ImageMetadataEditor : IDisposable
    {
        private readonly string _filePath;
        private MagickImage? _image;
        private IExifProfile? _exifProfile;
        private IIptcProfile? _iptcProfile;
        private IXmpProfile? _xmpProfile;

        private static readonly XNamespace RdfNS = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
        private static readonly XNamespace DcNS = "http://purl.org/dc/elements/1.1/";
        private static readonly XNamespace XmpMetaNS = "adobe:ns:meta/";

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageMetadataEditor"/> class.
        /// </summary>
        /// <param name="filePath"></param>
        /// <exception cref="ArgumentNullException"></exception>
        public ImageMetadataEditor(string filePath)
        {
            _filePath = filePath ?? throw new ArgumentNullException(nameof(filePath));
        }

        /// <summary>
        /// Reads the image metadata from the specified file.
        /// </summary>
        public void Read()
        {
            _image?.Dispose();
            _image = new MagickImage(_filePath);

            _exifProfile = _image.GetExifProfile();
            _iptcProfile = _image.GetIptcProfile();
            _xmpProfile = _image.GetXmpProfile();

            PopulateMainProperties();
        }

        /// <summary>
        /// Saves the image metadata to the specified file.
        /// </summary>
        /// <exception cref="InvalidOperationException"></exception>
        public void Save()
        {
            if (_image == null)
                throw new InvalidOperationException("Image has not been read. Call Read() first.");

            UpdateMainProperties();

            if (_exifProfile is { Values.Count: > 0 })
                _image.SetProfile(_exifProfile);
            else
                _image.RemoveProfile("exif");

            if (_iptcProfile is { Values.Count: > 0 })
                _image.SetProfile(_iptcProfile);
            else
                _image.RemoveProfile("iptc");

            if (_xmpProfile != null)
            {
                var xdoc = TryGetXmpDocument(_xmpProfile);
                var rdfDesc = xdoc?.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description");

                bool hasContent = rdfDesc?.Elements().Any(el =>
                    el.Name.Namespace != XmpMetaNS &&
                    el.Name.Namespace != RdfNS &&
                    !el.Name.LocalName.StartsWith("xmlns", StringComparison.Ordinal)) ?? false;

                if (hasContent)
                    _image.SetProfile(_xmpProfile);
                else
                    _image.RemoveProfile("xmp");
            }

            _image.Write(_filePath);
        }

        public string? Description { get; set; } 
        public List<string> Keywords { get; set; } = new();
        public List<string> Categories { get; set; } = new();
        public string? ExifImageDescription { get; set; }

        /// <summary>
        /// Populates the main properties of the image metadata.
        /// </summary>
        private void PopulateMainProperties()
        {
            Description = GetXmpSimpleString(DcNS + "description")
                          ?? GetIptcSingleValue(IptcTag.Caption)
                          ?? GetExifStringValue(ExifTag.ImageDescription);

            ExifImageDescription = GetExifStringValue(ExifTag.ImageDescription);

            Keywords = GetIptcMultipleValues(IptcTag.Keyword)
                .Concat(GetXmpBag(DcNS + "subject"))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();

            Categories = GetXmpBag(DcNS + "type");
        }

        /// <summary>
        /// Updates the main properties of the image metadata.
        /// </summary>
        private void UpdateMainProperties()
        {
            SetXmpSimpleString(DcNS + "description", Description);
            SetIptcSingleValue(IptcTag.Caption, Description);
            SetExifStringValue(ExifTag.ImageDescription, ExifImageDescription);
            SetIptcMultipleValues(IptcTag.Keyword, Keywords);
            SetXmpBag(DcNS + "subject", Keywords);
            SetXmpBag(DcNS + "type", Categories);
        }

        /// <summary>
        ///     Gets the string value of the specified EXIF tag.
        /// </summary>
        /// <param name="tagIdentifier"></param>
        /// <returns></returns>
        private string? GetExifStringValue(ExifTag tagIdentifier)
        {
            if (_exifProfile == null) return null;

            if (tagIdentifier == ExifTag.ImageDescription)
                return _exifProfile.GetValue(ExifTag<string>.ImageDescription)?.Value;

            Console.WriteLine($"EXIF tag {tagIdentifier} not supported.");
            return null;
        }

        /// <summary>
        ///    Sets the string value of the specified EXIF tag.
        /// </summary>
        /// <param name="tagIdentifier"></param>
        /// <param name="value"></param>
        private void SetExifStringValue(ExifTag tagIdentifier, string? value)
        {
            if (tagIdentifier != ExifTag.ImageDescription) return;

            _exifProfile ??= new ExifProfile();

            if (string.IsNullOrEmpty(value))
                _exifProfile.RemoveValue(ExifTag<string>.ImageDescription);
            else
                _exifProfile.SetValue(ExifTag<string>.ImageDescription, value);
        }

        /// <summary>
        ///   Gets the single value of the specified IPTC tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <returns></returns>
        private string? GetIptcSingleValue(IptcTag tag)
        {
            return _iptcProfile?.Values.FirstOrDefault(v => v.Tag == tag)?.Value;
        }

        /// <summary>
        ///     Gets the multiple values of the specified IPTC tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <returns></returns>
        private List<string> GetIptcMultipleValues(IptcTag tag)
        {
            return _iptcProfile?.Values
                       .Where(v => v.Tag == tag && !string.IsNullOrEmpty(v.Value))
                       .Select(v => v.Value)
                       .ToList() ?? new List<string>();
        }

        /// <summary>
        ///   Sets the single value of the specified IPTC tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <param name="value"></param>
        private void SetIptcSingleValue(IptcTag tag, string? value)
        {
            if (string.IsNullOrEmpty(value)) return;

            _iptcProfile ??= new IptcProfile();
            _iptcProfile.RemoveValue(tag);
            _iptcProfile.SetValue(tag, value);
        }

        /// <summary>
        ///     Sets the multiple values of the specified IPTC tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <param name="values"></param>
        private void SetIptcMultipleValues(IptcTag tag, List<string> values)
        {
            if (values == null || values.All(string.IsNullOrWhiteSpace)) return;

            _iptcProfile ??= new IptcProfile();
            _iptcProfile.RemoveValue(tag);

            foreach (var val in values.Where(s => !string.IsNullOrWhiteSpace(s)))
                _iptcProfile.SetValue(tag, val);
        }

        /// <summary>
        ///     Attempts to get the XMP document from the profile.
        /// </summary>
        /// <param name="profile"></param>
        /// <returns></returns>
        private XDocument? TryGetXmpDocument(IXmpProfile? profile)
        {
            try { return profile?.ToXDocument(); }
            catch (Exception ex) { Console.WriteLine($"Failed to parse XMP: {ex.Message}"); return null; }
        }

        /// <summary>
        ///    Attempts to get or create an XMP document.
        /// </summary>
        /// <returns></returns>
        private XDocument GetOrCreateXmpDocument()
        {
            var xdoc = TryGetXmpDocument(_xmpProfile);
            if (xdoc != null) return xdoc;

            var newDoc = new XDocument(
                new XElement(XmpMetaNS + "xmpmeta",
                    new XAttribute(XNamespace.Xmlns + "x", XmpMetaNS.NamespaceName),
                    new XElement(RdfNS + "RDF",
                        new XAttribute(XNamespace.Xmlns + "rdf", RdfNS.NamespaceName),
                        new XElement(RdfNS + "Description",
                            new XAttribute(RdfNS + "about", ""),
                            new XAttribute(XNamespace.Xmlns + "dc", DcNS.NamespaceName)))));

            try { _xmpProfile = XmpProfile.FromXDocument(newDoc); }
            catch (Exception ex) { Console.WriteLine($"Failed to create XMP profile: {ex.Message}"); }

            return newDoc;
        }

        /// <summary>
        ///    Updates the XMP profile from the given XDocument.
        /// </summary>
        /// <param name="xdoc"></param>
        private void UpdateXmpProfileFromDocument(XDocument xdoc)
        {
            try { _xmpProfile = XmpProfile.FromXDocument(xdoc); }
            catch (Exception ex) { Console.WriteLine($"Failed to update XMP profile: {ex.Message}"); }
        }

        /// <summary>
        ///   Gets or creates the RDF description element in the XMP document.
        /// </summary>
        /// <param name="xdoc"></param>
        /// <returns></returns>
        private static XElement GetOrCreateRdfDescription(XDocument xdoc)
        {
            var root = xdoc.Root ?? new XElement(XmpMetaNS + "xmpmeta");
            if (xdoc.Root == null) xdoc.Add(root);

            var rdf = root.Element(RdfNS + "RDF") ?? new XElement(RdfNS + "RDF");
            if (root.Element(RdfNS + "RDF") == null) root.Add(rdf);

            var desc = rdf.Element(RdfNS + "Description") ?? new XElement(RdfNS + "Description");
            if (rdf.Element(RdfNS + "Description") == null) rdf.Add(desc);

            if (desc.Attribute(XNamespace.Xmlns + "dc") == null)
                desc.SetAttributeValue(XNamespace.Xmlns + "dc", DcNS.NamespaceName);

            return desc;
        }

        /// <summary>
        ///    Gets the simple string value of the specified XMP tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <returns></returns>
        private string? GetXmpSimpleString(XName tag)
        {
            var xdoc = TryGetXmpDocument(_xmpProfile ?? _image?.GetXmpProfile());
            if (xdoc == null) return null;

            var rdf = xdoc.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description");
            var element = rdf?.Element(tag);

            if (element != null) return element.Value;

            if (tag == DcNS + "description")
                return rdf?.Element(tag)?.Element(RdfNS + "Alt")?.Elements(RdfNS + "li")
                    .FirstOrDefault(li => (string?)li.Attribute(XNamespace.Xml + "lang") == "x-default")?.Value;

            return null;
        }

        /// <summary>
        ///     Sets the simple string value of the specified XMP tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <param name="value"></param>
        private void SetXmpSimpleString(XName tag, string? value)
        {
            var xdoc = GetOrCreateXmpDocument();
            var desc = GetOrCreateRdfDescription(xdoc);

            desc.Element(tag)?.Remove();

            if (!string.IsNullOrEmpty(value))
            {
                if (tag == DcNS + "description")
                {
                    desc.Add(new XElement(tag,
                        new XElement(RdfNS + "Alt",
                            new XElement(RdfNS + "li", value, new XAttribute(XNamespace.Xml + "lang", "x-default")))));
                }
                else
                {
                    desc.Add(new XElement(tag, value));
                }
            }

            UpdateXmpProfileFromDocument(xdoc);
        }

        /// <summary>
        ///   Gets the bag of values for the specified XMP tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <returns></returns>
        private List<string> GetXmpBag(XName tag)
        {
            var xdoc = TryGetXmpDocument(_xmpProfile ?? _image?.GetXmpProfile());
            var bag = xdoc?.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description")?.Element(tag)?.Element(RdfNS + "Bag");

            return bag?.Elements(RdfNS + "li").Select(li => li.Value).ToList() ?? new List<string>();
        }

        /// <summary>
        ///   Sets the bag of values for the specified XMP tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <param name="values"></param>
        private void SetXmpBag(XName tag, List<string> values)
        {
            if (values == null || values.All(string.IsNullOrWhiteSpace)) return;

            var xdoc = GetOrCreateXmpDocument();
            var desc = GetOrCreateRdfDescription(xdoc);
            desc.Element(tag)?.Remove();

            var bag = new XElement(RdfNS + "Bag");
            foreach (var val in values.Where(s => !string.IsNullOrWhiteSpace(s)))
                bag.Add(new XElement(RdfNS + "li", val));

            desc.Add(new XElement(tag, bag));
            UpdateXmpProfileFromDocument(xdoc);
        }

        private bool _disposed;
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        /// <summary>
        ///   Disposes the image and releases resources.
        /// </summary>
        /// <param name="disposing"></param>
        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed && disposing)
                _image?.Dispose();
            _disposed = true;
        }
        ~ImageMetadataEditor() => Dispose(false);
    }
}

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Services\ImageMetadataService.cs">
<![CDATA[
// DaminionOllamaWpfApp/Services/ImageMetadataService.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using ImageMagick;
using System.Xml.Linq;
using DaminionOllamaInteractionLib.Ollama;

namespace DaminionOllamaInteractionLib.Services
{
    /// <summary>
    /// Service for reading and writing image metadata using ImageMagick.
    /// </summary>
    public class ImageMetadataService : IDisposable
    {
        private readonly string _filePath;
        private MagickImage? _image;
        private IExifProfile? _exifProfile;
        private IIptcProfile? _iptcProfile;
        private IXmpProfile? _xmpProfile;

        private static readonly XNamespace RdfNS = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
        private static readonly XNamespace DcNS = "http://purl.org/dc/elements/1.1/";
        private static readonly XNamespace XmpMetaNS = "adobe:ns:meta/";

        public string? Description { get; set; }
        public List<string> Keywords { get; set; } = new();
        public List<string> Categories { get; set; } = new();
        public string? ExifImageDescription { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImageMetadataService"/> class.
        /// </summary>
        /// <param name="filePath"></param>
        /// <exception cref="ArgumentNullException"></exception>
        public ImageMetadataService(string filePath)
        {
            _filePath = filePath ?? throw new ArgumentNullException(nameof(filePath));
        }

        /// <summary>
        /// Reads the image metadata from the specified file.
        /// </summary>
        public void Read()
        {
            _image?.Dispose();
            _image = new MagickImage(_filePath);

            _exifProfile = _image.GetExifProfile();
            _iptcProfile = _image.GetIptcProfile();
            _xmpProfile = _image.GetXmpProfile();

            PopulateMainProperties();
        }

        /// <summary>
        /// Saves the image metadata to the specified file.
        /// </summary>
        /// <exception cref="InvalidOperationException"></exception>
        public void Save()
        {
            if (_image == null)
                throw new InvalidOperationException("Image has not been read. Call Read() first.");

            UpdateMainProperties();

            if (_exifProfile is { Values.Count: > 0 })
                _image.SetProfile(_exifProfile);
            else
                _image.RemoveProfile("exif");

            if (_iptcProfile is { Values.Count: > 0 })
                _image.SetProfile(_iptcProfile);
            else
                _image.RemoveProfile("iptc");

            if (_xmpProfile != null)
            {
                var xdoc = TryGetXmpDocument(_xmpProfile);
                var rdfDesc = xdoc?.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description");

                bool hasContent = rdfDesc?.Elements().Any(el =>
                    el.Name.Namespace != XmpMetaNS &&
                    el.Name.Namespace != RdfNS &&
                    !el.Name.LocalName.StartsWith("xmlns", StringComparison.Ordinal)) ?? false;

                if (hasContent)
                    _image.SetProfile(_xmpProfile);
                else
                    _image.RemoveProfile("xmp");
            }

            _image.Write(_filePath);
        }

        /// <summary>
        /// Populates the metadata properties from the parsed Ollama content.
        /// </summary>
        /// <param name="content"></param>
        public void PopulateFromOllamaContent(ParsedOllamaContent content)
        {
            Description = content.Description;
            Keywords = new List<string>(content.Keywords);
            Categories = new List<string>(content.Categories);
            ExifImageDescription = content.Description;
        }

        /// <summary>
        /// Populates the main properties from the XMP, IPTC, and EXIF profiles.
        /// </summary>
        private void PopulateMainProperties()
        {
            Description = GetXmpSimpleString(DcNS + "description")
                          ?? GetIptcSingleValue(IptcTag.Caption)
                          ?? GetExifStringValue(ExifTag.ImageDescription);

            ExifImageDescription = GetExifStringValue(ExifTag.ImageDescription);

            Keywords = GetIptcMultipleValues(IptcTag.Keyword)
                .Concat(GetXmpBag(DcNS + "subject"))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();

            Categories = GetXmpBag(DcNS + "type");
        }

        /// <summary>
        /// Updates the main properties in the XMP, IPTC, and EXIF profiles.
        /// </summary>
        private void UpdateMainProperties()
        {
            SetXmpSimpleString(DcNS + "description", Description);
            SetIptcSingleValue(IptcTag.Caption, Description);
            SetExifStringValue(ExifTag.ImageDescription, ExifImageDescription);
            SetIptcMultipleValues(IptcTag.Keyword, Keywords);
            SetXmpBag(DcNS + "subject", Keywords);
            SetXmpBag(DcNS + "type", Categories);
        }

        /// <summary>
        /// Gets the EXIF string value for the specified tag identifier.
        /// </summary>
        /// <param name="tagIdentifier"></param>
        /// <returns></returns>
        private string? GetExifStringValue(ExifTag tagIdentifier)
        {
            if (_exifProfile == null) return null;

            if (tagIdentifier == ExifTag.ImageDescription)
                return _exifProfile.GetValue(ExifTag<string>.ImageDescription)?.Value;

            return null;
        }

        /// <summary>
        /// Sets the EXIF string value for the specified tag identifier.
        /// </summary>
        /// <param name="tagIdentifier"></param>
        /// <param name="value"></param>
        private void SetExifStringValue(ExifTag tagIdentifier, string? value)
        {
            if (tagIdentifier != ExifTag.ImageDescription) return;

            _exifProfile ??= new ExifProfile();

            if (string.IsNullOrEmpty(value))
                _exifProfile.RemoveValue(ExifTag<string>.ImageDescription);
            else
                _exifProfile.SetValue(ExifTag<string>.ImageDescription, value);
        }

        /// <summary>
        /// Gets the IPTC single value for the specified tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <returns></returns>
        private string? GetIptcSingleValue(IptcTag tag)
        {
            return _iptcProfile?.Values.FirstOrDefault(v => v.Tag == tag)?.Value;
        }

        /// <summary>
        ///     Gets the IPTC multiple values for the specified tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <returns></returns>
        private List<string> GetIptcMultipleValues(IptcTag tag)
        {
            return _iptcProfile?.Values
                       .Where(v => v.Tag == tag && !string.IsNullOrEmpty(v.Value))
                       .Select(v => v.Value)
                       .ToList() ?? new List<string>();
        }

        /// <summary>
        /// Sets the IPTC single value for the specified tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <param name="value"></param>
        private void SetIptcSingleValue(IptcTag tag, string? value)
        {
            if (string.IsNullOrEmpty(value)) return;

            _iptcProfile ??= new IptcProfile();
            _iptcProfile.RemoveValue(tag);
            _iptcProfile.SetValue(tag, value);
        }

        /// <summary>
        /// Sets the IPTC multiple values for the specified tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <param name="values"></param>
        private void SetIptcMultipleValues(IptcTag tag, List<string> values)
        {
            if (values == null || values.All(string.IsNullOrWhiteSpace)) return;

            _iptcProfile ??= new IptcProfile();
            _iptcProfile.RemoveValue(tag);

            foreach (var val in values.Where(s => !string.IsNullOrWhiteSpace(s)))
                _iptcProfile.SetValue(tag, val);
        }

        /// <summary>
        ///     Tries to get the XMP document from the profile.
        /// </summary>
        /// <param name="profile"></param>
        /// <returns></returns>
        private XDocument? TryGetXmpDocument(IXmpProfile? profile)
        {
            try { return profile?.ToXDocument(); }
            catch (Exception ex) { Console.WriteLine($"Failed to parse XMP: {ex.Message}"); return null; }
        }

        /// <summary>
        /// Creates a new XMP document if it doesn't exist.
        /// </summary>
        /// <returns></returns>
        private XDocument GetOrCreateXmpDocument()
        {
            var xdoc = TryGetXmpDocument(_xmpProfile);
            if (xdoc != null) return xdoc;

            var newDoc = new XDocument(
                new XElement(XmpMetaNS + "xmpmeta",
                    new XAttribute(XNamespace.Xmlns + "x", XmpMetaNS.NamespaceName),
                    new XElement(RdfNS + "RDF",
                        new XAttribute(XNamespace.Xmlns + "rdf", RdfNS.NamespaceName),
                        new XElement(RdfNS + "Description",
                            new XAttribute(RdfNS + "about", ""),
                            new XAttribute(XNamespace.Xmlns + "dc", DcNS.NamespaceName)))));

            try { _xmpProfile = XmpProfile.FromXDocument(newDoc); }
            catch (Exception ex) { Console.WriteLine($"Failed to create XMP profile: {ex.Message}"); }

            return newDoc;
        }

        /// <summary>
        /// Updates the XMP profile from the XDocument.
        /// </summary>
        /// <param name="xdoc"></param>
        private void UpdateXmpProfileFromDocument(XDocument xdoc)
        {
            try { _xmpProfile = XmpProfile.FromXDocument(xdoc); }
            catch (Exception ex) { Console.WriteLine($"Failed to update XMP profile: {ex.Message}"); }
        }

        /// <summary>
        /// Gets or creates the RDF description element in the XMP document.
        /// </summary>
        /// <param name="xdoc"></param>
        /// <returns></returns>
        private static XElement GetOrCreateRdfDescription(XDocument xdoc)
        {
            var root = xdoc.Root ?? new XElement(XmpMetaNS + "xmpmeta");
            if (xdoc.Root == null) xdoc.Add(root);

            var rdf = root.Element(RdfNS + "RDF") ?? new XElement(RdfNS + "RDF");
            if (root.Element(RdfNS + "RDF") == null) root.Add(rdf);

            var desc = rdf.Element(RdfNS + "Description") ?? new XElement(RdfNS + "Description");
            if (rdf.Element(RdfNS + "Description") == null) rdf.Add(desc);

            if (desc.Attribute(XNamespace.Xmlns + "dc") == null)
                desc.SetAttributeValue(XNamespace.Xmlns + "dc", DcNS.NamespaceName);

            return desc;
        }

        /// <summary>
        /// Gets the XMP simple string value for the specified tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <returns></returns>
        private string? GetXmpSimpleString(XName tag)
        {
            var xdoc = TryGetXmpDocument(_xmpProfile ?? _image?.GetXmpProfile());
            if (xdoc == null) return null;

            var rdf = xdoc.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description");
            var element = rdf?.Element(tag);

            if (element != null) return element.Value;

            if (tag == DcNS + "description")
                return rdf?.Element(tag)?.Element(RdfNS + "Alt")?.Elements(RdfNS + "li")
                    .FirstOrDefault(li => (string?)li.Attribute(XNamespace.Xml + "lang") == "x-default")?.Value;

            return null;
        }

        /// <summary>
        /// Sets the XMP simple string value for the specified tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <param name="value"></param>
        private void SetXmpSimpleString(XName tag, string? value)
        {
            var xdoc = GetOrCreateXmpDocument();
            var desc = GetOrCreateRdfDescription(xdoc);

            desc.Element(tag)?.Remove();

            if (!string.IsNullOrEmpty(value))
            {
                if (tag == DcNS + "description")
                {
                    desc.Add(new XElement(tag,
                        new XElement(RdfNS + "Alt",
                            new XElement(RdfNS + "li", value, new XAttribute(XNamespace.Xml + "lang", "x-default")))));
                }
                else
                {
                    desc.Add(new XElement(tag, value));
                }
            }

            UpdateXmpProfileFromDocument(xdoc);
        }

        /// <summary>
        /// Gets the XMP bag (multiple values) for the specified tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <returns></returns>
        private List<string> GetXmpBag(XName tag)
        {
            var xdoc = TryGetXmpDocument(_xmpProfile ?? _image?.GetXmpProfile());
            var bag = xdoc?.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description")?.Element(tag)?.Element(RdfNS + "Bag");

            return bag?.Elements(RdfNS + "li").Select(li => li.Value).ToList() ?? new List<string>();
        }

        /// <summary>
        /// Sets the XMP bag (multiple values) for the specified tag.
        /// </summary>
        /// <param name="tag"></param>
        /// <param name="values"></param>
        private void SetXmpBag(XName tag, List<string> values)
        {
            if (values == null || values.All(string.IsNullOrWhiteSpace)) return;

            var xdoc = GetOrCreateXmpDocument();
            var desc = GetOrCreateRdfDescription(xdoc);
            desc.Element(tag)?.Remove();

            var bag = new XElement(RdfNS + "Bag");
            foreach (var val in values.Where(s => !string.IsNullOrWhiteSpace(s)))
                bag.Add(new XElement(RdfNS + "li", val));

            desc.Add(new XElement(tag, bag));
            UpdateXmpProfileFromDocument(xdoc);
        }

        private bool _disposed;
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed && disposing)
                _image?.Dispose();
            _disposed = true;
        }
        ~ImageMetadataService() => Dispose(false);
    }
}

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\Services\ImageMetadataWriter.cs">
<![CDATA[
// DaminionOllamaWpfApp/Services/ImageMetadataWriter.cs
using ImageMagick;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
// using System.Xml.Linq; // We'll simplify XMP and might not need direct XDocument manipulation for now
using DaminionOllamaInteractionLib.Ollama;

namespace DaminionOllamaInteractionLib.Services
{
    /// <summary>
    /// Handles writing metadata to images using ImageMagick.
    /// </summary>
    public static class ImageMetadataWriter
    {
        /// <summary>
        /// Writes metadata to an image file.
        /// </summary>
        /// <param name="imagePath"></param>
        /// <param name="ollamaContent"></param>
        /// <returns></returns>
        public static bool WriteMetadataToImage(string imagePath, ParsedOllamaContent ollamaContent)
        {
            if (string.IsNullOrEmpty(imagePath) || !File.Exists(imagePath) || ollamaContent == null)
            {
                Console.Error.WriteLine("[ImageMetadataWriter] Error: Invalid image path or Ollama content.");
                return false;
            }

            try
            {
                Console.WriteLine($"[ImageMetadataWriter] Attempting to write metadata to: {imagePath}");

                using (MagickImage image = new MagickImage(imagePath))
                {
                    bool changesMadeToImage = false;

                    // --- IPTC Profile ---
                    IIptcProfile? iptcProfile = image.GetIptcProfile(); // Gets existing or returns null
                    bool iptcProfileWasNewlyCreated = false;

                    // Create a new profile only if there's actual content to write and no profile exists
                    if (iptcProfile == null &&
                        (!string.IsNullOrWhiteSpace(ollamaContent.Description) || ollamaContent.Keywords.Any() || ollamaContent.Categories.Any()))
                    {
                        Console.WriteLine("[ImageMetadataWriter] No IPTC profile found, creating a new one.");
                        iptcProfile = new IptcProfile();
                        iptcProfileWasNewlyCreated = true;
                    }

                    if (iptcProfile != null)
                    {
                        bool currentIptcProfileChanged = false;
                        if (!string.IsNullOrWhiteSpace(ollamaContent.Description))
                        {
                            iptcProfile.SetValue(IptcTag.Caption, ollamaContent.Description);
                            Console.WriteLine($"[ImageMetadataWriter] Set IPTC Caption.");
                            currentIptcProfileChanged = true;
                        }

                        if (ollamaContent.Keywords.Any())
                        {
                            iptcProfile.RemoveValue(IptcTag.Keyword);
                            foreach (string keyword in ollamaContent.Keywords.Where(k => !string.IsNullOrWhiteSpace(k)))
                            {
                                iptcProfile.SetValue(IptcTag.Keyword, keyword);
                            }
                            Console.WriteLine($"[ImageMetadataWriter] Set IPTC Keywords.");
                            currentIptcProfileChanged = true;
                        }

                        if (ollamaContent.Categories.Any())
                        {
                            iptcProfile.RemoveValue(IptcTag.Category);
                            foreach (string category in ollamaContent.Categories.Where(c => !string.IsNullOrWhiteSpace(c)))
                            {
                                iptcProfile.SetValue(IptcTag.Category, category);
                            }
                            Console.WriteLine($"[ImageMetadataWriter] Set IPTC Categories.");
                            currentIptcProfileChanged = true;
                        }

                        if (currentIptcProfileChanged || iptcProfileWasNewlyCreated)
                        {
                            image.SetProfile(iptcProfile);
                            changesMadeToImage = true;
                        }
                    }

                    // --- Simplified XMP Profile Handling ---
                    // We will only try to add a new XMP profile with a description if one doesn't exist
                    // and if there's a description to add.
                    // Modifying existing complex XMP is deferred.
                    if (!string.IsNullOrWhiteSpace(ollamaContent.Description))
                    {
                        IXmpProfile? xmpProfile = image.GetXmpProfile();
                        if (xmpProfile == null)
                        {
                            Console.WriteLine("[ImageMetadataWriter] No XMP profile found. Attempting to create a new one for description.");
                            // Create a minimal XMP packet string that includes dc:description
                            // Ensure namespaces are correctly defined and used.
                            string minimalXmpPacket = $@"<?xpacket begin="""" id=""W5M0MpCehiHzreSzNTczkc9d""?>
<x:xmpmeta xmlns:x=""adobe:ns:meta/"" x:xmptk=""ImageMagick"">
  <rdf:RDF xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"">
    <rdf:Description rdf:about="""" xmlns:dc=""http://purl.org/dc/elements/1.1/"">
      <dc:description>
        <rdf:Alt>
          <rdf:li xml:lang=""x-default"">{System.Security.SecurityElement.Escape(ollamaContent.Description)}</rdf:li>
        </rdf:Alt>
      </dc:description>
    </rdf:Description>
  </rdf:RDF>
</x:xmpmeta>
<?xpacket end=""w""?>";
                            try
                            {
                                xmpProfile = new XmpProfile(minimalXmpPacket); // Create from string
                                image.SetProfile(xmpProfile); // Use SetProfile to add it
                                changesMadeToImage = true;
                                Console.WriteLine("[ImageMetadataWriter] Added new XMP profile with dc:description.");
                            }
                            catch (Exception ex)
                            {
                                Console.Error.WriteLine($"[ImageMetadataWriter] Error creating or setting new XMP profile: {ex.Message}");
                            }
                        }
                        else
                        {
                            Console.WriteLine("[ImageMetadataWriter] Existing XMP profile found. Advanced modification of existing XMP is not implemented in this simplified version.");
                            // If you wanted to *modify* existing XMP, you would use:
                            // byte[]? xmpData = xmpProfile.ToByteArray(); // Corrected from GetData()
                            // if (xmpData != null) { /* Parse with XDocument, modify, create new XmpProfile(modifiedBytes), image.SetProfile() */ }
                        }
                    }


                    if (changesMadeToImage)
                    {
                        Console.WriteLine($"[ImageMetadataWriter] Writing changes to {imagePath}");
                        image.Write(imagePath);
                        Console.WriteLine($"[ImageMetadataWriter] Successfully wrote metadata changes to {imagePath}");
                        return true;
                    }
                    else
                    {
                        Console.WriteLine($"[ImageMetadataWriter] No new metadata changes to write to {imagePath}");
                        return true;
                    }
                }
            }
            catch (MagickException magickEx)
            {
                Console.Error.WriteLine($"[ImageMetadataWriter] Magick.NET error writing metadata to {imagePath}: {magickEx.Message}\n{magickEx.StackTrace}");
                return false;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[ImageMetadataWriter] General error writing metadata to {imagePath}: {ex.Message}\n{ex.StackTrace}");
                return false;
            }
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\DaminionApiClient.cs">
<![CDATA[
// DaminionOllamaInteractionLib/DaminionApiClient.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json; // Required for JsonSerializer and JsonException
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using DaminionOllamaInteractionLib.Daminion;
using DaminionOllamaInteractionLib.Ollama; // For Daminion DTOs

namespace DaminionOllamaInteractionLib
{
    /// <summary>
    /// Represents a client for interacting with the Daminion API.
    /// </summary>
    public class DaminionApiClient : IDisposable
    {
        private readonly HttpClient _httpClient;
        private string? _apiBaseUrl;
        private string? _authenticationCookie;

        /// <summary>
        /// Initializes a new instance of the <see cref="DaminionApiClient"/> class.
        /// </summary>
        public DaminionApiClient()
        {
            _httpClient = new HttpClient();
            _httpClient.Timeout = TimeSpan.FromSeconds(60);
            Console.WriteLine("[DaminionApiClient] Initialized.");
        }

        /// <summary>
        /// Checks if the Ollama server is running and reachable.
        /// </summary>
        /// <returns>True if the server responds positively, false otherwise.</returns>
        public async Task<bool> CheckConnectionAsync()
        {
            if (string.IsNullOrWhiteSpace(_apiBaseUrl))
            {
                Console.Error.WriteLine("[OllamaApiClient] CheckConnection Error: API base URL is not set.");
                return false;
            }

            // Ollama's root endpoint typically returns "Ollama is running" with a 200 OK.
            string healthCheckUrl = _apiBaseUrl; // Or a specific health check endpoint like /api/ps or similar if available
            Console.WriteLine($"[OllamaApiClient] Checking Ollama connection at: {healthCheckUrl}");

            try
            {
                // Use a shorter timeout for a simple connection check
                using (var tempHttpClient = new HttpClient { Timeout = TimeSpan.FromSeconds(5) })
                {
                    HttpResponseMessage response = await tempHttpClient.GetAsync(healthCheckUrl);
                    Console.WriteLine($"[OllamaApiClient] Connection check response status: {response.StatusCode}");
                    //string responseBody = await response.Content.ReadAsStringAsync();
                    //Console.WriteLine($"[OllamaApiClient] Connection check response body: {responseBody}");
                    return response.IsSuccessStatusCode; // Or check for specific content if needed
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[OllamaApiClient] Error checking Ollama connection: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Lists local models available on the Ollama server using the /api/tags endpoint.
        /// </summary>
        /// <returns>An OllamaListTagsResponse containing the list of models, or null if an error occurs.</returns>
        public async Task<OllamaListTagsResponse?> ListLocalModelsAsync()
        {
            if (string.IsNullOrWhiteSpace(_apiBaseUrl))
            {
                Console.Error.WriteLine("[OllamaApiClient] ListLocalModels Error: API base URL is not set.");
                return null;
            }

            string listModelsUrl = $"{_apiBaseUrl}/api/tags";
            Console.WriteLine($"[OllamaApiClient] Listing Ollama models from: {listModelsUrl}");

            try
            {
                // _httpClient is the class member HttpClient, already configured
                HttpResponseMessage response = await _httpClient.GetAsync(listModelsUrl);
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[OllamaApiClient] ListLocalModels Response Status Code: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    OllamaListTagsResponse? listResponse = null;
                    try
                    {
                        listResponse = JsonSerializer.Deserialize<OllamaListTagsResponse>(responseBody,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true }); // Ollama sometimes uses snake_case
                    }
                    catch (JsonException jsonEx)
                    {
                        Console.Error.WriteLine($"[OllamaApiClient] Error deserializing ListLocalModels response: {jsonEx.Message}. Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                        return null; // Or a response object indicating failure
                    }

                    if (listResponse != null)
                    {
                        Console.WriteLine($"[OllamaApiClient] Successfully fetched {listResponse.Models?.Count ?? 0} local models.");
                    }
                    else
                    {
                        Console.Error.WriteLine($"[OllamaApiClient] ListLocalModels deserialization resulted in null object. Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    }
                    return listResponse;
                }
                else
                {
                    Console.Error.WriteLine($"[OllamaApiClient] ListLocalModels HTTP call failed. Status: {response.StatusCode}, Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    return null; // Or a response object indicating failure
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[OllamaApiClient] An unexpected error occurred during ListLocalModels: {ex.Message}");
                return null; // Or a response object indicating failure
            }
        }

        public bool IsAuthenticated => !string.IsNullOrEmpty(_authenticationCookie);

        public async Task<bool> LoginAsync(string daminionServerUrl, string username, string password)
        {
            Console.WriteLine("[DaminionApiClient] Attempting LoginAsync...");

            if (string.IsNullOrWhiteSpace(daminionServerUrl))
            {
                Console.Error.WriteLine("[DaminionApiClient] Login Error: Daminion server URL cannot be empty.");
                throw new ArgumentException("Daminion server URL cannot be empty.", nameof(daminionServerUrl));
            }
            if (string.IsNullOrWhiteSpace(username))
            {
                Console.Error.WriteLine("[DaminionApiClient] Login Error: Username cannot be empty.");
                throw new ArgumentException("Username cannot be empty.", nameof(username));
            }
            // Password can be empty if Daminion allows it.

            _apiBaseUrl = daminionServerUrl.TrimEnd('/');
            string loginUrl = $"{_apiBaseUrl}/account/login";
            Console.WriteLine($"[DaminionApiClient] Login URL: {loginUrl}");

            var loginRequest = new LoginRequest { UsernameOrEmailAddress = username, Password = password };
            string jsonRequest = "";
            try
            {
                jsonRequest = JsonSerializer.Serialize(loginRequest);
                // WARNING: Logging passwords is a security risk. For temporary debugging only.
                Console.WriteLine($"[DaminionApiClient] Login Request Payload (JSON): {jsonRequest} <-- CONTAINS SENSITIVE DATA");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] Error serializing login request: {ex.Message}");
                throw;
            }

            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            try
            {
                _httpClient.DefaultRequestHeaders.Remove("Cookie");
                _authenticationCookie = null;

                Console.WriteLine($"[DaminionApiClient] Sending POST request to {loginUrl}...");
                HttpResponseMessage response = await _httpClient.PostAsync(loginUrl, content);
                string responseBody = await response.Content.ReadAsStringAsync();

                Console.WriteLine($"[DaminionApiClient] Login Response Status Code: {response.StatusCode} ({response.ReasonPhrase})");
                Console.WriteLine($"[DaminionApiClient] Login Response Headers: {response.Headers.ToString().Trim()}");
                Console.WriteLine($"[DaminionApiClient] Login Response Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 1000))}");

                if (response.IsSuccessStatusCode)
                {
                    if (response.Headers.TryGetValues("Set-Cookie", out IEnumerable<string>? cookieValues))
                    {

                        _authenticationCookie = cookieValues.FirstOrDefault(c => c.StartsWith(".AspNet.ApplicationCookie=", StringComparison.OrdinalIgnoreCase));
                        if (!string.IsNullOrEmpty(_authenticationCookie))
                        {
                            _authenticationCookie = _authenticationCookie.Split(';')[0];
                            _httpClient.DefaultRequestHeaders.Add("Cookie", _authenticationCookie);
                            Console.WriteLine($"[DaminionApiClient] Authentication cookie found and applied: {_authenticationCookie.Substring(0, Math.Min(_authenticationCookie.Length, 50))}...");
                            return true;
                        }
                        else
                        {
                            Console.Error.WriteLine("[DaminionApiClient] Login HTTP call successful, but 'AspNet.ApplicationCookie' not found in 'Set-Cookie' header.");
                            _authenticationCookie = null;
                            return false;
                        }
                    }
                    else
                    {
                        Console.Error.WriteLine("[DaminionApiClient] Login HTTP call successful, but 'Set-Cookie' header was not found in the response.");
                        _authenticationCookie = null;
                        return false;
                    }
                }
                else
                {
                    Console.Error.WriteLine($"[DaminionApiClient] Login HTTP call failed. Full Response Body: {responseBody}");
                    _authenticationCookie = null;
                    return false;
                }
            }
            catch (HttpRequestException ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] HTTP request error during login to {loginUrl}: {ex.Message}");
                if (ex.InnerException != null) { Console.Error.WriteLine($"[DaminionApiClient] Inner Exception: {ex.InnerException.Message}"); }
                Console.Error.WriteLine($"[DaminionApiClient] HttpRequestException StackTrace: {ex.StackTrace}");
                _authenticationCookie = null;
                throw;
            }
            catch (TaskCanceledException ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] Login request to {loginUrl} timed out after {_httpClient.Timeout.TotalSeconds} seconds: {ex.Message}");
                if (ex.InnerException != null) { Console.Error.WriteLine($"[DaminionApiClient] Inner Exception (Timeout): {ex.InnerException.Message}"); }
                _authenticationCookie = null;
                throw new HttpRequestException($"Login request timed out. Timeout: {_httpClient.Timeout.TotalSeconds}s.", ex);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] An unexpected error occurred during login: {ex.Message}");
                if (ex.InnerException != null) { Console.Error.WriteLine($"[DaminionApiClient] Inner Exception: {ex.InnerException.Message}"); }
                Console.Error.WriteLine($"[DaminionApiClient] Exception StackTrace: {ex.StackTrace}");
                _authenticationCookie = null;
                throw;
            }
        }

        /// <summary>
        /// Asynchronously retrieves the list of tags from the Daminion server.
        /// </summary>
        /// <returns></returns>
        // Inside DaminionApiClient class in DaminionOllamaInteractionLib project

        // Ensure the return type is Task<DaminionGetTagsResponse?>
        public async Task<DaminionGetTagsResponse?> GetTagsAsync()
        {
            Console.WriteLine("[DaminionApiClient] Attempting GetTagsAsync...");
            if (!IsAuthenticated || string.IsNullOrEmpty(_apiBaseUrl))
            {
                Console.Error.WriteLine("[DaminionApiClient] GetTags Error: Client is not authenticated or API base URL is not set.");
                // Return the response object with error details
                return new DaminionGetTagsResponse { Success = false, Error = "Not authenticated or API base URL not set." };
            }

            string tagsUrl = $"{_apiBaseUrl}/api/settings/getTags";
            Console.WriteLine($"[DaminionApiClient] GetTags URL: {tagsUrl}");
            try
            {
                _httpClient.DefaultRequestHeaders.Accept.Clear();
                _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _httpClient.GetAsync(tagsUrl);
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[DaminionApiClient] GetTags Response Status Code: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    DaminionGetTagsResponse? getTagsResponse = null;
                    try
                    {
                        getTagsResponse = JsonSerializer.Deserialize<DaminionGetTagsResponse>(responseBody);
                    }
                    catch (JsonException jsonEx)
                    {
                        Console.Error.WriteLine($"[DaminionApiClient] Error deserializing GetTags response: {jsonEx.Message}. Body: {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                        // Return the response object with error details
                        return new DaminionGetTagsResponse { Success = false, Error = $"JSON Deserialization error: {jsonEx.Message}" };
                    }

                    // Return the entire DaminionGetTagsResponse object
                    if (getTagsResponse != null) // Check if deserialization was successful
                    {
                        if (getTagsResponse.Success)
                        {
                            Console.WriteLine($"[DaminionApiClient] Successfully fetched {getTagsResponse.Data?.Count ?? 0} tags.");
                        }
                        else
                        {
                            Console.Error.WriteLine($"[DaminionApiClient] GetTags API call reported failure or bad data. Success: {getTagsResponse.Success}, Error: {getTagsResponse.Error}, Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                        }
                        return getTagsResponse;
                    }
                    else
                    {
                        // Should not happen if deserialization didn't throw, but as a fallback
                        Console.Error.WriteLine($"[DaminionApiClient] GetTags deserialization resulted in null object. Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                        return new DaminionGetTagsResponse { Success = false, Error = "Deserialization resulted in null object." };
                    }
                }
                else
                {
                    Console.Error.WriteLine($"[DaminionApiClient] GetTags HTTP call failed. Status: {response.StatusCode}, Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    // Return the response object with error details
                    return new DaminionGetTagsResponse { Success = false, Error = $"HTTP Error: {response.StatusCode}" };
                }
            }
            catch (HttpRequestException ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] HTTP request error during GetTags: {ex.Message}");
                return new DaminionGetTagsResponse { Success = false, Error = $"HTTP Request Exception: {ex.Message}" };
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] An unexpected error occurred during GetTags: {ex.Message}");
                return new DaminionGetTagsResponse { Success = false, Error = $"Unexpected Exception: {ex.Message}" };
            }
        }
        /// <summary>
        /// Asynchronously retrieves the absolute paths of media items from the Daminion server.
        /// </summary>
        /// <param name="itemIds"></param>
        /// <returns></returns>
        public async Task<DaminionPathResult> GetAbsolutePathsAsync(List<long> itemIds)
        {
            Console.WriteLine($"[DaminionApiClient] Attempting GetAbsolutePathsAsync for {itemIds?.Count} items...");
            var result = new DaminionPathResult { Success = false, Paths = new Dictionary<string, string>() };
            if (!IsAuthenticated || string.IsNullOrEmpty(_apiBaseUrl))
            {
                result.ErrorMessage = "Client is not authenticated or API base URL is not set.";
                Console.Error.WriteLine($"[DaminionApiClient] GetAbsolutePaths Error: {result.ErrorMessage}");
                return result;
            }
            if (itemIds == null || !itemIds.Any())
            {
                result.ErrorMessage = "Item IDs list cannot be null or empty.";
                Console.Error.WriteLine($"[DaminionApiClient] GetAbsolutePaths Error: {result.ErrorMessage}");
                return result;
            }

            string idsQueryParam = string.Join(",", itemIds);
            string pathsUrl = $"{_apiBaseUrl}/api/mediaItems/getAbsolutePaths?ids={idsQueryParam}";
            Console.WriteLine($"[DaminionApiClient] GetAbsolutePaths URL: {pathsUrl}");

            try
            {
                _httpClient.DefaultRequestHeaders.Accept.Clear();
                _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _httpClient.GetAsync(pathsUrl);
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[DaminionApiClient] GetAbsolutePaths Response Status Code: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    Dictionary<string, string>? paths = null;
                    try
                    {
                        paths = JsonSerializer.Deserialize<Dictionary<string, string>>(responseBody);
                    }
                    catch (System.Text.Json.JsonException ex)
                    {
                        Console.Error.WriteLine($"[DaminionApiClient] Failed to deserialize paths directly: {ex.Message}. Body(snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                        result.ErrorMessage = $"Failed to deserialize paths response: {ex.Message}";
                    }

                    if (paths != null && paths.Any())
                    {
                        result.Paths = paths;
                        result.Success = true;
                        Console.WriteLine($"[DaminionApiClient] Successfully fetched {paths.Count} absolute paths.");
                    }
                    else if (string.IsNullOrEmpty(result.ErrorMessage))
                    {
                        result.ErrorMessage = "Successfully called API for paths, but no paths data was returned or parsed correctly.";
                        Console.Error.WriteLine($"[DaminionApiClient] {result.ErrorMessage} Body(snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    }
                    return result;
                }
                else
                {
                    result.ErrorMessage = $"API call for paths failed. Status: {response.StatusCode}";
                    Console.Error.WriteLine($"[DaminionApiClient] {result.ErrorMessage} Body(snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    return result;
                }
            }
            catch (Exception ex)
            {
                result.ErrorMessage = $"Error getting absolute paths: {ex.Message}";
                Console.Error.WriteLine($"[DaminionApiClient] GetAbsolutePaths Exception: {ex.Message} StackTrace: {ex.StackTrace}");
                return result;
            }
        }

        /// <summary>
        /// Searches for media items in Daminion based on a queryLine and operators (f parameter).
        /// Corresponds to Daminion API endpoint GET /api/mediaItems/get.
        /// </summary>
        /// <param name="queryLine">Search conditions separated by a semicolon[cite: 69]. Optional[cite: 70].</param>
        /// <param name="f_operators">Logical operators separated by a semicolon (the 'f' parameter)[cite: 71]. Optional[cite: 72].</param>
        /// <param name="pageSize">Page size. Can take positive integer values from 0 to 1000[cite: 73]. Optional, defaults to 0 if not specified[cite: 74].</param>
        /// <param name="pageIndex">The serial number of the requested page[cite: 75]. Optional, defaults to 0 if not specified[cite: 76].</param>
        /// <returns>A DaminionSearchMediaItemsResponse containing the media items or an error.</returns>
        public async Task<DaminionSearchMediaItemsResponse?> SearchMediaItemsAsync(
            string? queryLine = null, // Made queryLine nullable as it's optional
            string? f_operators = null,
            int pageSize = 100, // Defaulting to a reasonable page size
            int pageIndex = 0)
        {
            Console.WriteLine($"[DaminionApiClient] Attempting SearchMediaItemsAsync with queryLine: '{queryLine}' and f_operators: '{f_operators}'");
            if (!IsAuthenticated || string.IsNullOrEmpty(_apiBaseUrl))
            {
                Console.Error.WriteLine("[DaminionApiClient] SearchMediaItems Error: Client is not authenticated or API base URL is not set.");
                return new DaminionSearchMediaItemsResponse { Success = false, Error = "Client not authenticated." };
            }

            var queryParams = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(queryLine))
            {
                queryParams.Add("queryLine", queryLine); // [cite: 69]
            }
            if (!string.IsNullOrEmpty(f_operators))
            {
                queryParams.Add("f", f_operators); // [cite: 71]
            }
            // API doc says page size 0-1000[cite: 73].
            // If not specified, page size is 0[cite: 74], which might mean "all" or "default", be cautious.
            // For robust pagination, always specify a positive page size if you expect many results.
            queryParams.Add("size", pageSize.ToString()); // [cite: 73]
            queryParams.Add("index", pageIndex.ToString()); // [cite: 75]
                                                            // sortTag and sort parameters are also available if needed [cite: 77, 79]

            string queryString = await new FormUrlEncodedContent(queryParams).ReadAsStringAsync();
            string searchUrl = $"{_apiBaseUrl}/api/mediaItems/get?{queryString}"; // [cite: 69]
            Console.WriteLine($"[DaminionApiClient] SearchMediaItems URL: {searchUrl}");

            try
            {
                _httpClient.DefaultRequestHeaders.Accept.Clear();
                _httpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _httpClient.GetAsync(searchUrl);
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[DaminionApiClient] SearchMediaItems Response Status Code: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    DaminionSearchMediaItemsResponse? searchResponse = null;
                    try
                    {
                        searchResponse = System.Text.Json.JsonSerializer.Deserialize<DaminionSearchMediaItemsResponse>(responseBody);
                    }
                    catch (System.Text.Json.JsonException jsonEx)
                    {
                        Console.Error.WriteLine($"[DaminionApiClient] Error deserializing SearchMediaItems response: {jsonEx.Message}. Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                        return new DaminionSearchMediaItemsResponse { Success = false, Error = $"JSON Deserialization error: {jsonEx.Message}" };
                    }

                    if (searchResponse != null && searchResponse.Success) // [cite: 83]
                    {
                        Console.WriteLine($"[DaminionApiClient] Successfully fetched {searchResponse.MediaItems?.Count ?? 0} media items.");
                        return searchResponse; // [cite: 83]
                    }
                    else
                    {
                        string errorMsg = searchResponse?.Error ?? "API call reported failure or bad data."; // [cite: 82]
                        Console.Error.WriteLine($"[DaminionApiClient] SearchMediaItems API call failed or returned unsuccessful. Success: {searchResponse?.Success}, Error: {errorMsg}, Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                        return new DaminionSearchMediaItemsResponse { Success = false, Error = errorMsg, MediaItems = searchResponse?.MediaItems };
                    }
                }
                else
                {
                    Console.Error.WriteLine($"[DaminionApiClient] SearchMediaItems HTTP call failed. Status: {response.StatusCode}, Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    return new DaminionSearchMediaItemsResponse { Success = false, Error = $"HTTP Error: {response.StatusCode}" };
                }
            }
            catch (System.Net.Http.HttpRequestException ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] HTTP request error during SearchMediaItems: {ex.Message}");
                return new DaminionSearchMediaItemsResponse { Success = false, Error = $"HTTP Request Exception: {ex.Message}" };
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] An unexpected error occurred during SearchMediaItems: {ex.Message}");
                return new DaminionSearchMediaItemsResponse { Success = false, Error = $"Unexpected Exception: {ex.Message}" };
            }
        }


        /// <summary>
        /// Asynchronously updates the metadata of items in Daminion.
        /// </summary>
        /// <param name="itemIds"></param>
        /// <param name="operations"></param>
        /// <returns></returns>
        public async Task<DaminionBatchChangeResponse?> UpdateItemMetadataAsync(List<long> itemIds, List<DaminionUpdateOperation> operations)
        {
            Console.WriteLine($"[DaminionApiClient] Attempting UpdateItemMetadataAsync for {itemIds?.Count} items with {operations?.Count} operations...");
            if (!IsAuthenticated || string.IsNullOrEmpty(_apiBaseUrl))
            {
                Console.Error.WriteLine("[DaminionApiClient] UpdateItemMetadata Error: Client is not authenticated or API base URL is not set.");
                return new DaminionBatchChangeResponse { Success = false, Error = "Not authenticated." };
            }
            if (itemIds == null || !itemIds.Any() || operations == null || !operations.Any())
            {
                Console.Error.WriteLine("[DaminionApiClient] UpdateItemMetadata Error: Item IDs and operations list cannot be null or empty.");
                return new DaminionBatchChangeResponse { Success = false, Error = "Item IDs or operations missing." };
            }

            string updateUrl = $"{_apiBaseUrl}/api/itemData/batchChange";
            Console.WriteLine($"[DaminionApiClient] UpdateItemMetadata URL: {updateUrl}");
            var requestPayload = new DaminionBatchChangeRequest
            {
                Ids = itemIds,
                Data = operations
            };

            string jsonRequest = "";
            try
            {
                jsonRequest = JsonSerializer.Serialize(requestPayload);
                Console.WriteLine($"[DaminionApiClient] UpdateItemMetadata Request Payload (snippet): {jsonRequest.Substring(0, Math.Min(jsonRequest.Length, 500))}...");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] Error serializing update metadata request: {ex.Message}");
                return new DaminionBatchChangeResponse { Success = false, Error = $"Serialization error: {ex.Message}" };
            }
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            try
            {
                HttpResponseMessage response = await _httpClient.PostAsync(updateUrl, content);
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[DaminionApiClient] UpdateItemMetadata Response Status Code: {response.StatusCode}");

                DaminionBatchChangeResponse? batchChangeResponse = null;
                try
                {
                    batchChangeResponse = JsonSerializer.Deserialize<DaminionBatchChangeResponse>(responseBody);
                }
                catch (System.Text.Json.JsonException jsonEx)
                {
                    Console.Error.WriteLine($"[DaminionApiClient] Error deserializing batchChange response: {jsonEx.Message}. Body(snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    if (response.IsSuccessStatusCode) return new DaminionBatchChangeResponse { Success = true, Error = "Response was not valid JSON, but HTTP status was success." };
                    return new DaminionBatchChangeResponse { Success = false, Error = $"JSON Deserialization error: {jsonEx.Message}" };
                }

                if (batchChangeResponse == null)
                {
                    if (response.IsSuccessStatusCode && string.IsNullOrWhiteSpace(responseBody))
                    {
                        Console.WriteLine("[DaminionApiClient] UpdateItemMetadata returned success status with empty body. Assuming success.");
                        return new DaminionBatchChangeResponse { Success = true };
                    }
                    Console.Error.WriteLine($"[DaminionApiClient] Failed to deserialize batchChange response or response object was null. Status: {response.StatusCode}, Body(snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    return new DaminionBatchChangeResponse { Success = false, Error = $"Failed to deserialize response or null object. Status: {response.StatusCode}" };
                }

                if (!batchChangeResponse.Success)
                {
                    Console.Error.WriteLine($"[DaminionApiClient] UpdateItemMetadata operation reported failure. Error: {batchChangeResponse.Error}. Body(snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                }
                else
                {
                    Console.WriteLine("[DaminionApiClient] UpdateItemMetadata reported success.");
                }
                return batchChangeResponse;
            }
            catch (HttpRequestException httpEx)
            {
                Console.Error.WriteLine($"[DaminionApiClient] HTTP request error updating item metadata: {httpEx.Message}");
                throw;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] An unexpected error occurred updating item metadata: {ex.Message}");
                return new DaminionBatchChangeResponse { Success = false, Error = $"Exception: {ex.Message}" };
            }
        }

        public void Dispose()
        {
            _httpClient?.Dispose();
            GC.SuppressFinalize(this);
        }

        // Inside DaminionApiClient class

        /// <summary>
        /// Asynchronously retrieves the values for a specified indexed tag from the Daminion server.
        /// </summary>
        /// <param name="indexedTagId">ID of the tag whose values should be found. [cite: 23]</param>
        /// <param name="pageSize">Page size (positive integer, max 2,147,483,647). [cite: 24]</param>
        /// <param name="pageIndex">Page serial number (0 to 2,147,483,647). [cite: 25]</param>
        /// <param name="parentValueId">Limits search level. 0 for root, -2 for thorough search, or specific parent tag value ID. [cite: 26]</param>
        /// <param name="filter">Case-insensitive search string to filter values. [cite: 27]</param>
        /// <returns>A DaminionGetTagValuesResponse containing the tag values or an error.</returns>
        public async Task<DaminionGetTagValuesResponse?> GetTagValuesAsync(
            long indexedTagId,
            int pageSize = 100, // Default page size
            int pageIndex = 0,
            long parentValueId = 0, // Default to root level [cite: 26]
            string filter = "")
        {
            Console.WriteLine($"[DaminionApiClient] Attempting GetTagValuesAsync for tag ID: {indexedTagId}...");
            if (!IsAuthenticated || string.IsNullOrEmpty(_apiBaseUrl))
            {
                Console.Error.WriteLine("[DaminionApiClient] GetTagValues Error: Client is not authenticated or API base URL is not set.");
                return new DaminionGetTagValuesResponse { Success = false, Error = "Client not authenticated." };
            }

            // Construct the query parameters
            var queryParams = new Dictionary<string, string>
    {
        { "indexedTagId", indexedTagId.ToString() },
        { "pageSize", pageSize.ToString() },
        { "pageIndex", pageIndex.ToString() },
        { "parentValueId", parentValueId.ToString() }
    };
            if (!string.IsNullOrEmpty(filter))
            {
                queryParams.Add("filter", filter);
            }

            string queryString = await new FormUrlEncodedContent(queryParams).ReadAsStringAsync();
            string getTagValuesUrl = $"{_apiBaseUrl}/api/indexedTagValues/getIndexedTagValues?{queryString}";
    Console.WriteLine($"[DaminionApiClient] GetTagValues URL: {getTagValuesUrl}");

            try
            {
                _httpClient.DefaultRequestHeaders.Accept.Clear();
                _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _httpClient.GetAsync(getTagValuesUrl);
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[DaminionApiClient] GetTagValues Response Status Code: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    DaminionGetTagValuesResponse? getValuesResponse = null;
                    try
                    {
                        getValuesResponse = JsonSerializer.Deserialize<DaminionGetTagValuesResponse>(responseBody);
                    }
                    catch (JsonException jsonEx)
                    {
                        Console.Error.WriteLine($"[DaminionApiClient] Error deserializing GetTagValues response: {jsonEx.Message}. Body: {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                        return new DaminionGetTagValuesResponse { Success = false, Error = $"JSON Deserialization error: {jsonEx.Message}" };
                    }

                    if (getValuesResponse != null && getValuesResponse.Success)
                    {
                        Console.WriteLine($"[DaminionApiClient] Successfully fetched {getValuesResponse.Values?.Count ?? 0} tag values for tag ID {indexedTagId}.");
                        return getValuesResponse;
                    }
                    else
                    {
                        string errorMsg = getValuesResponse?.Error ?? "API call reported failure or bad data.";
                        Console.Error.WriteLine($"[DaminionApiClient] GetTagValues API call failed or returned unsuccessful. Success: {getValuesResponse?.Success}, Error: {errorMsg}, Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                        return new DaminionGetTagValuesResponse { Success = false, Error = errorMsg, Values = getValuesResponse?.Values /* preserve values if any */ };
                    }
                }
                else
                {
                    Console.Error.WriteLine($"[DaminionApiClient] GetTagValues HTTP call failed. Status: {response.StatusCode}, Body (snippet): {responseBody.Substring(0, Math.Min(responseBody.Length, 500))}");
                    return new DaminionGetTagValuesResponse { Success = false, Error = $"HTTP Error: {response.StatusCode}" };
                }
            }
            catch (HttpRequestException ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] HTTP request error during GetTagValues: {ex.Message}");
                return new DaminionGetTagValuesResponse { Success = false, Error = $"HTTP Request Exception: {ex.Message}" };
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[DaminionApiClient] An unexpected error occurred during GetTagValues: {ex.Message}");
                return new DaminionGetTagValuesResponse { Success = false, Error = $"Unexpected Exception: {ex.Message}" };
            }
        }

    }

    /// <summary>
    /// Represents the request payload for logging in to Daminion.
    /// </summary>
    internal class LoginRequest
    {
        [JsonPropertyName("usernameOrEmailAddress")]
        public string UsernameOrEmailAddress { get; set; } = string.Empty;

        [JsonPropertyName("password")]
        public string Password { get; set; } = string.Empty;
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaInteractionLib\DaminionOllamaInteractionLib.csproj">
<![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Magick.NET-Q16-AnyCPU" Version="14.6.0" />
  </ItemGroup>

</Project>

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Debug\net8.0-windows\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs">
<![CDATA[
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Debug\net8.0-windows\App.g.cs">
<![CDATA[
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "FF7DB100D784CE3EAF95014FF36B63666EB51513"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaWpfApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms.Integration;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaWpfApp {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public static void Main() {
            DaminionOllamaWpfApp.App app = new DaminionOllamaWpfApp.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Debug\net8.0-windows\BatchProcessWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\BatchProcessWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1653E9F30E652455D58500D572164F31D3A382B7"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaWpfApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms.Integration;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaWpfApp {
    
    
    /// <summary>
    /// BatchProcessWindow
    /// </summary>
    public partial class BatchProcessWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 18 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabControl BatchModeTabControl;
        
        #line default
        #line hidden
        
        
        #line 19 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabItem LocalFolderTab;
        
        #line default
        #line hidden
        
        
        #line 34 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox LocalFolderPathTextBox;
        
        #line default
        #line hidden
        
        
        #line 35 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button BrowseFolderButton;
        
        #line default
        #line hidden
        
        
        #line 38 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox FileExtensionsTextBox;
        
        #line default
        #line hidden
        
        
        #line 40 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.CheckBox IncludeSubfoldersCheckBox;
        
        #line default
        #line hidden
        
        
        #line 44 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabItem DaminionBatchTab;
        
        #line default
        #line hidden
        
        
        #line 55 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox DaminionCollectionTextBox;
        
        #line default
        #line hidden
        
        
        #line 61 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button StartBatchButton;
        
        #line default
        #line hidden
        
        
        #line 62 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button StopBatchButton;
        
        #line default
        #line hidden
        
        
        #line 66 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ProgressBar BatchProgressBar;
        
        #line default
        #line hidden
        
        
        #line 70 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ResultsListView;
        
        #line default
        #line hidden
        
        
        #line 82 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock OverallStatusTextBlock;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaWpfApp;component/batchprocesswindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\BatchProcessWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.BatchModeTabControl = ((System.Windows.Controls.TabControl)(target));
            return;
            case 2:
            this.LocalFolderTab = ((System.Windows.Controls.TabItem)(target));
            return;
            case 3:
            this.LocalFolderPathTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 4:
            this.BrowseFolderButton = ((System.Windows.Controls.Button)(target));
            
            #line 35 "..\..\..\BatchProcessWindow.xaml"
            this.BrowseFolderButton.Click += new System.Windows.RoutedEventHandler(this.BrowseFolderButton_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            this.FileExtensionsTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 6:
            this.IncludeSubfoldersCheckBox = ((System.Windows.Controls.CheckBox)(target));
            return;
            case 7:
            this.DaminionBatchTab = ((System.Windows.Controls.TabItem)(target));
            return;
            case 8:
            this.DaminionCollectionTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 9:
            this.StartBatchButton = ((System.Windows.Controls.Button)(target));
            
            #line 61 "..\..\..\BatchProcessWindow.xaml"
            this.StartBatchButton.Click += new System.Windows.RoutedEventHandler(this.StartBatchButton_Click);
            
            #line default
            #line hidden
            return;
            case 10:
            this.StopBatchButton = ((System.Windows.Controls.Button)(target));
            
            #line 62 "..\..\..\BatchProcessWindow.xaml"
            this.StopBatchButton.Click += new System.Windows.RoutedEventHandler(this.StopBatchButton_Click);
            
            #line default
            #line hidden
            return;
            case 11:
            this.BatchProgressBar = ((System.Windows.Controls.ProgressBar)(target));
            return;
            case 12:
            this.ResultsListView = ((System.Windows.Controls.ListView)(target));
            return;
            case 13:
            this.OverallStatusTextBlock = ((System.Windows.Controls.TextBlock)(target));
            return;
            }
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Debug\net8.0-windows\DaminionOllamaWpfApp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaWpfApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7e6fec4546ae6195e485009c8044edf76e6c87a2")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaWpfApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaWpfApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Debug\net8.0-windows\DaminionOllamaWpfApp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Drawing;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::System.Windows.Forms;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Debug\net8.0-windows\MainWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8D480D1A80A0246589789015077789149495BDD9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaWpfApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms.Integration;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaWpfApp {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 34 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox DaminionUrlTextBox;
        
        #line default
        #line hidden
        
        
        #line 37 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox UsernameTextBox;
        
        #line default
        #line hidden
        
        
        #line 40 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox PasswordBox;
        
        #line default
        #line hidden
        
        
        #line 42 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button LoginButton;
        
        #line default
        #line hidden
        
        
        #line 43 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button FetchTagsButton;
        
        #line default
        #line hidden
        
        
        #line 48 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox OllamaUrlTextBox;
        
        #line default
        #line hidden
        
        
        #line 51 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox OllamaModelTextBox;
        
        #line default
        #line hidden
        
        
        #line 54 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox OllamaPromptTextBox;
        
        #line default
        #line hidden
        
        
        #line 56 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button TestOllamaButton;
        
        #line default
        #line hidden
        
        
        #line 61 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox DaminionItemIdTextBox;
        
        #line default
        #line hidden
        
        
        #line 63 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button StartProcessingButton;
        
        #line default
        #line hidden
        
        
        #line 65 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button OpenBatchWindowButton;
        
        #line default
        #line hidden
        
        
        #line 69 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock StatusTextBlock;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaWpfApp;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.DaminionUrlTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 2:
            this.UsernameTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 3:
            this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            return;
            case 4:
            this.LoginButton = ((System.Windows.Controls.Button)(target));
            
            #line 42 "..\..\..\MainWindow.xaml"
            this.LoginButton.Click += new System.Windows.RoutedEventHandler(this.LoginButton_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            this.FetchTagsButton = ((System.Windows.Controls.Button)(target));
            
            #line 43 "..\..\..\MainWindow.xaml"
            this.FetchTagsButton.Click += new System.Windows.RoutedEventHandler(this.FetchTagsButton_Click);
            
            #line default
            #line hidden
            return;
            case 6:
            this.OllamaUrlTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 7:
            this.OllamaModelTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 8:
            this.OllamaPromptTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 9:
            this.TestOllamaButton = ((System.Windows.Controls.Button)(target));
            
            #line 56 "..\..\..\MainWindow.xaml"
            this.TestOllamaButton.Click += new System.Windows.RoutedEventHandler(this.TestOllamaButton_Click);
            
            #line default
            #line hidden
            return;
            case 10:
            this.DaminionItemIdTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 11:
            this.StartProcessingButton = ((System.Windows.Controls.Button)(target));
            
            #line 63 "..\..\..\MainWindow.xaml"
            this.StartProcessingButton.Click += new System.Windows.RoutedEventHandler(this.StartProcessingButton_Click);
            
            #line default
            #line hidden
            return;
            case 12:
            this.OpenBatchWindowButton = ((System.Windows.Controls.Button)(target));
            
            #line 65 "..\..\..\MainWindow.xaml"
            this.OpenBatchWindowButton.Click += new System.Windows.RoutedEventHandler(this.OpenBatchWindowButton_Click);
            
            #line default
            #line hidden
            return;
            case 13:
            this.StatusTextBlock = ((System.Windows.Controls.TextBlock)(target));
            return;
            }
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Release\net8.0-windows\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs">
<![CDATA[
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Release\net8.0-windows\App.g.cs">
<![CDATA[
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "FF7DB100D784CE3EAF95014FF36B63666EB51513"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaWpfApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms.Integration;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaWpfApp {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public static void Main() {
            DaminionOllamaWpfApp.App app = new DaminionOllamaWpfApp.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Release\net8.0-windows\BatchProcessWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\BatchProcessWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1653E9F30E652455D58500D572164F31D3A382B7"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaWpfApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms.Integration;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaWpfApp {
    
    
    /// <summary>
    /// BatchProcessWindow
    /// </summary>
    public partial class BatchProcessWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 18 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabControl BatchModeTabControl;
        
        #line default
        #line hidden
        
        
        #line 19 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabItem LocalFolderTab;
        
        #line default
        #line hidden
        
        
        #line 34 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox LocalFolderPathTextBox;
        
        #line default
        #line hidden
        
        
        #line 35 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button BrowseFolderButton;
        
        #line default
        #line hidden
        
        
        #line 38 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox FileExtensionsTextBox;
        
        #line default
        #line hidden
        
        
        #line 40 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.CheckBox IncludeSubfoldersCheckBox;
        
        #line default
        #line hidden
        
        
        #line 44 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabItem DaminionBatchTab;
        
        #line default
        #line hidden
        
        
        #line 55 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox DaminionCollectionTextBox;
        
        #line default
        #line hidden
        
        
        #line 61 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button StartBatchButton;
        
        #line default
        #line hidden
        
        
        #line 62 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button StopBatchButton;
        
        #line default
        #line hidden
        
        
        #line 66 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ProgressBar BatchProgressBar;
        
        #line default
        #line hidden
        
        
        #line 70 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ResultsListView;
        
        #line default
        #line hidden
        
        
        #line 82 "..\..\..\BatchProcessWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock OverallStatusTextBlock;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaWpfApp;component/batchprocesswindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\BatchProcessWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.BatchModeTabControl = ((System.Windows.Controls.TabControl)(target));
            return;
            case 2:
            this.LocalFolderTab = ((System.Windows.Controls.TabItem)(target));
            return;
            case 3:
            this.LocalFolderPathTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 4:
            this.BrowseFolderButton = ((System.Windows.Controls.Button)(target));
            
            #line 35 "..\..\..\BatchProcessWindow.xaml"
            this.BrowseFolderButton.Click += new System.Windows.RoutedEventHandler(this.BrowseFolderButton_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            this.FileExtensionsTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 6:
            this.IncludeSubfoldersCheckBox = ((System.Windows.Controls.CheckBox)(target));
            return;
            case 7:
            this.DaminionBatchTab = ((System.Windows.Controls.TabItem)(target));
            return;
            case 8:
            this.DaminionCollectionTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 9:
            this.StartBatchButton = ((System.Windows.Controls.Button)(target));
            
            #line 61 "..\..\..\BatchProcessWindow.xaml"
            this.StartBatchButton.Click += new System.Windows.RoutedEventHandler(this.StartBatchButton_Click);
            
            #line default
            #line hidden
            return;
            case 10:
            this.StopBatchButton = ((System.Windows.Controls.Button)(target));
            
            #line 62 "..\..\..\BatchProcessWindow.xaml"
            this.StopBatchButton.Click += new System.Windows.RoutedEventHandler(this.StopBatchButton_Click);
            
            #line default
            #line hidden
            return;
            case 11:
            this.BatchProgressBar = ((System.Windows.Controls.ProgressBar)(target));
            return;
            case 12:
            this.ResultsListView = ((System.Windows.Controls.ListView)(target));
            return;
            case 13:
            this.OverallStatusTextBlock = ((System.Windows.Controls.TextBlock)(target));
            return;
            }
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Release\net8.0-windows\DaminionOllamaWpfApp.AssemblyInfo.cs">
<![CDATA[
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DaminionOllamaWpfApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+7e6fec4546ae6195e485009c8044edf76e6c87a2")]
[assembly: System.Reflection.AssemblyProductAttribute("DaminionOllamaWpfApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("DaminionOllamaWpfApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Release\net8.0-windows\DaminionOllamaWpfApp.GlobalUsings.g.cs">
<![CDATA[
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Drawing;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::System.Windows.Forms;

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\obj\Release\net8.0-windows\MainWindow.g.cs">
<![CDATA[
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8D480D1A80A0246589789015077789149495BDD9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DaminionOllamaWpfApp;
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms.Integration;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace DaminionOllamaWpfApp {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 34 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox DaminionUrlTextBox;
        
        #line default
        #line hidden
        
        
        #line 37 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox UsernameTextBox;
        
        #line default
        #line hidden
        
        
        #line 40 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox PasswordBox;
        
        #line default
        #line hidden
        
        
        #line 42 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button LoginButton;
        
        #line default
        #line hidden
        
        
        #line 43 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button FetchTagsButton;
        
        #line default
        #line hidden
        
        
        #line 48 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox OllamaUrlTextBox;
        
        #line default
        #line hidden
        
        
        #line 51 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox OllamaModelTextBox;
        
        #line default
        #line hidden
        
        
        #line 54 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox OllamaPromptTextBox;
        
        #line default
        #line hidden
        
        
        #line 56 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button TestOllamaButton;
        
        #line default
        #line hidden
        
        
        #line 61 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox DaminionItemIdTextBox;
        
        #line default
        #line hidden
        
        
        #line 63 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button StartProcessingButton;
        
        #line default
        #line hidden
        
        
        #line 65 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Button OpenBatchWindowButton;
        
        #line default
        #line hidden
        
        
        #line 69 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock StatusTextBlock;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/DaminionOllamaWpfApp;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.6.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.DaminionUrlTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 2:
            this.UsernameTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 3:
            this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            return;
            case 4:
            this.LoginButton = ((System.Windows.Controls.Button)(target));
            
            #line 42 "..\..\..\MainWindow.xaml"
            this.LoginButton.Click += new System.Windows.RoutedEventHandler(this.LoginButton_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            this.FetchTagsButton = ((System.Windows.Controls.Button)(target));
            
            #line 43 "..\..\..\MainWindow.xaml"
            this.FetchTagsButton.Click += new System.Windows.RoutedEventHandler(this.FetchTagsButton_Click);
            
            #line default
            #line hidden
            return;
            case 6:
            this.OllamaUrlTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 7:
            this.OllamaModelTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 8:
            this.OllamaPromptTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 9:
            this.TestOllamaButton = ((System.Windows.Controls.Button)(target));
            
            #line 56 "..\..\..\MainWindow.xaml"
            this.TestOllamaButton.Click += new System.Windows.RoutedEventHandler(this.TestOllamaButton_Click);
            
            #line default
            #line hidden
            return;
            case 10:
            this.DaminionItemIdTextBox = ((System.Windows.Controls.TextBox)(target));
            return;
            case 11:
            this.StartProcessingButton = ((System.Windows.Controls.Button)(target));
            
            #line 63 "..\..\..\MainWindow.xaml"
            this.StartProcessingButton.Click += new System.Windows.RoutedEventHandler(this.StartProcessingButton_Click);
            
            #line default
            #line hidden
            return;
            case 12:
            this.OpenBatchWindowButton = ((System.Windows.Controls.Button)(target));
            
            #line 65 "..\..\..\MainWindow.xaml"
            this.OpenBatchWindowButton.Click += new System.Windows.RoutedEventHandler(this.OpenBatchWindowButton_Click);
            
            #line default
            #line hidden
            return;
            case 13:
            this.StatusTextBlock = ((System.Windows.Controls.TextBlock)(target));
            return;
            }
            this._contentLoaded = true;
        }
    }
}


]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\Services\ImageMetadataEditor.cs">
<![CDATA[
using System;
using System.Collections.Generic;
using System.Linq;
using ImageMagick;
using System.Xml.Linq;

namespace DaminionOllamaInteractionLib.Services
{
    public class ImageMetadataEditor : IDisposable
    {
        private readonly string _filePath;
        private MagickImage? _image;
        private IExifProfile? _exifProfile;
        private IIptcProfile? _iptcProfile;
        private IXmpProfile? _xmpProfile;

        private static readonly XNamespace RdfNS = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
        private static readonly XNamespace DcNS = "http://purl.org/dc/elements/1.1/";
        private static readonly XNamespace XmpMetaNS = "adobe:ns:meta/";

        public ImageMetadataEditor(string filePath)
        {
            _filePath = filePath ?? throw new ArgumentNullException(nameof(filePath));
        }

        public void Read()
        {
            _image?.Dispose();
            _image = new MagickImage(_filePath);

            _exifProfile = _image.GetExifProfile();
            _iptcProfile = _image.GetIptcProfile();
            _xmpProfile = _image.GetXmpProfile();

            PopulateMainProperties();
        }

        public void Save()
        {
            if (_image == null)
                throw new InvalidOperationException("Image has not been read. Call Read() first.");

            UpdateMainProperties();

            if (_exifProfile is { Values.Count: > 0 })
                _image.SetProfile(_exifProfile);
            else
                _image.RemoveProfile("exif");

            if (_iptcProfile is { Values.Count: > 0 })
                _image.SetProfile(_iptcProfile);
            else
                _image.RemoveProfile("iptc");

            if (_xmpProfile != null)
            {
                var xdoc = TryGetXmpDocument(_xmpProfile);
                var rdfDesc = xdoc?.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description");

                bool hasContent = rdfDesc?.Elements().Any(el =>
                    el.Name.Namespace != XmpMetaNS &&
                    el.Name.Namespace != RdfNS &&
                    !el.Name.LocalName.StartsWith("xmlns", StringComparison.Ordinal)) ?? false;

                if (hasContent)
                    _image.SetProfile(_xmpProfile);
                else
                    _image.RemoveProfile("xmp");
            }

            _image.Write(_filePath);
        }

        public string? Description { get; set; }
        public List<string> Keywords { get; set; } = new();
        public List<string> Categories { get; set; } = new();
        public string? ExifImageDescription { get; set; }

        private void PopulateMainProperties()
        {
            Description = GetXmpSimpleString(DcNS + "description")
                          ?? GetIptcSingleValue(IptcTag.Caption)
                          ?? GetExifStringValue(ExifTag.ImageDescription);

            ExifImageDescription = GetExifStringValue(ExifTag.ImageDescription);

            Keywords = GetIptcMultipleValues(IptcTag.Keyword)
                .Concat(GetXmpBag(DcNS + "subject"))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();

            Categories = GetXmpBag(DcNS + "type");
        }

        private void UpdateMainProperties()
        {
            SetXmpSimpleString(DcNS + "description", Description);
            SetIptcSingleValue(IptcTag.Caption, Description);
            SetExifStringValue(ExifTag.ImageDescription, ExifImageDescription);
            SetIptcMultipleValues(IptcTag.Keyword, Keywords);
            SetXmpBag(DcNS + "subject", Keywords);
            SetXmpBag(DcNS + "type", Categories);
        }

        private string? GetExifStringValue(ExifTag tagIdentifier)
        {
            if (_exifProfile == null) return null;

            if (tagIdentifier == ExifTag.ImageDescription)
                return _exifProfile.GetValue(ExifTag<string>.ImageDescription)?.Value;

            Console.WriteLine($"EXIF tag {tagIdentifier} not supported.");
            return null;
        }

        private void SetExifStringValue(ExifTag tagIdentifier, string? value)
        {
            if (tagIdentifier != ExifTag.ImageDescription) return;

            _exifProfile ??= new ExifProfile();

            if (string.IsNullOrEmpty(value))
                _exifProfile.RemoveValue(ExifTag<string>.ImageDescription);
            else
                _exifProfile.SetValue(ExifTag<string>.ImageDescription, value);
        }

        private string? GetIptcSingleValue(IptcTag tag)
        {
            return _iptcProfile?.Values.FirstOrDefault(v => v.Tag == tag)?.Value;
        }

        private List<string> GetIptcMultipleValues(IptcTag tag)
        {
            return _iptcProfile?.Values
                       .Where(v => v.Tag == tag && !string.IsNullOrEmpty(v.Value))
                       .Select(v => v.Value)
                       .ToList() ?? new List<string>();
        }

        private void SetIptcSingleValue(IptcTag tag, string? value)
        {
            if (string.IsNullOrEmpty(value)) return;

            _iptcProfile ??= new IptcProfile();
            _iptcProfile.RemoveValue(tag);
            _iptcProfile.SetValue(tag, value);
        }

        private void SetIptcMultipleValues(IptcTag tag, List<string> values)
        {
            if (values == null || values.All(string.IsNullOrWhiteSpace)) return;

            _iptcProfile ??= new IptcProfile();
            _iptcProfile.RemoveValue(tag);

            foreach (var val in values.Where(s => !string.IsNullOrWhiteSpace(s)))
                _iptcProfile.SetValue(tag, val);
        }

        private XDocument? TryGetXmpDocument(IXmpProfile? profile)
        {
            try { return profile?.ToXDocument(); }
            catch (Exception ex) { Console.WriteLine($"Failed to parse XMP: {ex.Message}"); return null; }
        }

        private XDocument GetOrCreateXmpDocument()
        {
            var xdoc = TryGetXmpDocument(_xmpProfile);
            if (xdoc != null) return xdoc;

            var newDoc = new XDocument(
                new XElement(XmpMetaNS + "xmpmeta",
                    new XAttribute(XNamespace.Xmlns + "x", XmpMetaNS.NamespaceName),
                    new XElement(RdfNS + "RDF",
                        new XAttribute(XNamespace.Xmlns + "rdf", RdfNS.NamespaceName),
                        new XElement(RdfNS + "Description",
                            new XAttribute(RdfNS + "about", ""),
                            new XAttribute(XNamespace.Xmlns + "dc", DcNS.NamespaceName)))));

            try { _xmpProfile = XmpProfile.FromXDocument(newDoc); }
            catch (Exception ex) { Console.WriteLine($"Failed to create XMP profile: {ex.Message}"); }

            return newDoc;
        }

        private void UpdateXmpProfileFromDocument(XDocument xdoc)
        {
            try { _xmpProfile = XmpProfile.FromXDocument(xdoc); }
            catch (Exception ex) { Console.WriteLine($"Failed to update XMP profile: {ex.Message}"); }
        }

        private static XElement GetOrCreateRdfDescription(XDocument xdoc)
        {
            var root = xdoc.Root ?? new XElement(XmpMetaNS + "xmpmeta");
            if (xdoc.Root == null) xdoc.Add(root);

            var rdf = root.Element(RdfNS + "RDF") ?? new XElement(RdfNS + "RDF");
            if (root.Element(RdfNS + "RDF") == null) root.Add(rdf);

            var desc = rdf.Element(RdfNS + "Description") ?? new XElement(RdfNS + "Description");
            if (rdf.Element(RdfNS + "Description") == null) rdf.Add(desc);

            if (desc.Attribute(XNamespace.Xmlns + "dc") == null)
                desc.SetAttributeValue(XNamespace.Xmlns + "dc", DcNS.NamespaceName);

            return desc;
        }

        private string? GetXmpSimpleString(XName tag)
        {
            var xdoc = TryGetXmpDocument(_xmpProfile ?? _image?.GetXmpProfile());
            if (xdoc == null) return null;

            var rdf = xdoc.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description");
            var element = rdf?.Element(tag);

            if (element != null) return element.Value;

            if (tag == DcNS + "description")
                return rdf?.Element(tag)?.Element(RdfNS + "Alt")?.Elements(RdfNS + "li")
                    .FirstOrDefault(li => (string?)li.Attribute(XNamespace.Xml + "lang") == "x-default")?.Value;

            return null;
        }

        private void SetXmpSimpleString(XName tag, string? value)
        {
            var xdoc = GetOrCreateXmpDocument();
            var desc = GetOrCreateRdfDescription(xdoc);

            desc.Element(tag)?.Remove();

            if (!string.IsNullOrEmpty(value))
            {
                if (tag == DcNS + "description")
                {
                    desc.Add(new XElement(tag,
                        new XElement(RdfNS + "Alt",
                            new XElement(RdfNS + "li", value, new XAttribute(XNamespace.Xml + "lang", "x-default")))));
                }
                else
                {
                    desc.Add(new XElement(tag, value));
                }
            }

            UpdateXmpProfileFromDocument(xdoc);
        }

        private List<string> GetXmpBag(XName tag)
        {
            var xdoc = TryGetXmpDocument(_xmpProfile ?? _image?.GetXmpProfile());
            var bag = xdoc?.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description")?.Element(tag)?.Element(RdfNS + "Bag");

            return bag?.Elements(RdfNS + "li").Select(li => li.Value).ToList() ?? new List<string>();
        }

        private void SetXmpBag(XName tag, List<string> values)
        {
            if (values == null || values.All(string.IsNullOrWhiteSpace)) return;

            var xdoc = GetOrCreateXmpDocument();
            var desc = GetOrCreateRdfDescription(xdoc);
            desc.Element(tag)?.Remove();

            var bag = new XElement(RdfNS + "Bag");
            foreach (var val in values.Where(s => !string.IsNullOrWhiteSpace(s)))
                bag.Add(new XElement(RdfNS + "li", val));

            desc.Add(new XElement(tag, bag));
            UpdateXmpProfileFromDocument(xdoc);
        }

        private bool _disposed;
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed && disposing)
                _image?.Dispose();
            _disposed = true;
        }
        ~ImageMetadataEditor() => Dispose(false);
    }
}

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\Services\ImageMetadataService.cs">
<![CDATA[
// DaminionOllamaWpfApp/Services/ImageMetadataService.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using ImageMagick;
using System.Xml.Linq;
using DaminionOllamaInteractionLib.Ollama;

namespace DaminionOllamaWpfApp.Services
{
    public class ImageMetadataService : IDisposable
    {
        private readonly string _filePath;
        private MagickImage? _image;
        private IExifProfile? _exifProfile;
        private IIptcProfile? _iptcProfile;
        private IXmpProfile? _xmpProfile;

        private static readonly XNamespace RdfNS = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
        private static readonly XNamespace DcNS = "http://purl.org/dc/elements/1.1/";
        private static readonly XNamespace XmpMetaNS = "adobe:ns:meta/";

        public string? Description { get; set; }
        public List<string> Keywords { get; set; } = new();
        public List<string> Categories { get; set; } = new();
        public string? ExifImageDescription { get; set; }

        public ImageMetadataService(string filePath)
        {
            _filePath = filePath ?? throw new ArgumentNullException(nameof(filePath));
        }

        public void Read()
        {
            _image?.Dispose();
            _image = new MagickImage(_filePath);

            _exifProfile = _image.GetExifProfile();
            _iptcProfile = _image.GetIptcProfile();
            _xmpProfile = _image.GetXmpProfile();

            PopulateMainProperties();
        }

        public void Save()
        {
            if (_image == null)
                throw new InvalidOperationException("Image has not been read. Call Read() first.");

            UpdateMainProperties();

            if (_exifProfile is { Values.Count: > 0 })
                _image.SetProfile(_exifProfile);
            else
                _image.RemoveProfile("exif");

            if (_iptcProfile is { Values.Count: > 0 })
                _image.SetProfile(_iptcProfile);
            else
                _image.RemoveProfile("iptc");

            if (_xmpProfile != null)
            {
                var xdoc = TryGetXmpDocument(_xmpProfile);
                var rdfDesc = xdoc?.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description");

                bool hasContent = rdfDesc?.Elements().Any(el =>
                    el.Name.Namespace != XmpMetaNS &&
                    el.Name.Namespace != RdfNS &&
                    !el.Name.LocalName.StartsWith("xmlns", StringComparison.Ordinal)) ?? false;

                if (hasContent)
                    _image.SetProfile(_xmpProfile);
                else
                    _image.RemoveProfile("xmp");
            }

            _image.Write(_filePath);
        }

        public void PopulateFromOllamaContent(ParsedOllamaContent content)
        {
            Description = content.Description;
            Keywords = new List<string>(content.Keywords);
            Categories = new List<string>(content.Categories);
            ExifImageDescription = content.Description;
        }

        private void PopulateMainProperties()
        {
            Description = GetXmpSimpleString(DcNS + "description")
                          ?? GetIptcSingleValue(IptcTag.Caption)
                          ?? GetExifStringValue(ExifTag.ImageDescription);

            ExifImageDescription = GetExifStringValue(ExifTag.ImageDescription);

            Keywords = GetIptcMultipleValues(IptcTag.Keyword)
                .Concat(GetXmpBag(DcNS + "subject"))
                .Distinct(StringComparer.OrdinalIgnoreCase)
                .ToList();

            Categories = GetXmpBag(DcNS + "type");
        }

        private void UpdateMainProperties()
        {
            SetXmpSimpleString(DcNS + "description", Description);
            SetIptcSingleValue(IptcTag.Caption, Description);
            SetExifStringValue(ExifTag.ImageDescription, ExifImageDescription);
            SetIptcMultipleValues(IptcTag.Keyword, Keywords);
            SetXmpBag(DcNS + "subject", Keywords);
            SetXmpBag(DcNS + "type", Categories);
        }

        private string? GetExifStringValue(ExifTag tagIdentifier)
        {
            if (_exifProfile == null) return null;

            if (tagIdentifier == ExifTag.ImageDescription)
                return _exifProfile.GetValue(ExifTag<string>.ImageDescription)?.Value;

            return null;
        }

        private void SetExifStringValue(ExifTag tagIdentifier, string? value)
        {
            if (tagIdentifier != ExifTag.ImageDescription) return;

            _exifProfile ??= new ExifProfile();

            if (string.IsNullOrEmpty(value))
                _exifProfile.RemoveValue(ExifTag<string>.ImageDescription);
            else
                _exifProfile.SetValue(ExifTag<string>.ImageDescription, value);
        }

        private string? GetIptcSingleValue(IptcTag tag)
        {
            return _iptcProfile?.Values.FirstOrDefault(v => v.Tag == tag)?.Value;
        }

        private List<string> GetIptcMultipleValues(IptcTag tag)
        {
            return _iptcProfile?.Values
                       .Where(v => v.Tag == tag && !string.IsNullOrEmpty(v.Value))
                       .Select(v => v.Value)
                       .ToList() ?? new List<string>();
        }

        private void SetIptcSingleValue(IptcTag tag, string? value)
        {
            if (string.IsNullOrEmpty(value)) return;

            _iptcProfile ??= new IptcProfile();
            _iptcProfile.RemoveValue(tag);
            _iptcProfile.SetValue(tag, value);
        }

        private void SetIptcMultipleValues(IptcTag tag, List<string> values)
        {
            if (values == null || values.All(string.IsNullOrWhiteSpace)) return;

            _iptcProfile ??= new IptcProfile();
            _iptcProfile.RemoveValue(tag);

            foreach (var val in values.Where(s => !string.IsNullOrWhiteSpace(s)))
                _iptcProfile.SetValue(tag, val);
        }

        private XDocument? TryGetXmpDocument(IXmpProfile? profile)
        {
            try { return profile?.ToXDocument(); }
            catch (Exception ex) { Console.WriteLine($"Failed to parse XMP: {ex.Message}"); return null; }
        }

        private XDocument GetOrCreateXmpDocument()
        {
            var xdoc = TryGetXmpDocument(_xmpProfile);
            if (xdoc != null) return xdoc;

            var newDoc = new XDocument(
                new XElement(XmpMetaNS + "xmpmeta",
                    new XAttribute(XNamespace.Xmlns + "x", XmpMetaNS.NamespaceName),
                    new XElement(RdfNS + "RDF",
                        new XAttribute(XNamespace.Xmlns + "rdf", RdfNS.NamespaceName),
                        new XElement(RdfNS + "Description",
                            new XAttribute(RdfNS + "about", ""),
                            new XAttribute(XNamespace.Xmlns + "dc", DcNS.NamespaceName)))));

            try { _xmpProfile = XmpProfile.FromXDocument(newDoc); }
            catch (Exception ex) { Console.WriteLine($"Failed to create XMP profile: {ex.Message}"); }

            return newDoc;
        }

        private void UpdateXmpProfileFromDocument(XDocument xdoc)
        {
            try { _xmpProfile = XmpProfile.FromXDocument(xdoc); }
            catch (Exception ex) { Console.WriteLine($"Failed to update XMP profile: {ex.Message}"); }
        }

        private static XElement GetOrCreateRdfDescription(XDocument xdoc)
        {
            var root = xdoc.Root ?? new XElement(XmpMetaNS + "xmpmeta");
            if (xdoc.Root == null) xdoc.Add(root);

            var rdf = root.Element(RdfNS + "RDF") ?? new XElement(RdfNS + "RDF");
            if (root.Element(RdfNS + "RDF") == null) root.Add(rdf);

            var desc = rdf.Element(RdfNS + "Description") ?? new XElement(RdfNS + "Description");
            if (rdf.Element(RdfNS + "Description") == null) rdf.Add(desc);

            if (desc.Attribute(XNamespace.Xmlns + "dc") == null)
                desc.SetAttributeValue(XNamespace.Xmlns + "dc", DcNS.NamespaceName);

            return desc;
        }

        private string? GetXmpSimpleString(XName tag)
        {
            var xdoc = TryGetXmpDocument(_xmpProfile ?? _image?.GetXmpProfile());
            if (xdoc == null) return null;

            var rdf = xdoc.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description");
            var element = rdf?.Element(tag);

            if (element != null) return element.Value;

            if (tag == DcNS + "description")
                return rdf?.Element(tag)?.Element(RdfNS + "Alt")?.Elements(RdfNS + "li")
                    .FirstOrDefault(li => (string?)li.Attribute(XNamespace.Xml + "lang") == "x-default")?.Value;

            return null;
        }

        private void SetXmpSimpleString(XName tag, string? value)
        {
            var xdoc = GetOrCreateXmpDocument();
            var desc = GetOrCreateRdfDescription(xdoc);

            desc.Element(tag)?.Remove();

            if (!string.IsNullOrEmpty(value))
            {
                if (tag == DcNS + "description")
                {
                    desc.Add(new XElement(tag,
                        new XElement(RdfNS + "Alt",
                            new XElement(RdfNS + "li", value, new XAttribute(XNamespace.Xml + "lang", "x-default")))));
                }
                else
                {
                    desc.Add(new XElement(tag, value));
                }
            }

            UpdateXmpProfileFromDocument(xdoc);
        }

        private List<string> GetXmpBag(XName tag)
        {
            var xdoc = TryGetXmpDocument(_xmpProfile ?? _image?.GetXmpProfile());
            var bag = xdoc?.Root?.Element(RdfNS + "RDF")?.Element(RdfNS + "Description")?.Element(tag)?.Element(RdfNS + "Bag");

            return bag?.Elements(RdfNS + "li").Select(li => li.Value).ToList() ?? new List<string>();
        }

        private void SetXmpBag(XName tag, List<string> values)
        {
            if (values == null || values.All(string.IsNullOrWhiteSpace)) return;

            var xdoc = GetOrCreateXmpDocument();
            var desc = GetOrCreateRdfDescription(xdoc);
            desc.Element(tag)?.Remove();

            var bag = new XElement(RdfNS + "Bag");
            foreach (var val in values.Where(s => !string.IsNullOrWhiteSpace(s)))
                bag.Add(new XElement(RdfNS + "li", val));

            desc.Add(new XElement(tag, bag));
            UpdateXmpProfileFromDocument(xdoc);
        }

        private bool _disposed;
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed && disposing)
                _image?.Dispose();
            _disposed = true;
        }
        ~ImageMetadataService() => Dispose(false);
    }
}

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\Services\ImageMetadataWriter.cs">
<![CDATA[
// DaminionOllamaWpfApp/Services/ImageMetadataWriter.cs
using ImageMagick;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
// using System.Xml.Linq; // We'll simplify XMP and might not need direct XDocument manipulation for now
using DaminionOllamaInteractionLib.Ollama;

namespace DaminionOllamaWpfApp.Services
{
    public static class ImageMetadataWriter
    {
        public static bool WriteMetadataToImage(string imagePath, ParsedOllamaContent ollamaContent)
        {
            if (string.IsNullOrEmpty(imagePath) || !File.Exists(imagePath) || ollamaContent == null)
            {
                Console.Error.WriteLine("[ImageMetadataWriter] Error: Invalid image path or Ollama content.");
                return false;
            }

            try
            {
                Console.WriteLine($"[ImageMetadataWriter] Attempting to write metadata to: {imagePath}");

                using (MagickImage image = new MagickImage(imagePath))
                {
                    bool changesMadeToImage = false;

                    // --- IPTC Profile ---
                    IIptcProfile? iptcProfile = image.GetIptcProfile(); // Gets existing or returns null
                    bool iptcProfileWasNewlyCreated = false;

                    // Create a new profile only if there's actual content to write and no profile exists
                    if (iptcProfile == null &&
                        (!string.IsNullOrWhiteSpace(ollamaContent.Description) || ollamaContent.Keywords.Any() || ollamaContent.Categories.Any()))
                    {
                        Console.WriteLine("[ImageMetadataWriter] No IPTC profile found, creating a new one.");
                        iptcProfile = new IptcProfile();
                        iptcProfileWasNewlyCreated = true;
                    }

                    if (iptcProfile != null)
                    {
                        bool currentIptcProfileChanged = false;
                        if (!string.IsNullOrWhiteSpace(ollamaContent.Description))
                        {
                            iptcProfile.SetValue(IptcTag.Caption, ollamaContent.Description);
                            Console.WriteLine($"[ImageMetadataWriter] Set IPTC Caption.");
                            currentIptcProfileChanged = true;
                        }

                        if (ollamaContent.Keywords.Any())
                        {
                            iptcProfile.RemoveValue(IptcTag.Keyword);
                            foreach (string keyword in ollamaContent.Keywords.Where(k => !string.IsNullOrWhiteSpace(k)))
                            {
                                iptcProfile.SetValue(IptcTag.Keyword, keyword);
                            }
                            Console.WriteLine($"[ImageMetadataWriter] Set IPTC Keywords.");
                            currentIptcProfileChanged = true;
                        }

                        if (ollamaContent.Categories.Any())
                        {
                            iptcProfile.RemoveValue(IptcTag.Category);
                            foreach (string category in ollamaContent.Categories.Where(c => !string.IsNullOrWhiteSpace(c)))
                            {
                                iptcProfile.SetValue(IptcTag.Category, category);
                            }
                            Console.WriteLine($"[ImageMetadataWriter] Set IPTC Categories.");
                            currentIptcProfileChanged = true;
                        }

                        if (currentIptcProfileChanged || iptcProfileWasNewlyCreated)
                        {
                            image.SetProfile(iptcProfile);
                            changesMadeToImage = true;
                        }
                    }

                    // --- Simplified XMP Profile Handling ---
                    // We will only try to add a new XMP profile with a description if one doesn't exist
                    // and if there's a description to add.
                    // Modifying existing complex XMP is deferred.
                    if (!string.IsNullOrWhiteSpace(ollamaContent.Description))
                    {
                        IXmpProfile? xmpProfile = image.GetXmpProfile();
                        if (xmpProfile == null)
                        {
                            Console.WriteLine("[ImageMetadataWriter] No XMP profile found. Attempting to create a new one for description.");
                            // Create a minimal XMP packet string that includes dc:description
                            // Ensure namespaces are correctly defined and used.
                            string minimalXmpPacket = $@"<?xpacket begin="""" id=""W5M0MpCehiHzreSzNTczkc9d""?>
<x:xmpmeta xmlns:x=""adobe:ns:meta/"" x:xmptk=""ImageMagick"">
  <rdf:RDF xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"">
    <rdf:Description rdf:about="""" xmlns:dc=""http://purl.org/dc/elements/1.1/"">
      <dc:description>
        <rdf:Alt>
          <rdf:li xml:lang=""x-default"">{System.Security.SecurityElement.Escape(ollamaContent.Description)}</rdf:li>
        </rdf:Alt>
      </dc:description>
    </rdf:Description>
  </rdf:RDF>
</x:xmpmeta>
<?xpacket end=""w""?>";
                            try
                            {
                                xmpProfile = new XmpProfile(minimalXmpPacket); // Create from string
                                image.SetProfile(xmpProfile); // Use SetProfile to add it
                                changesMadeToImage = true;
                                Console.WriteLine("[ImageMetadataWriter] Added new XMP profile with dc:description.");
                            }
                            catch (Exception ex)
                            {
                                Console.Error.WriteLine($"[ImageMetadataWriter] Error creating or setting new XMP profile: {ex.Message}");
                            }
                        }
                        else
                        {
                            Console.WriteLine("[ImageMetadataWriter] Existing XMP profile found. Advanced modification of existing XMP is not implemented in this simplified version.");
                            // If you wanted to *modify* existing XMP, you would use:
                            // byte[]? xmpData = xmpProfile.ToByteArray(); // Corrected from GetData()
                            // if (xmpData != null) { /* Parse with XDocument, modify, create new XmpProfile(modifiedBytes), image.SetProfile() */ }
                        }
                    }


                    if (changesMadeToImage)
                    {
                        Console.WriteLine($"[ImageMetadataWriter] Writing changes to {imagePath}");
                        image.Write(imagePath);
                        Console.WriteLine($"[ImageMetadataWriter] Successfully wrote metadata changes to {imagePath}");
                        return true;
                    }
                    else
                    {
                        Console.WriteLine($"[ImageMetadataWriter] No new metadata changes to write to {imagePath}");
                        return true;
                    }
                }
            }
            catch (MagickException magickEx)
            {
                Console.Error.WriteLine($"[ImageMetadataWriter] Magick.NET error writing metadata to {imagePath}: {magickEx.Message}\n{magickEx.StackTrace}");
                return false;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"[ImageMetadataWriter] General error writing metadata to {imagePath}: {ex.Message}\n{ex.StackTrace}");
                return false;
            }
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\App.xaml">
<![CDATA[
<Application x:Class="DaminionOllamaWpfApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:DaminionOllamaWpfApp"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\App.xaml.cs">
<![CDATA[
using System.Configuration;
using System.Data;
using System.Windows;

namespace DaminionOllamaWpfApp
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : System.Windows.Application
    {
    }

}

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\AssemblyInfo.cs">
<![CDATA[
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\BatchProcessWindow.xaml">
<![CDATA[
<Window x:Class="DaminionOllamaWpfApp.BatchProcessWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DaminionOllamaWpfApp"
        mc:Ignorable="d"
        Title="Batch Metadata Processor" Height="600" Width="800"
        FontFamily="Segoe UI" WindowStartupLocation="CenterScreen">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TabControl x:Name="BatchModeTabControl" Grid.Row="0">
            <TabItem x:Name="LocalFolderTab" Header="Local Folder Batch">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Row="0" Grid.Column="0" Text="Folder Path:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                    <TextBox Grid.Row="0" Grid.Column="1" x:Name="LocalFolderPathTextBox" Margin="0,5" Padding="3"/>
                    <Button Grid.Row="0" Grid.Column="2" x:Name="BrowseFolderButton" Content="Browse..." Margin="5,5,0,5" Padding="10,3" Click="BrowseFolderButton_Click"/>

                    <TextBlock Grid.Row="1" Grid.Column="0" Text="File Extensions:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                    <TextBox Grid.Row="1" Grid.Column="1" x:Name="FileExtensionsTextBox" Margin="0,5" Padding="3" Text="*.jpg;*.jpeg;*.tif;*.tiff;*.png"/>

                    <CheckBox Grid.Row="2" Grid.Column="1" x:Name="IncludeSubfoldersCheckBox" Content="Include Subfolders" Margin="0,5" IsChecked="True"/>

                </Grid>
            </TabItem>
            <TabItem Header="Daminion Collection Batch" x:Name="DaminionBatchTab" IsEnabled="False">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Row="0" Grid.Column="0" Text="Collection ID or Name:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                    <TextBox Grid.Row="0" Grid.Column="1" x:Name="DaminionCollectionTextBox" Margin="0,5" Padding="3"/>
                </Grid>
            </TabItem>
        </TabControl>

        <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,10,0,5">
            <Button x:Name="StartBatchButton" Content="Start Batch Processing" Margin="0,0,10,0" Padding="10,5" Click="StartBatchButton_Click"/>
            <Button x:Name="StopBatchButton" Content="Stop Batch Processing" Padding="10,5" IsEnabled="False" Click="StopBatchButton_Click"/>
        </StackPanel>

        <Grid Grid.Row="1" Margin="0,10,0,5" HorizontalAlignment="Right">
            <ProgressBar x:Name="BatchProgressBar" Width="200" Height="22" Minimum="0" Maximum="100" Value="0" Visibility="Collapsed"/>
        </Grid>


        <ListView x:Name="ResultsListView" Grid.Row="2" Margin="0,5,0,0">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="File Path" Width="400" DisplayMemberBinding="{Binding FilePath}"/>
                    <GridViewColumn Header="Status" Width="150" DisplayMemberBinding="{Binding Status}"/>
                    <GridViewColumn Header="Details" Width="200" DisplayMemberBinding="{Binding Details}"/>
                </GridView>
            </ListView.View>
        </ListView>

        <StatusBar Grid.Row="3" Margin="0,5,0,0">
            <StatusBarItem>
                <TextBlock x:Name="OverallStatusTextBlock" Text="Ready to start batch process."/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\BatchProcessWindow.xaml.cs">
<![CDATA[
// DaminionOllamaWpfApp/BatchProcessWindow.xaml.cs
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;
using System.IO;
// Remove Microsoft.Win32 if OpenFileDialog is no longer used for folder Browse
// using Microsoft.Win32; 

// Add this using statement for FolderBrowserDialog
using System.Windows.Forms; // You'll need to add a reference to System.Windows.Forms.dll

// You will need these later for the actual batch processing logic
using DaminionOllamaInteractionLib.Ollama; // For ParsedOllamaContent
using DaminionOllamaInteractionLib.Services;       // For ImageMetadataService
using System.Threading.Tasks;              // For Task
using System.Threading;                    // For CancellationTokenSource
using System.Linq;                         // For LINQ operations like .Any()

namespace DaminionOllamaWpfApp
{
    public class BatchProcessItem // Consider INotifyPropertyChanged if updating existing items
    {
        public string? FilePath { get; set; }
        public string? Status { get; set; }
        public string? Details { get; set; }
    }

    public partial class BatchProcessWindow : Window
    {
        public ObservableCollection<BatchProcessItem> ProcessResults { get; set; }
        private CancellationTokenSource? _cancellationTokenSource;

        // Assuming you have OllamaApiClient and ImageMetadataService ready to be used
        // You might pass these from MainWindow or initialize them here if needed.
        // For now, we'll assume they are accessible or created within ProcessLocalFolderAsync.
        private OllamaApiClient? _ollamaClient; // Needs to be initialized with URL from MainWindow or config
        // ImageMetadataService is used per file, so instantiated inside the loop.

        public BatchProcessWindow()
        {
            InitializeComponent();
            ProcessResults = new ObservableCollection<BatchProcessItem>();
            ResultsListView.ItemsSource = ProcessResults;
        }

        private void BrowseFolderButton_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                // You can set a description for the dialog
                dialog.Description = "Select a folder containing images to process";
                // You can set the initial selected path if desired
                // if (!string.IsNullOrWhiteSpace(LocalFolderPathTextBox.Text) && Directory.Exists(LocalFolderPathTextBox.Text))
                // {
                //    dialog.SelectedPath = LocalFolderPathTextBox.Text;
                // }

                DialogResult result = dialog.ShowDialog(); // This uses System.Windows.Forms.DialogResult

                if (result == System.Windows.Forms.DialogResult.OK && !string.IsNullOrWhiteSpace(dialog.SelectedPath))
                {
                    LocalFolderPathTextBox.Text = dialog.SelectedPath;
                    Console.WriteLine($"[BatchProcessWindow] Selected folder: {dialog.SelectedPath}");
                }
                else
                {
                    Console.WriteLine("[BatchProcessWindow] Folder selection cancelled or failed.");
                }
            }
        }

        private async void StartBatchButton_Click(object sender, RoutedEventArgs e)
        {
            OverallStatusTextBlock.Text = "Starting batch process...";
            StartBatchButton.IsEnabled = false;
            StopBatchButton.IsEnabled = true;
            BatchProgressBar.Visibility = Visibility.Visible;
            BatchProgressBar.Value = 0;
            ProcessResults.Clear();

            _cancellationTokenSource = new CancellationTokenSource();
            var token = _cancellationTokenSource.Token;

            // Ollama details from MainWindow or dedicated TextBoxes in BatchProcessWindow
            // For this example, I'll assume they might come from MainWindow's TextBoxes
            // This is a simplification; you'd ideally have dedicated input fields in BatchProcessWindow
            // or pass these settings when creating BatchProcessWindow.
            string ollamaUrl = System.Windows.Application.Current.MainWindow is MainWindow mw ? mw.OllamaUrlTextBox.Text : "http://localhost:11434";
            string modelName = System.Windows.Application.Current.MainWindow is MainWindow mw2 ? mw2.OllamaModelTextBox.Text : "llava";
            string prompt = System.Windows.Application.Current.MainWindow is MainWindow mw3 ? mw3.OllamaPromptTextBox.Text : "Describe this image in detail and provide relevant categories and keywords.";

            if (BatchModeTabControl.SelectedItem == LocalFolderTab) // Assuming x:Name="LocalFolderTab" on the TabItem
            {
                string folderPath = LocalFolderPathTextBox.Text;
                string extensionsInput = FileExtensionsTextBox.Text;
                bool includeSubfolders = IncludeSubfoldersCheckBox.IsChecked == true;

                if (string.IsNullOrWhiteSpace(folderPath) || !Directory.Exists(folderPath))
                {
                    System.Windows.MessageBox.Show("Please select a valid folder path.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    OverallStatusTextBlock.Text = "Error: Invalid folder path.";
                    SetUiForEndOfBatch(true, "Invalid folder path.");
                    return;
                }
                if (string.IsNullOrWhiteSpace(extensionsInput))
                {
                    System.Windows.MessageBox.Show("Please specify file extensions (e.g., *.jpg;*.png).", "Input Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    OverallStatusTextBlock.Text = "Error: File extensions missing.";
                    SetUiForEndOfBatch(true, "File extensions missing.");
                    return;
                }

                // Initialize Ollama client here if not already done, or ensure it's configured
                _ollamaClient = new OllamaApiClient(ollamaUrl);

                await ProcessLocalFolderAsync(folderPath, extensionsInput, includeSubfolders, modelName, prompt, token);
            }
            else if (BatchModeTabControl.SelectedItem == DaminionBatchTab)
            {
                OverallStatusTextBlock.Text = "Daminion batch processing not yet implemented.";
                ProcessResults.Add(new BatchProcessItem { FilePath = "Daminion Collection", Status = "Pending Implementation", Details = "Daminion collection processing logic to be added." });
                SetUiForEndOfBatch(false, "Daminion batch processing not yet implemented.");
            }
            else
            {
                OverallStatusTextBlock.Text = "No batch mode selected or unknown tab.";
                SetUiForEndOfBatch(true, "No batch mode selected.");
            }
        }

        private void StopBatchButton_Click(object sender, RoutedEventArgs e)
        {
            if (_cancellationTokenSource != null && !_cancellationTokenSource.IsCancellationRequested)
            {
                OverallStatusTextBlock.Text = "Stopping batch process...";
                Console.WriteLine("[BatchProcessWindow] Cancellation requested by user.");
                _cancellationTokenSource.Cancel();
                StopBatchButton.IsEnabled = false; // Disable immediately to prevent multiple clicks
            }
        }

        private void SetUiForEndOfBatch(bool wasCancelledOrError, string endMessage)
        {
            StartBatchButton.IsEnabled = true;
            StopBatchButton.IsEnabled = false; // Always disable stop when process ends or is stopped
            BatchProgressBar.Visibility = wasCancelledOrError ? Visibility.Visible : Visibility.Collapsed; // Keep progress if error/cancelled
            if (wasCancelledOrError)
            {
                BatchProgressBar.Value = BatchProgressBar.Maximum; // Or set to a specific error indication
            }
            OverallStatusTextBlock.Text = endMessage;
            Console.WriteLine($"[BatchProcessWindow] Batch process ended. Message: {endMessage}");
        }

        // --- Actual Processing Logic for Local Files ---
        private async Task ProcessLocalFolderAsync(string folderPath, string extensionsPattern, bool includeSubfolders,
                                                 string ollamaModel, string ollamaPrompt, CancellationToken token)
        {
            Console.WriteLine($"[BatchProcessWindow] Starting ProcessLocalFolderAsync for path: {folderPath}");
            List<string> filesToProcess = new List<string>();
            SearchOption searchOption = includeSubfolders ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly;

            string[] patterns = extensionsPattern.Split(';')
                                .Select(p => p.Trim())
                                .Where(p => !string.IsNullOrWhiteSpace(p))
                                .ToArray();

            if (!patterns.Any())
            {
                ProcessResults.Add(new BatchProcessItem { FilePath = folderPath, Status = "Error", Details = "No valid file patterns provided." });
                SetUiForEndOfBatch(true, "Error: No valid file patterns.");
                return;
            }

            try
            {
                foreach (string pattern in patterns)
                {
                    filesToProcess.AddRange(Directory.EnumerateFiles(folderPath, pattern, searchOption));
                }
            }
            catch (Exception ex)
            {
                ProcessResults.Add(new BatchProcessItem { FilePath = folderPath, Status = "Error", Details = $"Error enumerating files: {ex.Message}" });
                SetUiForEndOfBatch(true, $"Error finding files: {ex.Message}");
                Console.Error.WriteLine($"[BatchProcessWindow] Error enumerating files: {ex.Message}");
                return;
            }

            if (!filesToProcess.Any())
            {
                ProcessResults.Add(new BatchProcessItem { FilePath = folderPath, Status = "Info", Details = "No matching files found to process." });
                SetUiForEndOfBatch(false, "No matching files found.");
                Console.WriteLine("[BatchProcessWindow] No matching files found.");
                return;
            }

            BatchProgressBar.Maximum = filesToProcess.Count;
            BatchProgressBar.Value = 0;
            int filesProcessed = 0;
            int filesSucceeded = 0;
            int filesFailed = 0;

            foreach (string filePath in filesToProcess)
            {
                if (token.IsCancellationRequested)
                {
                    ProcessResults.Add(new BatchProcessItem { FilePath = filePath, Status = "Cancelled", Details = "Batch process was cancelled by user." });
                    Console.WriteLine($"[BatchProcessWindow] Processing cancelled for file: {filePath}");
                    break;
                }

                var itemResult = new BatchProcessItem { FilePath = filePath, Status = "Processing..." };
                ProcessResults.Add(itemResult);
                ResultsListView.ScrollIntoView(itemResult); // Auto-scroll
                OverallStatusTextBlock.Text = $"Processing: {Path.GetFileName(filePath)} ({filesProcessed + 1} of {filesToProcess.Count})";
                Console.WriteLine($"[BatchProcessWindow] Processing file: {filePath}");

                ImageMetadataService? editor = null; // Renamed from ImageMetadataWriter
                try
                {
                    editor = new ImageMetadataService(filePath); // Use your new class
                    // editor.Read(); // Optionally read and display existing if needed, but for batch might skip

                    byte[] imageBytes = await File.ReadAllBytesAsync(filePath, token);
                    if (token.IsCancellationRequested) { itemResult.Status = "Cancelled"; itemResult.Details = "Cancelled before Ollama."; break; }

                    Console.WriteLine($"[BatchProcessWindow] Sending to Ollama: {Path.GetFileName(filePath)}");
                    OllamaGenerateResponse? ollamaApiResponse = await _ollamaClient.AnalyzeImageAsync(ollamaModel, ollamaPrompt, imageBytes);
                    if (token.IsCancellationRequested) { itemResult.Status = "Cancelled"; itemResult.Details = "Cancelled after Ollama call attempt."; break; }


                    if (ollamaApiResponse == null || !ollamaApiResponse.Done || string.IsNullOrEmpty(ollamaApiResponse.Response))
                    {
                        itemResult.Status = "Failed (Ollama)";
                        itemResult.Details = $"Ollama analysis error: {ollamaApiResponse?.Response ?? "Null API response."}";
                        Console.Error.WriteLine($"[BatchProcessWindow] Ollama error for {filePath}: {itemResult.Details}");
                        filesFailed++;
                    }
                    else
                    {
                        Console.WriteLine($"[BatchProcessWindow] Ollama success for {filePath}. Parsing response...");
                        ParsedOllamaContent parsedOllamaData = OllamaResponseParser.ParseLlavaResponse(ollamaApiResponse.Response);

                        if (!parsedOllamaData.SuccessfullyParsed && string.IsNullOrEmpty(parsedOllamaData.Description))
                        {
                            parsedOllamaData.Description = $"Ollama (parsing issues or minimal content): {ollamaApiResponse.Response.Substring(0, Math.Min(ollamaApiResponse.Response.Length, 100))}...";
                        }

                        Console.WriteLine($"[BatchProcessWindow] Writing metadata for {filePath}...");
                        editor.Description = parsedOllamaData.Description;
                        editor.Keywords = new List<string>(parsedOllamaData.Keywords);
                        editor.Categories = new List<string>(parsedOllamaData.Categories);
                        // editor.ExifImageDescription = parsedOllamaData.Description; // If you choose to set this

                        editor.Save(); // This will use the Magick.NET logic

                        itemResult.Status = "Success";
                        itemResult.Details = $"Desc: {parsedOllamaData.Description?.Substring(0, Math.Min(parsedOllamaData.Description.Length, 30))}... KW: {parsedOllamaData.Keywords.Count}, Cat: {parsedOllamaData.Categories.Count}";
                        Console.WriteLine($"[BatchProcessWindow] Metadata written successfully for {filePath}");
                        filesSucceeded++;
                    }
                }
                catch (OperationCanceledException)
                {
                    itemResult.Status = "Cancelled";
                    itemResult.Details = "Operation cancelled during processing.";
                    Console.WriteLine($"[BatchProcessWindow] Operation cancelled for file: {filePath}");
                    break;
                }
                catch (Exception ex)
                {
                    itemResult.Status = "Failed (Error)";
                    itemResult.Details = ex.Message.Substring(0, Math.Min(ex.Message.Length, 100));
                    Console.Error.WriteLine($"[BatchProcessWindow] Error processing file {filePath}: {ex.Message}\n{ex.StackTrace}");
                    filesFailed++;
                }
                finally
                {
                    editor?.Dispose();
                    filesProcessed++;
                    BatchProgressBar.Value = filesProcessed;
                }
            }

            string summaryMessage;
            if (token.IsCancellationRequested)
            {
                summaryMessage = $"Batch process cancelled. Processed: {filesProcessed - 1}, Succeeded: {filesSucceeded}, Failed: {filesFailed}.";
            }
            else
            {
                summaryMessage = $"Batch process complete. Total: {filesToProcess.Count}, Succeeded: {filesSucceeded}, Failed: {filesFailed}.";
            }
            SetUiForEndOfBatch(token.IsCancellationRequested || filesFailed > 0, summaryMessage);
            Console.WriteLine($"[BatchProcessWindow] {summaryMessage}");
        }

        // private async Task ProcessDaminionCollectionAsync(string collectionIdentifier, CancellationToken token)
        // { ... To be implemented later ... }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\DaminionOllamaWpfApp.csproj">
<![CDATA[
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
    <UseWindowsForms>True</UseWindowsForms>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="Services\**" />
    <EmbeddedResource Remove="Services\**" />
    <None Remove="Services\**" />
    <Page Remove="Services\**" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Magick.NET-Q16-AnyCPU" Version="14.6.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\DaminionOllamaInteractionLib\DaminionOllamaInteractionLib.csproj" />
  </ItemGroup>

</Project>

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\MainWindow.xaml">
<![CDATA[
<Window x:Class="DaminionOllamaWpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DaminionOllamaWpfApp"
        mc:Ignorable="d"
        Title="Daminion Ollama Processor - v0.1" Height="783" Width="800"
        FontFamily="Segoe UI">
    <Grid Margin="15,15,15,15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" MinWidth="180"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <TextBlock Grid.Row="0" Grid.Column="0" Text="Daminion Server URL:" VerticalAlignment="Center" Margin="0,0,10,0"/>
        <TextBox Grid.Row="0" Grid.Column="1" x:Name="DaminionUrlTextBox" Margin="0,5" Padding="5" Text="http://damserver.local/daminion"/>

        <TextBlock Grid.Row="1" Grid.Column="0" Text="Daminion Username:" VerticalAlignment="Center" Margin="0,0,10,0"/>
        <TextBox Grid.Row="1" Grid.Column="1" x:Name="UsernameTextBox" Margin="0,5" Padding="5" Text="admin"/>

        <TextBlock Grid.Row="2" Grid.Column="0" Text="Daminion Password:" VerticalAlignment="Center" Margin="0,0,10,0"/>
        <PasswordBox Grid.Row="2" Grid.Column="1" x:Name="PasswordBox" Margin="0,5" Padding="5" Password="admin"/>

        <Button Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" x:Name="LoginButton" Content="Login to Daminion" Margin="0,10,0,5" Padding="10,5" Click="LoginButton_Click" HorizontalAlignment="Stretch"/>
        <Button Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" x:Name="FetchTagsButton" Content="Fetch Daminion Tags (for GUIDs)" Margin="0,5,0,10" Padding="10,5" Click="FetchTagsButton_Click" IsEnabled="False" HorizontalAlignment="Stretch"/>

        <Separator Grid.Row="5" Grid.ColumnSpan="2" Margin="0,10"/>

        <TextBlock Grid.Row="6" Grid.Column="0" Text="Ollama Server URL:" VerticalAlignment="Center" Margin="0,0,10,0"/>
        <TextBox Grid.Row="6" Grid.Column="1" x:Name="OllamaUrlTextBox" Margin="0,5" Padding="5" Text="http://100.126.126.50:11434"/>

        <TextBlock Grid.Row="7" Grid.Column="0" Text="Ollama Model Name:" VerticalAlignment="Center" Margin="0,0,10,0"/>
        <TextBox Grid.Row="7" Grid.Column="1" x:Name="OllamaModelTextBox" Margin="0,5" Padding="5" Text="llava:13b-v1.6"/>

        <TextBlock Grid.Row="8" Grid.Column="0" Text="Ollama Prompt:" VerticalAlignment="Top" Margin="0,5,10,0"/>
        <TextBox Grid.Row="8" Grid.Column="1" x:Name="OllamaPromptTextBox" Margin="0,5" Padding="5" Text="Describe this image in detail. Provide suitable description, categories and keywords. Output format: Description: ..., Categories:..., Keywords:..." AcceptsReturn="True" TextWrapping="Wrap" MaxHeight="80" VerticalScrollBarVisibility="Auto"/>

        <Button Grid.Row="9" Grid.Column="0" Grid.ColumnSpan="2" x:Name="TestOllamaButton" Content="Select Local Image &amp; Test Ollama" Margin="0,10" Padding="10,5" Click="TestOllamaButton_Click" HorizontalAlignment="Stretch"/>

        <Separator Grid.Row="10" Grid.ColumnSpan="2" Margin="0,10"/>

        <TextBlock Grid.Row="11" Grid.Column="0" Text="Daminion Item ID (for single test):" VerticalAlignment="Center" Margin="0,0,10,0"/>
        <TextBox Grid.Row="11" Grid.Column="1" x:Name="DaminionItemIdTextBox" Margin="0,5" Padding="5" Text=""/>

        <Button Grid.Row="12" Grid.Column="0" Grid.ColumnSpan="2" x:Name="StartProcessingButton" Content="Start Processing for Single Daminion Item ID" Margin="0,10" Padding="10,5" Click="StartProcessingButton_Click" IsEnabled="False" HorizontalAlignment="Stretch"/>

        <Button Grid.Row="13" Grid.Column="0" Grid.ColumnSpan="2" x:Name="OpenBatchWindowButton" Content="Open Batch Processor..." Margin="0,5,0,10" Padding="10,5" Click="OpenBatchWindowButton_Click" HorizontalAlignment="Stretch"/>

        <TextBlock Grid.Row="14" Grid.Column="0" Grid.ColumnSpan="2" Text="Status / Log:" FontWeight="Bold" Margin="10,10,-10,160"/>
        <ScrollViewer Grid.Row="14" Grid.Column="0" Grid.ColumnSpan="2" VerticalScrollBarVisibility="Auto" MaxHeight="200" Margin="0,34,0,10">
            <TextBlock x:Name="StatusTextBlock" TextWrapping="Wrap" Text="Ready. Please configure and log in to Daminion." Margin="0,0,0,10" MinHeight="50" Background="LightGray" Padding="5" Height="126" ScrollViewer.CanContentScroll="True"/>
        </ScrollViewer>
    </Grid>
</Window>
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaWpfApp\MainWindow.xaml.cs">
<![CDATA[
// DaminionOllamaWpfApp/MainWindow.xaml.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json; // For JsonException (though less likely to be caught here now)
using System.Threading.Tasks;
using System.Windows;
using Microsoft.Win32; // For OpenFileDialog

using DaminionOllamaInteractionLib;
using DaminionOllamaInteractionLib.Daminion;
using DaminionOllamaInteractionLib.Ollama;
using DaminionOllamaInteractionLib.Services; // Your ImageMetadataEditor namespace
using System.Net.Http; 

namespace DaminionOllamaWpfApp
{
    public partial class MainWindow : Window
    {
        private DaminionApiClient? _daminionClient;
        private OllamaApiClient? _ollamaClient;

        private string? _descriptionTagGuid;
        private string? _keywordsTagGuid;
        private string? _categoriesTagGuid;

        public MainWindow()
        {
            InitializeComponent();
            _daminionClient = new DaminionApiClient();
        }

        /// <summary>
        /// Updates the status text block with a message.
        /// </summary>
        /// <param name="message"></param>
        /// <param name="append"></param>
        private void UpdateStatus(string message, bool append = false)
        {
            if (Dispatcher.CheckAccess())
            {
                if (append)
                {
                    StatusTextBlock.Text += message + Environment.NewLine;
                }
                else
                {
                    StatusTextBlock.Text = message + Environment.NewLine;
                }
                // If StatusTextBlock is inside a ScrollViewer named StatusScrollViewer:
                // StatusScrollViewer.ScrollToEnd(); 
            }
            else
            {
                Dispatcher.Invoke(() => UpdateStatus(message, append));
            }
        }

        private async void LoginButton_Click(object sender, RoutedEventArgs e)
        {
            Console.WriteLine("---- LoginButton_Click: START ----");
            if (_daminionClient == null)
            {
                UpdateStatus("Error: Daminion client not initialized.");
                Console.WriteLine("---- LoginButton_Click: ERROR - _daminionClient is null ----");
                return;
            }
            Console.WriteLine("---- LoginButton_Click: _daminionClient is NOT null ----");

            string daminionUrl = DaminionUrlTextBox.Text;
            string username = UsernameTextBox.Text;
            string password = PasswordBox.Password;

            Console.WriteLine($"---- LoginButton_Click: URL='{daminionUrl}', User='{username}' ----");

            if (string.IsNullOrWhiteSpace(daminionUrl) || string.IsNullOrWhiteSpace(username))
            {
                UpdateStatus("Please enter Daminion URL and Username. Password may be required.");
                Console.WriteLine("---- LoginButton_Click: ERROR - URL or Username is empty ----");
                return;
            }

            SetUiInteraction(false); // Disable UI
            UpdateStatus("Logging in to Daminion...");

            try
            {
                Console.WriteLine("---- LoginButton_Click: TRY block entered, BEFORE calling _daminionClient.LoginAsync ----");
                bool loginSuccess = await _daminionClient.LoginAsync(daminionUrl, username, password);
                Console.WriteLine($"---- LoginButton_Click: AFTER calling _daminionClient.LoginAsync, loginSuccess = {loginSuccess} ----");

                if (loginSuccess)
                {
                    UpdateStatus("Successfully logged in to Daminion.");
                    FetchTagsButton.IsEnabled = true;
                }
                else
                {
                    UpdateStatus("Failed to log in to Daminion. Check credentials and server URL. See console/debug output for details.");
                }
            }
            catch (ArgumentException argEx)
            {
                UpdateStatus($"Login input error: {argEx.Message}");
                Console.WriteLine($"---- LoginButton_Click: CATCH ArgumentException: {argEx.Message} ----");
            }
            catch (HttpRequestException httpEx)
            {
                UpdateStatus($"Login network error: {httpEx.Message}. Ensure Daminion server is accessible. Check Debug Output.");
                Console.WriteLine($"---- LoginButton_Click: CATCH HttpRequestException: {httpEx.Message} ----");
                if (httpEx.InnerException != null) Console.WriteLine($"---- LoginButton_Click: InnerHttpRequestException: {httpEx.InnerException.Message} ----");
            }
            catch (Exception ex)
            {
                UpdateStatus($"An unexpected error occurred during login: {ex.Message}. Check Debug Output.");
                Console.WriteLine($"---- LoginButton_Click: CATCH Exception: {ex.Message} ----");
                if (ex.InnerException != null) Console.WriteLine($"---- LoginButton_Click: InnerException: {ex.InnerException.Message} ----");
                Console.WriteLine($"---- LoginButton_Click: StackTrace: {ex.StackTrace} ----");
            }
            finally
            {
                SetUiInteraction(true); // Re-enable relevant parts of UI
                Console.WriteLine("---- LoginButton_Click: FINALLY block executed ----");
            }
            Console.WriteLine("---- LoginButton_Click: END ----");
        }

        private async void FetchTagsButton_Click(object sender, RoutedEventArgs e)
        {
            Console.WriteLine("---- FetchTagsButton_Click: START ----");
            if (_daminionClient == null || !_daminionClient.IsAuthenticated)
            {
                UpdateStatus("Please login to Daminion first.");
                Console.WriteLine("---- FetchTagsButton_Click: ERROR - Not authenticated or client is null ----");
                return;
            }

            SetUiInteraction(false);
            UpdateStatus("Fetching Daminion tags...");

            try
            {
                List<DaminionTag>? tags = await _daminionClient.GetTagsAsync();
                if (tags != null && tags.Any())
                {
                    var sb = new StringBuilder("Fetched Daminion Tags:\n");
                    var descTag = tags.FirstOrDefault(t => t.Name.Equals("Description", StringComparison.OrdinalIgnoreCase));
                    var keywordsTag = tags.FirstOrDefault(t => t.Name.Equals("Keywords", StringComparison.OrdinalIgnoreCase));
                    var categoriesTag = tags.FirstOrDefault(t => t.Name.Equals("Categories", StringComparison.OrdinalIgnoreCase));

                    _descriptionTagGuid = descTag?.Guid;
                    _keywordsTagGuid = keywordsTag?.Guid;
                    _categoriesTagGuid = categoriesTag?.Guid;

                    sb.AppendLine($"Found Description Tag GUID: {_descriptionTagGuid ?? "NOT FOUND"} (Name: {descTag?.Name ?? "N/A"})");
                    sb.AppendLine($"Found Keywords Tag GUID: {_keywordsTagGuid ?? "NOT FOUND"} (Name: {keywordsTag?.Name ?? "N/A"})");
                    sb.AppendLine($"Found Categories Tag GUID: {_categoriesTagGuid ?? "NOT FOUND"} (Name: {categoriesTag?.Name ?? "N/A"})");

                    if (string.IsNullOrEmpty(_descriptionTagGuid) || string.IsNullOrEmpty(_keywordsTagGuid) || string.IsNullOrEmpty(_categoriesTagGuid))
                    {
                        sb.AppendLine("\nWARNING: One or more target tags (Description, Keywords, Categories) were not found by common names.");
                    }
                    else
                    {
                        sb.AppendLine("\nSuccessfully identified GUIDs for Description, Keywords, and Categories.");
                    }
                    UpdateStatus(sb.ToString());
                }
                else
                {
                    UpdateStatus("No tags returned from Daminion or an error occurred during fetching.");
                }
            }
            catch (Exception ex)
            {
                UpdateStatus($"Error fetching tags: {ex.Message}");
                Console.WriteLine($"---- FetchTagsButton_Click: CATCH Exception: {ex.Message} ----");
            }
            finally
            {
                SetUiInteraction(true);
                Console.WriteLine("---- FetchTagsButton_Click: FINALLY block executed ----");
            }
            Console.WriteLine("---- FetchTagsButton_Click: END ----");
        }

        private async void TestOllamaButton_Click(object sender, RoutedEventArgs e) // Or your renamed button
        {
            Console.WriteLine("---- TestOllamaButton_Click: START ----");
            string ollamaUrl = OllamaUrlTextBox.Text;
            string modelName = OllamaModelTextBox.Text;
            string prompt = OllamaPromptTextBox.Text;

            if (string.IsNullOrWhiteSpace(ollamaUrl) || string.IsNullOrWhiteSpace(modelName) || string.IsNullOrWhiteSpace(prompt))
            {
                UpdateStatus("Please enter Ollama URL, Model Name, and Prompt.");
                Console.WriteLine("---- TestOllamaButton_Click: ERROR - Ollama params missing ----");
                return;
            }

            System.Windows.Forms.OpenFileDialog openFileDialog = new System.Windows.Forms.OpenFileDialog
            {
                Title = "Select Image for Metadata Processing",
                Filter = "Image Files|*.jpg;*.jpeg;*.tif;*.tiff;*.png|All files (*.*)|*.*"
            };

            if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                string selectedImagePath = openFileDialog.FileName;
                SetUiInteraction(false);
                UpdateStatus($"Processing file: {selectedImagePath}");
                Console.WriteLine($"[MainWindow] Selected image: {selectedImagePath}");

                ImageMetadataService? metadataService = null; // Use your new class name

                try
                {
                    // 1. Read existing metadata
                    UpdateStatus("Reading existing metadata...", true);
                    Console.WriteLine("[MainWindow] Reading existing metadata...");
                    metadataService = new ImageMetadataService(selectedImagePath); // Use your new class
                    metadataService.Read();

                    var sbExisting = new StringBuilder("--- Existing Metadata (from ImageMetadataService) ---\n");
                    sbExisting.AppendLine($"Description: {metadataService.Description ?? "N/A"}");
                    sbExisting.AppendLine($"Keywords: {(metadataService.Keywords.Any() ? string.Join("; ", metadataService.Keywords) : "N/A")}");
                    sbExisting.AppendLine($"Categories: {(metadataService.Categories.Any() ? string.Join("; ", metadataService.Categories) : "N/A")}");
                    // Add other properties from ImageMetadataService if you want to display them
                    UpdateStatus(sbExisting.ToString(), true);

                    // 2. Send image to Ollama
                    UpdateStatus("Sending image to Ollama for analysis...", true);
                    Console.WriteLine("[MainWindow] Sending image to Ollama...");
                    _ollamaClient = new OllamaApiClient(ollamaUrl);
                    byte[] imageBytes = await File.ReadAllBytesAsync(selectedImagePath);
                    OllamaGenerateResponse? ollamaApiResponse = await _ollamaClient.AnalyzeImageAsync(modelName, prompt, imageBytes);

                    if (ollamaApiResponse == null || !ollamaApiResponse.Done || string.IsNullOrEmpty(ollamaApiResponse.Response))
                    {
                        string errorMsg = $"Ollama analysis failed or returned empty/incomplete response. Ollama response: '{ollamaApiResponse?.Response ?? "Null API response."}'";
                        UpdateStatus(errorMsg, true);
                        Console.Error.WriteLine($"[MainWindow] {errorMsg}");
                        return;
                    }
                    UpdateStatus("Ollama analysis successful.", true);
                    Console.WriteLine("[MainWindow] Ollama analysis successful.");

                    // 3. Parse Ollama's response
                    Console.WriteLine("[MainWindow] Parsing Ollama response...");
                    ParsedOllamaContent parsedOllamaData = OllamaResponseParser.ParseLlavaResponse(ollamaApiResponse.Response);
                    // ... (your existing parsing result handling) ...

                    var sbOllama = new StringBuilder("--- Ollama Suggested Metadata ---\n");
                    sbOllama.AppendLine($"Description: {parsedOllamaData.Description ?? "N/A"}");
                    sbOllama.AppendLine($"Keywords: {(parsedOllamaData.Keywords.Any() ? string.Join("; ", parsedOllamaData.Keywords) : "N/A")}");
                    sbOllama.AppendLine($"Categories: {(parsedOllamaData.Categories.Any() ? string.Join("; ", parsedOllamaData.Categories) : "N/A")}");
                    UpdateStatus(sbOllama.ToString(), true);

                    // 4. Write new metadata to file
                    UpdateStatus("Writing Ollama metadata to image file...", true);
                    Console.WriteLine("[MainWindow] Populating ImageMetadataService with Ollama data and saving...");
                    metadataService.Description = parsedOllamaData.Description;
                    metadataService.Keywords = new List<string>(parsedOllamaData.Keywords); // Create new list
                    metadataService.Categories = new List<string>(parsedOllamaData.Categories); // Create new list
                                                                                                // metadataService.ExifImageDescription = parsedOllamaData.Description; // If you want to set this

                    metadataService.Save();
                    UpdateStatus("Metadata write attempt complete (via metadataService.Save()).", true);
                    Console.WriteLine("[MainWindow] metadataService.Save() called.");

                    // 5. Read to confirm write
                    UpdateStatus("Re-reading metadata to confirm changes...", true);
                    Console.WriteLine("[MainWindow] Re-reading metadata...");
                    metadataService.Read(); // Re-read from the modified file

                    var sbConfirmed = new StringBuilder("--- Confirmed Metadata (after write from ImageMetadataService) ---\n");
                    sbConfirmed.AppendLine($"Description: {metadataService.Description ?? "N/A"}");
                    sbConfirmed.AppendLine($"Keywords: {(metadataService.Keywords.Any() ? string.Join("; ", metadataService.Keywords) : "N/A")}");
                    sbConfirmed.AppendLine($"Categories: {(metadataService.Categories.Any() ? string.Join("; ", metadataService.Categories) : "N/A")}");
                    UpdateStatus(sbConfirmed.ToString(), true);
                    UpdateStatus("Process complete for file: " + selectedImagePath, true);
                    Console.WriteLine("[MainWindow] Metadata processing workflow complete for file.");
                }
                // ... (your existing catch blocks for ArgumentNullException, HttpRequestException, JsonException, MagickException, Exception) ...
                finally
                {
                    SetUiInteraction(true);
                    metadataService?.Dispose();
                    Console.WriteLine("---- TestOllamaButton_Click: FINALLY block executed ----");
                }
            }
            else
            {
                UpdateStatus("Image selection cancelled.", true);
                Console.WriteLine("---- TestOllamaButton_Click: Image selection cancelled ----");
            }
            Console.WriteLine("---- TestOllamaButton_Click: END ----");
        }

        private async void StartProcessingButton_Click(object sender, RoutedEventArgs e)
        {
            Console.WriteLine("---- StartProcessingButton_Click: START ----");
            // This method is for the Daminion API workflow, which is currently shelved.
            // We can re-enable and adapt it later.
            if (_daminionClient == null || !_daminionClient.IsAuthenticated)
            {
                UpdateStatus("Error: Please log in to Daminion first.");
                Console.WriteLine("---- StartProcessingButton_Click: ERROR - Not authenticated or client null ----");
                return;
            }
            if (string.IsNullOrEmpty(_descriptionTagGuid) || string.IsNullOrEmpty(_keywordsTagGuid) || string.IsNullOrEmpty(_categoriesTagGuid))
            {
                UpdateStatus("Error: Daminion tag GUIDs are missing. Please fetch tags first.");
                Console.WriteLine("---- StartProcessingButton_Click: ERROR - Tag GUIDs missing ----");
                return;
            }
            if (string.IsNullOrWhiteSpace(DaminionItemIdTextBox.Text) || !long.TryParse(DaminionItemIdTextBox.Text, out long itemId))
            {
                UpdateStatus("Error: Please enter a valid Daminion Media Item ID.");
                Console.WriteLine("---- StartProcessingButton_Click: ERROR - Invalid Item ID ----");
                return;
            }

            string ollamaUrl = OllamaUrlTextBox.Text;
            string ollamaModel = OllamaModelTextBox.Text;
            string ollamaPrompt = OllamaPromptTextBox.Text;
            if (string.IsNullOrWhiteSpace(ollamaUrl) || string.IsNullOrWhiteSpace(ollamaModel) || string.IsNullOrWhiteSpace(ollamaPrompt))
            {
                UpdateStatus("Error: Please ensure Ollama URL, Model, and Prompt are set.");
                Console.WriteLine("---- StartProcessingButton_Click: ERROR - Ollama params missing ----");
                return;
            }

            SetUiInteraction(false);
            var processLog = new StringBuilder();
            UpdateStatus($"Starting Daminion item processing for ID: {itemId}...");
            Console.WriteLine($"[MainWindow] StartProcessing Daminion Item ID: {itemId}");

            try
            {
                processLog.AppendLine("Fetching image path from Daminion...");
                DaminionPathResult pathResult = await _daminionClient.GetAbsolutePathsAsync(new List<long> { itemId });

                string? imagePath = null; // Declare here to be accessible
                if (pathResult.Success && pathResult.Paths != null && pathResult.Paths.TryGetValue(itemId.ToString(), out imagePath))
                {
                    if (string.IsNullOrEmpty(imagePath))
                    {
                        processLog.AppendLine($"Image path for item {itemId} is empty or null from Daminion.");
                        UpdateStatus(processLog.ToString(), true); SetUiInteraction(true); return;
                    }
                    processLog.AppendLine($"Image path received: {imagePath}");
                }
                else
                {
                    processLog.AppendLine($"Failed to get image path for item {itemId}. Error: {pathResult?.ErrorMessage ?? "Path result indicated failure or paths dictionary was null."}");
                    UpdateStatus(processLog.ToString(), true); SetUiInteraction(true); return;
                }

                byte[] imageBytes;
                try
                {
                    processLog.AppendLine("Reading image file...");
                    if (imagePath == null) throw new InvalidOperationException("Image path became null unexpectedly."); // Should be caught by above logic
                    imageBytes = await File.ReadAllBytesAsync(imagePath);
                    processLog.AppendLine($"Image file read successfully ({imageBytes.Length} bytes).");
                }
                catch (Exception ex)
                {
                    processLog.AppendLine($"Failed to read image file at '{imagePath}': {ex.Message}. Ensure path is accessible.");
                    UpdateStatus(processLog.ToString(), true); SetUiInteraction(true); return;
                }

                processLog.AppendLine("Sending image to Ollama for analysis...");
                _ollamaClient = new OllamaApiClient(ollamaUrl);
                OllamaGenerateResponse? ollamaApiResponse = await _ollamaClient.AnalyzeImageAsync(ollamaModel, ollamaPrompt, imageBytes);

                if (ollamaApiResponse == null || !ollamaApiResponse.Done || string.IsNullOrEmpty(ollamaApiResponse.Response))
                {
                    processLog.AppendLine($"Ollama analysis failed or returned empty/incomplete. Response: '{ollamaApiResponse?.Response ?? "Null API response."}'");
                    if (ollamaApiResponse == null) { UpdateStatus(processLog.ToString(), true); SetUiInteraction(true); return; }
                }
                else { processLog.AppendLine("Ollama analysis successful."); }

                processLog.AppendLine("Parsing Ollama response...");
                ParsedOllamaContent parsedOllamaData = OllamaResponseParser.ParseLlavaResponse(ollamaApiResponse.Response ?? string.Empty);
                if (!parsedOllamaData.SuccessfullyParsed && !string.IsNullOrEmpty(ollamaApiResponse.Response))
                {
                    parsedOllamaData.Description = $"Ollama (unparsed): {ollamaApiResponse.Response.Substring(0, Math.Min(ollamaApiResponse.Response.Length, 200))}";
                }
                else if (!parsedOllamaData.SuccessfullyParsed && string.IsNullOrEmpty(ollamaApiResponse.Response))
                {
                    parsedOllamaData.Description = "Ollama: No content generated.";
                }

                processLog.AppendLine($"Parsed Description (snippet): {parsedOllamaData.Description?.Substring(0, Math.Min(parsedOllamaData.Description.Length, 100))}...");
                processLog.AppendLine($"Parsed Categories: {(parsedOllamaData.Categories.Any() ? string.Join("; ", parsedOllamaData.Categories) : "N/A")}");
                processLog.AppendLine($"Parsed Keywords: {(parsedOllamaData.Keywords.Any() ? string.Join("; ", parsedOllamaData.Keywords) : "N/A")}");

                processLog.AppendLine("Preparing to update Daminion metadata...");
                var operations = new List<DaminionUpdateOperation>();
                if (!string.IsNullOrWhiteSpace(parsedOllamaData.Description))
                    operations.Add(new DaminionUpdateOperation { Guid = _descriptionTagGuid!, Value = parsedOllamaData.Description, Id = 0, Remove = false });
                else
                    operations.Add(new DaminionUpdateOperation { Guid = _descriptionTagGuid!, Value = (parsedOllamaData.SuccessfullyParsed ? "" : "Ollama: No description generated"), Id = 0, Remove = false });


                if (parsedOllamaData.Categories.Any())
                    operations.Add(new DaminionUpdateOperation { Guid = _categoriesTagGuid!, Value = string.Join("; ", parsedOllamaData.Categories), Id = 0, Remove = false });
                else
                    operations.Add(new DaminionUpdateOperation { Guid = _categoriesTagGuid!, Value = (parsedOllamaData.SuccessfullyParsed ? "" : "Ollama: No categories generated"), Id = 0, Remove = false });

                if (parsedOllamaData.Keywords.Any())
                    operations.Add(new DaminionUpdateOperation { Guid = _keywordsTagGuid!, Value = string.Join("; ", parsedOllamaData.Keywords), Id = 0, Remove = false });
                else
                    operations.Add(new DaminionUpdateOperation { Guid = _keywordsTagGuid!, Value = (parsedOllamaData.SuccessfullyParsed ? "" : "Ollama: No keywords generated"), Id = 0, Remove = false });

                if (operations.Any())
                {
                    processLog.AppendLine("Updating Daminion...");
                    DaminionBatchChangeResponse? updateResult = await _daminionClient.UpdateItemMetadataAsync(new List<long> { itemId }, operations);
                    if (updateResult != null && updateResult.Success)
                    {
                        processLog.AppendLine("Daminion metadata updated successfully!");
                    }
                    else
                    {
                        processLog.AppendLine($"Failed to update Daminion metadata. Error: {updateResult?.Error ?? "Unknown error from update API."}");
                    }
                }
                else
                {
                    processLog.AppendLine("No valid metadata operations constructed to update Daminion.");
                }
                UpdateStatus(processLog.ToString(), true);
            }
            catch (Exception ex)
            {
                processLog.AppendLine($"An critical error occurred during Daminion processing: {ex.Message}\n{ex.StackTrace}");
                UpdateStatus(processLog.ToString(), true);
            }
            finally
            {
                SetUiInteraction(true);
                Console.WriteLine("---- StartProcessingButton_Click: FINALLY block executed ----");
            }
            Console.WriteLine("---- StartProcessingButton_Click: END ----");
        }

        private void OpenBatchWindowButton_Click(object sender, RoutedEventArgs e)
        {
            BatchProcessWindow batchWindow = new BatchProcessWindow();
            // You might want to pass the authenticated _daminionClient or API URLs if the batch window needs them immediately.
            // For now, let's keep it simple. The BatchProcessWindow can handle its own Daminion login if needed for Daminion batches.
            batchWindow.Owner = this; // Optional: sets the owner window
            batchWindow.Show();
        }
        private void SetUiInteraction(bool enable)
        {
            LoginButton.IsEnabled = enable;
            FetchTagsButton.IsEnabled = enable && (_daminionClient?.IsAuthenticated ?? false);
            TestOllamaButton.IsEnabled = enable;

            bool canStartProcessing = enable &&
                                    (_daminionClient?.IsAuthenticated ?? false) &&
                                    !string.IsNullOrEmpty(_descriptionTagGuid) && // Check all required GUIDs
                                    !string.IsNullOrEmpty(_keywordsTagGuid) &&
                                    !string.IsNullOrEmpty(_categoriesTagGuid) &&
                                    !string.IsNullOrWhiteSpace(DaminionItemIdTextBox.Text);
            StartProcessingButton.IsEnabled = canStartProcessing;

            DaminionUrlTextBox.IsEnabled = enable;
            UsernameTextBox.IsEnabled = enable;
            PasswordBox.IsEnabled = enable;
            OllamaUrlTextBox.IsEnabled = enable;
            OllamaModelTextBox.IsEnabled = enable;
            OllamaPromptTextBox.IsEnabled = enable;
            DaminionItemIdTextBox.IsEnabled = enable;
        }

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            _daminionClient?.Dispose();
            _ollamaClient?.Dispose();
        }
    }
}
]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\Setup Dam Llama\Setup Dam Llama.vdproj">
<![CDATA[
"DeployProject"
{
"VSVersion" = "3:800"
"ProjectType" = "8:{978C614F-708E-4E1A-B201-565925725DBA}"
"IsWebType" = "8:FALSE"
"ProjectName" = "8:Setup Dam Llama"
"LanguageId" = "3:1033"
"CodePage" = "3:1252"
"UILanguageId" = "3:1033"
"SccProjectName" = "8:"
"SccLocalPath" = "8:"
"SccAuxPath" = "8:"
"SccProvider" = "8:"
    "Hierarchy"
    {
        "Entry"
        {
        "MsmKey" = "8:_500B6E5867784EC6AB18D03456D302CE"
        "OwnerKey" = "8:_UNDEFINED"
        "MsmSig" = "8:_UNDEFINED"
        }
    }
    "Configurations"
    {
        "Debug"
        {
        "DisplayName" = "8:Debug"
        "IsDebugOnly" = "11:TRUE"
        "IsReleaseOnly" = "11:FALSE"
        "OutputFilename" = "8:Debug\\Setup Dam Llama.msi"
        "PackageFilesAs" = "3:2"
        "PackageFileSize" = "3:-2147483648"
        "CabType" = "3:1"
        "Compression" = "3:2"
        "SignOutput" = "11:FALSE"
        "CertificateFile" = "8:"
        "PrivateKeyFile" = "8:"
        "TimeStampServer" = "8:"
        "InstallerBootstrapper" = "3:2"
        }
        "Release"
        {
        "DisplayName" = "8:Release"
        "IsDebugOnly" = "11:FALSE"
        "IsReleaseOnly" = "11:TRUE"
        "OutputFilename" = "8:Release\\Setup Dam Llama.msi"
        "PackageFilesAs" = "3:2"
        "PackageFileSize" = "3:-2147483648"
        "CabType" = "3:1"
        "Compression" = "3:2"
        "SignOutput" = "11:FALSE"
        "CertificateFile" = "8:"
        "PrivateKeyFile" = "8:"
        "TimeStampServer" = "8:"
        "InstallerBootstrapper" = "3:2"
        }
    }
    "Deployable"
    {
        "CustomAction"
        {
        }
        "DefaultFeature"
        {
        "Name" = "8:DefaultFeature"
        "Title" = "8:"
        "Description" = "8:"
        }
        "ExternalPersistence"
        {
            "LaunchCondition"
            {
                "{A06ECF26-33A3-4562-8140-9B0E340D4F24}:_2189AE6F89B241ECBC6B3B4A4DEB8224"
                {
                "Name" = "8:.NET Core"
                "Message" = "8:[VSDNETCOREMSG]"
                "AllowLaterVersions" = "11:FALSE"
                "InstallUrl" = "8:https://dotnet.microsoft.com/download/dotnet-core/[NetCoreVerMajorDotMinor]"
                "IsNETCore" = "11:TRUE"
                "Architecture" = "2:0"
                "Runtime" = "2:0"
                }
            }
        }
        "File"
        {
        }
        "FileType"
        {
        }
        "Folder"
        {
            "{1525181F-901A-416C-8A58-119130FE478E}:_358F29646C9848C5B89CB8BF6FFD9048"
            {
            "Name" = "8:#1919"
            "AlwaysCreate" = "11:FALSE"
            "Condition" = "8:"
            "Transitive" = "11:FALSE"
            "Property" = "8:ProgramMenuFolder"
                "Folders"
                {
                }
            }
            "{1525181F-901A-416C-8A58-119130FE478E}:_84638EFDA5654560BE55B9C937244B9A"
            {
            "Name" = "8:#1916"
            "AlwaysCreate" = "11:FALSE"
            "Condition" = "8:"
            "Transitive" = "11:FALSE"
            "Property" = "8:DesktopFolder"
                "Folders"
                {
                }
            }
            "{3C67513D-01DD-4637-8A68-80971EB9504F}:_9BC232F8E7284189B0187411989B67ED"
            {
            "DefaultLocation" = "8:[ProgramFiles64Folder][Manufacturer]\\[ProductName]"
            "Name" = "8:#1925"
            "AlwaysCreate" = "11:FALSE"
            "Condition" = "8:"
            "Transitive" = "11:FALSE"
            "Property" = "8:TARGETDIR"
                "Folders"
                {
                }
            }
        }
        "LaunchCondition"
        {
        }
        "Locator"
        {
        }
        "MsiBootstrapper"
        {
        "LangId" = "3:1033"
        "RequiresElevation" = "11:FALSE"
        }
        "Product"
        {
        "Name" = "8:Microsoft Visual Studio"
        "ProductName" = "8:Setup Dam Llama"
        "ProductCode" = "8:{6A8B4E24-F6F5-4BA3-BFB5-51D01F6AC0AF}"
        "PackageCode" = "8:{DAF7281F-6A47-46D5-81A0-301C8F32B3B3}"
        "UpgradeCode" = "8:{EFB20775-C9CE-4EC3-9056-7F5077373A47}"
        "AspNetVersion" = "8:"
        "RestartWWWService" = "11:FALSE"
        "RemovePreviousVersions" = "11:TRUE"
        "DetectNewerInstalledVersion" = "11:TRUE"
        "InstallAllUsers" = "11:FALSE"
        "ProductVersion" = "8:1.0.0"
        "Manufacturer" = "8:dean.kruger@outlook.com"
        "ARPHELPTELEPHONE" = "8:"
        "ARPHELPLINK" = "8:"
        "Title" = "8:Setup Dam Llama"
        "Subject" = "8:"
        "ARPCONTACT" = "8:Dean Kruger"
        "Keywords" = "8:"
        "ARPCOMMENTS" = "8:"
        "ARPURLINFOABOUT" = "8:"
        "ARPPRODUCTICON" = "8:"
        "ARPIconIndex" = "3:0"
        "SearchPath" = "8:"
        "UseSystemSearchPath" = "11:TRUE"
        "TargetPlatform" = "3:1"
        "PreBuildEvent" = "8:"
        "PostBuildEvent" = "8:"
        "RunPostBuildEvent" = "3:0"
        }
        "Registry"
        {
            "HKLM"
            {
                "Keys"
                {
                    "{60EA8692-D2D5-43EB-80DC-7906BF13D6EF}:_91418DFC866B4FE5B8A47B01B76D77AB"
                    {
                    "Name" = "8:Software"
                    "Condition" = "8:"
                    "AlwaysCreate" = "11:FALSE"
                    "DeleteAtUninstall" = "11:FALSE"
                    "Transitive" = "11:FALSE"
                        "Keys"
                        {
                            "{60EA8692-D2D5-43EB-80DC-7906BF13D6EF}:_8CB7BC009E6C4079AE594D5463F301E9"
                            {
                            "Name" = "8:[Manufacturer]"
                            "Condition" = "8:"
                            "AlwaysCreate" = "11:FALSE"
                            "DeleteAtUninstall" = "11:FALSE"
                            "Transitive" = "11:FALSE"
                                "Keys"
                                {
                                }
                                "Values"
                                {
                                }
                            }
                        }
                        "Values"
                        {
                        }
                    }
                }
            }
            "HKCU"
            {
                "Keys"
                {
                    "{60EA8692-D2D5-43EB-80DC-7906BF13D6EF}:_ACCAB012267349DC982090EE7FFC985F"
                    {
                    "Name" = "8:Software"
                    "Condition" = "8:"
                    "AlwaysCreate" = "11:FALSE"
                    "DeleteAtUninstall" = "11:FALSE"
                    "Transitive" = "11:FALSE"
                        "Keys"
                        {
                            "{60EA8692-D2D5-43EB-80DC-7906BF13D6EF}:_38FDF5FA426E49F18FE625448ED9482F"
                            {
                            "Name" = "8:[Manufacturer]"
                            "Condition" = "8:"
                            "AlwaysCreate" = "11:FALSE"
                            "DeleteAtUninstall" = "11:FALSE"
                            "Transitive" = "11:FALSE"
                                "Keys"
                                {
                                }
                                "Values"
                                {
                                }
                            }
                        }
                        "Values"
                        {
                        }
                    }
                }
            }
            "HKCR"
            {
                "Keys"
                {
                }
            }
            "HKU"
            {
                "Keys"
                {
                }
            }
            "HKPU"
            {
                "Keys"
                {
                }
            }
        }
        "Sequences"
        {
        }
        "Shortcut"
        {
        }
        "UserInterface"
        {
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_0C4D69CBFB934BC89EC1808DD40982CA"
            {
            "Name" = "8:#1901"
            "Sequence" = "3:1"
            "Attributes" = "3:2"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_27E560B9045B42A19C2A8F527B8A2FD9"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Progress"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdProgressDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "ShowProgress"
                            {
                            "Name" = "8:ShowProgress"
                            "DisplayName" = "8:#1009"
                            "Description" = "8:#1109"
                            "Type" = "3:5"
                            "ContextData" = "8:1;True=1;False=0"
                            "Attributes" = "3:0"
                            "Setting" = "3:0"
                            "Value" = "3:1"
                            "DefaultValue" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_2D832EC443A7435489D22628AAF275CE"
            {
            "Name" = "8:#1900"
            "Sequence" = "3:2"
            "Attributes" = "3:1"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_7C8EE219A7A94FB0810B23E18D16F057"
                    {
                    "Sequence" = "3:300"
                    "DisplayName" = "8:Confirm Installation"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdAdminConfirmDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_7F0A85E2FF0740978D6BF94CAF634D90"
                    {
                    "Sequence" = "3:200"
                    "DisplayName" = "8:Installation Folder"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdAdminFolderDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_8118140726194AC99371A93AC1FE6F4A"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Welcome"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdAdminWelcomeDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "CopyrightWarning"
                            {
                            "Name" = "8:CopyrightWarning"
                            "DisplayName" = "8:#1002"
                            "Description" = "8:#1102"
                            "Type" = "3:3"
                            "ContextData" = "8:"
                            "Attributes" = "3:0"
                            "Setting" = "3:1"
                            "Value" = "8:#1202"
                            "DefaultValue" = "8:#1202"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "Welcome"
                            {
                            "Name" = "8:Welcome"
                            "DisplayName" = "8:#1003"
                            "Description" = "8:#1103"
                            "Type" = "3:3"
                            "ContextData" = "8:"
                            "Attributes" = "3:0"
                            "Setting" = "3:1"
                            "Value" = "8:#1203"
                            "DefaultValue" = "8:#1203"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_5CEBEDB2719A4ABD85B30AF1726D0799"
            {
            "Name" = "8:#1902"
            "Sequence" = "3:2"
            "Attributes" = "3:3"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_FFE4363665554E7C94BA611BA975FEC0"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Finished"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdAdminFinishedDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_694183DFBC544FB8BFC2E5331476ADCF"
            {
            "Name" = "8:#1901"
            "Sequence" = "3:2"
            "Attributes" = "3:2"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_F9002CA562BD461AB1E18B06B7D15733"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Progress"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdAdminProgressDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "ShowProgress"
                            {
                            "Name" = "8:ShowProgress"
                            "DisplayName" = "8:#1009"
                            "Description" = "8:#1109"
                            "Type" = "3:5"
                            "ContextData" = "8:1;True=1;False=0"
                            "Attributes" = "3:0"
                            "Setting" = "3:0"
                            "Value" = "3:1"
                            "DefaultValue" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
            "{2479F3F5-0309-486D-8047-8187E2CE5BA0}:_6C41959B38F54F7692A45F081E603356"
            {
            "UseDynamicProperties" = "11:FALSE"
            "IsDependency" = "11:FALSE"
            "SourcePath" = "8:<VsdDialogDir>\\VsdBasicDialogs.wim"
            }
            "{2479F3F5-0309-486D-8047-8187E2CE5BA0}:_7BFF20D174E448389DD03F590F361DED"
            {
            "UseDynamicProperties" = "11:FALSE"
            "IsDependency" = "11:FALSE"
            "SourcePath" = "8:<VsdDialogDir>\\VsdUserInterface.wim"
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_84303F967FCE48C78EC52A98014CF74F"
            {
            "Name" = "8:#1900"
            "Sequence" = "3:1"
            "Attributes" = "3:1"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_27C99DF2645047BAB12841456796F923"
                    {
                    "Sequence" = "3:300"
                    "DisplayName" = "8:Confirm Installation"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdConfirmDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_8033A6B7A36346CDBA463B23FFF97305"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Welcome"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdWelcomeDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "CopyrightWarning"
                            {
                            "Name" = "8:CopyrightWarning"
                            "DisplayName" = "8:#1002"
                            "Description" = "8:#1102"
                            "Type" = "3:3"
                            "ContextData" = "8:"
                            "Attributes" = "3:0"
                            "Setting" = "3:1"
                            "Value" = "8:#1202"
                            "DefaultValue" = "8:#1202"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "Welcome"
                            {
                            "Name" = "8:Welcome"
                            "DisplayName" = "8:#1003"
                            "Description" = "8:#1103"
                            "Type" = "3:3"
                            "ContextData" = "8:"
                            "Attributes" = "3:0"
                            "Setting" = "3:1"
                            "Value" = "8:#1203"
                            "DefaultValue" = "8:#1203"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_8899264EA4AC4AD0B2CE3EB571C8D8DD"
                    {
                    "Sequence" = "3:200"
                    "DisplayName" = "8:Installation Folder"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdFolderDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "InstallAllUsersVisible"
                            {
                            "Name" = "8:InstallAllUsersVisible"
                            "DisplayName" = "8:#1059"
                            "Description" = "8:#1159"
                            "Type" = "3:5"
                            "ContextData" = "8:1;True=1;False=0"
                            "Attributes" = "3:0"
                            "Setting" = "3:0"
                            "Value" = "3:1"
                            "DefaultValue" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_979FF96C23E94F598D94EFD5963D43C9"
            {
            "Name" = "8:#1902"
            "Sequence" = "3:1"
            "Attributes" = "3:3"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_C5B01EBA54314F3EA778ED62D31FB11D"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Finished"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdFinishedDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "UpdateText"
                            {
                            "Name" = "8:UpdateText"
                            "DisplayName" = "8:#1058"
                            "Description" = "8:#1158"
                            "Type" = "3:15"
                            "ContextData" = "8:"
                            "Attributes" = "3:0"
                            "Setting" = "3:1"
                            "Value" = "8:#1258"
                            "DefaultValue" = "8:#1258"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
        }
        "MergeModule"
        {
        }
        "ProjectOutput"
        {
            "{5259A561-127C-4D43-A0A1-72F10C7B3BF8}:_4EDA12C5F8264748A8653F67067A8323"
            {
            "SourcePath" = "8:"
            "TargetName" = "8:"
            "Tag" = "8:"
            "Folder" = "8:_9BC232F8E7284189B0187411989B67ED"
            "Condition" = "8:"
            "Transitive" = "11:FALSE"
            "Vital" = "11:TRUE"
            "ReadOnly" = "11:FALSE"
            "Hidden" = "11:FALSE"
            "System" = "11:FALSE"
            "Permanent" = "11:FALSE"
            "SharedLegacy" = "11:FALSE"
            "PackageAs" = "3:1"
            "Register" = "3:1"
            "Exclude" = "11:FALSE"
            "IsDependency" = "11:FALSE"
            "IsolateTo" = "8:"
            "ProjectOutputGroupRegister" = "3:1"
            "OutputConfiguration" = "8:"
            "OutputGroupCanonicalName" = "8:LocalizedResourceDlls"
            "OutputProjectGuid" = "8:{8D73EA54-88AC-4F14-88A0-9468CD8C1862}"
            "ShowKeyOutput" = "11:TRUE"
                "ExcludeFilters"
                {
                }
            }
            "{5259A561-127C-4D43-A0A1-72F10C7B3BF8}:_500B6E5867784EC6AB18D03456D302CE"
            {
            "SourcePath" = "8:..\\DaminionOllamaApp\\obj\\Debug\\net8.0-windows\\apphost.exe"
            "TargetName" = "8:"
            "Tag" = "8:"
            "Folder" = "8:_9BC232F8E7284189B0187411989B67ED"
            "Condition" = "8:"
            "Transitive" = "11:FALSE"
            "Vital" = "11:TRUE"
            "ReadOnly" = "11:FALSE"
            "Hidden" = "11:FALSE"
            "System" = "11:FALSE"
            "Permanent" = "11:FALSE"
            "SharedLegacy" = "11:FALSE"
            "PackageAs" = "3:1"
            "Register" = "3:1"
            "Exclude" = "11:FALSE"
            "IsDependency" = "11:FALSE"
            "IsolateTo" = "8:"
            "ProjectOutputGroupRegister" = "3:1"
            "OutputConfiguration" = "8:"
            "OutputGroupCanonicalName" = "8:PublishItems"
            "OutputProjectGuid" = "8:{A6BE4A87-B4BA-41BC-8395-EF576BC47F22}"
            "ShowKeyOutput" = "11:TRUE"
                "ExcludeFilters"
                {
                }
            }
        }
    }
}

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\SetupDaminionLlama\SetupDaminionLlama.vdproj">
<![CDATA[
"DeployProject"
{
"VSVersion" = "3:800"
"ProjectType" = "8:{978C614F-708E-4E1A-B201-565925725DBA}"
"IsWebType" = "8:FALSE"
"ProjectName" = "8:SetupDaminionLlama"
"LanguageId" = "3:1033"
"CodePage" = "3:1252"
"UILanguageId" = "3:1033"
"SccProjectName" = "8:"
"SccLocalPath" = "8:"
"SccAuxPath" = "8:"
"SccProvider" = "8:"
    "Hierarchy"
    {
        "Entry"
        {
        "MsmKey" = "8:_319288C1BB014A75969F241372DD84EC"
        "OwnerKey" = "8:_UNDEFINED"
        "MsmSig" = "8:_UNDEFINED"
        }
    }
    "Configurations"
    {
        "Debug"
        {
        "DisplayName" = "8:Debug"
        "IsDebugOnly" = "11:TRUE"
        "IsReleaseOnly" = "11:FALSE"
        "OutputFilename" = "8:Debug\\SetupDaminionLlama.msi"
        "PackageFilesAs" = "3:2"
        "PackageFileSize" = "3:-2147483648"
        "CabType" = "3:1"
        "Compression" = "3:2"
        "SignOutput" = "11:FALSE"
        "CertificateFile" = "8:"
        "PrivateKeyFile" = "8:"
        "TimeStampServer" = "8:"
        "InstallerBootstrapper" = "3:2"
        }
        "Release"
        {
        "DisplayName" = "8:Release"
        "IsDebugOnly" = "11:FALSE"
        "IsReleaseOnly" = "11:TRUE"
        "OutputFilename" = "8:Release\\SetupDaminionLlama.msi"
        "PackageFilesAs" = "3:2"
        "PackageFileSize" = "3:-2147483648"
        "CabType" = "3:1"
        "Compression" = "3:2"
        "SignOutput" = "11:FALSE"
        "CertificateFile" = "8:"
        "PrivateKeyFile" = "8:"
        "TimeStampServer" = "8:"
        "InstallerBootstrapper" = "3:2"
        }
    }
    "Deployable"
    {
        "CustomAction"
        {
        }
        "DefaultFeature"
        {
        "Name" = "8:DefaultFeature"
        "Title" = "8:"
        "Description" = "8:"
        }
        "ExternalPersistence"
        {
            "LaunchCondition"
            {
                "{A06ECF26-33A3-4562-8140-9B0E340D4F24}:_BD876F28680B42F58911DE93A70950C8"
                {
                "Name" = "8:.NET Core"
                "Message" = "8:[VSDNETCOREMSG]"
                "AllowLaterVersions" = "11:FALSE"
                "InstallUrl" = "8:https://dotnet.microsoft.com/download/dotnet-core/[NetCoreVerMajorDotMinor]"
                "IsNETCore" = "11:TRUE"
                "Architecture" = "2:0"
                "Runtime" = "2:0"
                }
            }
        }
        "File"
        {
        }
        "FileType"
        {
        }
        "Folder"
        {
            "{1525181F-901A-416C-8A58-119130FE478E}:_1D9F0F5F737E45A1ADD934DB4A792CF7"
            {
            "Name" = "8:#1916"
            "AlwaysCreate" = "11:FALSE"
            "Condition" = "8:"
            "Transitive" = "11:FALSE"
            "Property" = "8:DesktopFolder"
                "Folders"
                {
                }
            }
            "{3C67513D-01DD-4637-8A68-80971EB9504F}:_6B0DAD6A59A54B11868BFB09D7CF6F09"
            {
            "DefaultLocation" = "8:[ProgramFiles64Folder][Manufacturer]\\[ProductName]"
            "Name" = "8:#1925"
            "AlwaysCreate" = "11:FALSE"
            "Condition" = "8:"
            "Transitive" = "11:FALSE"
            "Property" = "8:TARGETDIR"
                "Folders"
                {
                }
            }
            "{1525181F-901A-416C-8A58-119130FE478E}:_75A461EA56304F099D4165E8AC6E730C"
            {
            "Name" = "8:#1919"
            "AlwaysCreate" = "11:FALSE"
            "Condition" = "8:"
            "Transitive" = "11:FALSE"
            "Property" = "8:ProgramMenuFolder"
                "Folders"
                {
                }
            }
        }
        "LaunchCondition"
        {
        }
        "Locator"
        {
        }
        "MsiBootstrapper"
        {
        "LangId" = "3:1033"
        "RequiresElevation" = "11:FALSE"
        }
        "Product"
        {
        "Name" = "8:Microsoft Visual Studio"
        "ProductName" = "8:Daminion Llama"
        "ProductCode" = "8:{E1366172-2C33-4D19-A5ED-A7DDD6D836D0}"
        "PackageCode" = "8:{C383D2E5-88EA-4E42-A4AF-C77C562E3B01}"
        "UpgradeCode" = "8:{AEE89BB6-8D4E-4BCB-9EEC-01C1C47EC9D9}"
        "AspNetVersion" = "8:2.0.50727.0"
        "RestartWWWService" = "11:FALSE"
        "RemovePreviousVersions" = "11:TRUE"
        "DetectNewerInstalledVersion" = "11:TRUE"
        "InstallAllUsers" = "11:TRUE"
        "ProductVersion" = "8:1.0.0"
        "Manufacturer" = "8:Dean Kruger"
        "ARPHELPTELEPHONE" = "8:"
        "ARPHELPLINK" = "8:"
        "Title" = "8:Setup Daminion Llama"
        "Subject" = "8:"
        "ARPCONTACT" = "8:Dean Kruger"
        "Keywords" = "8:"
        "ARPCOMMENTS" = "8:"
        "ARPURLINFOABOUT" = "8:"
        "ARPPRODUCTICON" = "8:"
        "ARPIconIndex" = "3:0"
        "SearchPath" = "8:"
        "UseSystemSearchPath" = "11:TRUE"
        "TargetPlatform" = "3:1"
        "PreBuildEvent" = "8:"
        "PostBuildEvent" = "8:"
        "RunPostBuildEvent" = "3:0"
        }
        "Registry"
        {
            "HKLM"
            {
                "Keys"
                {
                    "{60EA8692-D2D5-43EB-80DC-7906BF13D6EF}:_FD7931A3E0CE4E37950D0256E7A79EC4"
                    {
                    "Name" = "8:Software"
                    "Condition" = "8:"
                    "AlwaysCreate" = "11:FALSE"
                    "DeleteAtUninstall" = "11:FALSE"
                    "Transitive" = "11:FALSE"
                        "Keys"
                        {
                            "{60EA8692-D2D5-43EB-80DC-7906BF13D6EF}:_FF972C89186145FAA2208D5E0E6146F4"
                            {
                            "Name" = "8:[Manufacturer]"
                            "Condition" = "8:"
                            "AlwaysCreate" = "11:FALSE"
                            "DeleteAtUninstall" = "11:FALSE"
                            "Transitive" = "11:FALSE"
                                "Keys"
                                {
                                }
                                "Values"
                                {
                                }
                            }
                        }
                        "Values"
                        {
                        }
                    }
                }
            }
            "HKCU"
            {
                "Keys"
                {
                    "{60EA8692-D2D5-43EB-80DC-7906BF13D6EF}:_64624E3FFE6C475C972093E3998CD836"
                    {
                    "Name" = "8:Software"
                    "Condition" = "8:"
                    "AlwaysCreate" = "11:FALSE"
                    "DeleteAtUninstall" = "11:FALSE"
                    "Transitive" = "11:FALSE"
                        "Keys"
                        {
                            "{60EA8692-D2D5-43EB-80DC-7906BF13D6EF}:_078A292C926D4729A8F11C9A1C5AF984"
                            {
                            "Name" = "8:[Manufacturer]"
                            "Condition" = "8:"
                            "AlwaysCreate" = "11:FALSE"
                            "DeleteAtUninstall" = "11:FALSE"
                            "Transitive" = "11:FALSE"
                                "Keys"
                                {
                                }
                                "Values"
                                {
                                }
                            }
                        }
                        "Values"
                        {
                        }
                    }
                }
            }
            "HKCR"
            {
                "Keys"
                {
                }
            }
            "HKU"
            {
                "Keys"
                {
                }
            }
            "HKPU"
            {
                "Keys"
                {
                }
            }
        }
        "Sequences"
        {
        }
        "Shortcut"
        {
            "{970C0BB2-C7D0-45D7-ABFA-7EC378858BC0}:_41BCF96F8C674EA69DBABA694847A281"
            {
            "Name" = "8:Daminion Llama"
            "Arguments" = "8:"
            "Description" = "8:"
            "ShowCmd" = "3:1"
            "IconIndex" = "3:0"
            "Transitive" = "11:FALSE"
            "Target" = "8:_319288C1BB014A75969F241372DD84EC"
            "Folder" = "8:_1D9F0F5F737E45A1ADD934DB4A792CF7"
            "WorkingFolder" = "8:_6B0DAD6A59A54B11868BFB09D7CF6F09"
            "Icon" = "8:"
            "Feature" = "8:"
            }
            "{970C0BB2-C7D0-45D7-ABFA-7EC378858BC0}:_B0AA53E6808C42058C7763A1D5DCB8D0"
            {
            "Name" = "8:Daminion Llama"
            "Arguments" = "8:"
            "Description" = "8:"
            "ShowCmd" = "3:1"
            "IconIndex" = "3:0"
            "Transitive" = "11:FALSE"
            "Target" = "8:_319288C1BB014A75969F241372DD84EC"
            "Folder" = "8:_75A461EA56304F099D4165E8AC6E730C"
            "WorkingFolder" = "8:_6B0DAD6A59A54B11868BFB09D7CF6F09"
            "Icon" = "8:"
            "Feature" = "8:"
            }
        }
        "UserInterface"
        {
            "{2479F3F5-0309-486D-8047-8187E2CE5BA0}:_29978745E4D3469D88843D9F8A043FCA"
            {
            "UseDynamicProperties" = "11:FALSE"
            "IsDependency" = "11:FALSE"
            "SourcePath" = "8:<VsdDialogDir>\\VsdUserInterface.wim"
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_2E4C66AC9E124B55B8B80B7E497506E1"
            {
            "Name" = "8:#1902"
            "Sequence" = "3:2"
            "Attributes" = "3:3"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_97F7E93405E5431A84701FC3857750EC"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Finished"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdAdminFinishedDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_5541EEA58556498DB4832F1CCF0EB3B8"
            {
            "Name" = "8:#1901"
            "Sequence" = "3:2"
            "Attributes" = "3:2"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_84D119976DAA4BD9BDB74E474E107792"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Progress"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdAdminProgressDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "ShowProgress"
                            {
                            "Name" = "8:ShowProgress"
                            "DisplayName" = "8:#1009"
                            "Description" = "8:#1109"
                            "Type" = "3:5"
                            "ContextData" = "8:1;True=1;False=0"
                            "Attributes" = "3:0"
                            "Setting" = "3:0"
                            "Value" = "3:1"
                            "DefaultValue" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_76BF71C0247E4D8282C4F212AE3552F1"
            {
            "Name" = "8:#1901"
            "Sequence" = "3:1"
            "Attributes" = "3:2"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_C99B8118A769430E97DA6D90D2102884"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Progress"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdProgressDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "ShowProgress"
                            {
                            "Name" = "8:ShowProgress"
                            "DisplayName" = "8:#1009"
                            "Description" = "8:#1109"
                            "Type" = "3:5"
                            "ContextData" = "8:1;True=1;False=0"
                            "Attributes" = "3:0"
                            "Setting" = "3:0"
                            "Value" = "3:1"
                            "DefaultValue" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_99EA963D4498449F9D42047911F6C39C"
            {
            "Name" = "8:#1902"
            "Sequence" = "3:1"
            "Attributes" = "3:3"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_581E1393A2F14DFCA9253ED56D8C0208"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Finished"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdFinishedDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "UpdateText"
                            {
                            "Name" = "8:UpdateText"
                            "DisplayName" = "8:#1058"
                            "Description" = "8:#1158"
                            "Type" = "3:15"
                            "ContextData" = "8:"
                            "Attributes" = "3:0"
                            "Setting" = "3:1"
                            "Value" = "8:#1258"
                            "DefaultValue" = "8:#1258"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
            "{2479F3F5-0309-486D-8047-8187E2CE5BA0}:_C4E48914AA1C40B4AAABA56C5DCB9379"
            {
            "UseDynamicProperties" = "11:FALSE"
            "IsDependency" = "11:FALSE"
            "SourcePath" = "8:<VsdDialogDir>\\VsdBasicDialogs.wim"
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_DAB2DE5BFE094855AA17A1E2BD589D26"
            {
            "Name" = "8:#1900"
            "Sequence" = "3:2"
            "Attributes" = "3:1"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_25AE9E08E4E64C6FB845CBC466587063"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Welcome"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdAdminWelcomeDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "CopyrightWarning"
                            {
                            "Name" = "8:CopyrightWarning"
                            "DisplayName" = "8:#1002"
                            "Description" = "8:#1102"
                            "Type" = "3:3"
                            "ContextData" = "8:"
                            "Attributes" = "3:0"
                            "Setting" = "3:1"
                            "Value" = "8:#1202"
                            "DefaultValue" = "8:#1202"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "Welcome"
                            {
                            "Name" = "8:Welcome"
                            "DisplayName" = "8:#1003"
                            "Description" = "8:#1103"
                            "Type" = "3:3"
                            "ContextData" = "8:"
                            "Attributes" = "3:0"
                            "Setting" = "3:1"
                            "Value" = "8:#1203"
                            "DefaultValue" = "8:#1203"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_4982417788824177BE2C4E7F276689DE"
                    {
                    "Sequence" = "3:200"
                    "DisplayName" = "8:Installation Folder"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdAdminFolderDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_909A3D78513F40A1BD2E91C3A718A6C7"
                    {
                    "Sequence" = "3:300"
                    "DisplayName" = "8:Confirm Installation"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdAdminConfirmDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
            "{DF760B10-853B-4699-99F2-AFF7185B4A62}:_FDC49F53E6804E63B308D61E2F4DECCF"
            {
            "Name" = "8:#1900"
            "Sequence" = "3:1"
            "Attributes" = "3:1"
                "Dialogs"
                {
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_3DE262586A824736888D3461BC11093F"
                    {
                    "Sequence" = "3:200"
                    "DisplayName" = "8:Installation Folder"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdFolderDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "InstallAllUsersVisible"
                            {
                            "Name" = "8:InstallAllUsersVisible"
                            "DisplayName" = "8:#1059"
                            "Description" = "8:#1159"
                            "Type" = "3:5"
                            "ContextData" = "8:1;True=1;False=0"
                            "Attributes" = "3:0"
                            "Setting" = "3:0"
                            "Value" = "3:1"
                            "DefaultValue" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_58BF25BFD24848E980A7B73DA675213A"
                    {
                    "Sequence" = "3:300"
                    "DisplayName" = "8:Confirm Installation"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdConfirmDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                    "{688940B3-5CA9-4162-8DEE-2993FA9D8CBC}:_B63DF01649D44BAA9ECA4B11D871212B"
                    {
                    "Sequence" = "3:100"
                    "DisplayName" = "8:Welcome"
                    "UseDynamicProperties" = "11:TRUE"
                    "IsDependency" = "11:FALSE"
                    "SourcePath" = "8:<VsdDialogDir>\\VsdWelcomeDlg.wid"
                        "Properties"
                        {
                            "BannerBitmap"
                            {
                            "Name" = "8:BannerBitmap"
                            "DisplayName" = "8:#1001"
                            "Description" = "8:#1101"
                            "Type" = "3:8"
                            "ContextData" = "8:Bitmap"
                            "Attributes" = "3:4"
                            "Setting" = "3:1"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "CopyrightWarning"
                            {
                            "Name" = "8:CopyrightWarning"
                            "DisplayName" = "8:#1002"
                            "Description" = "8:#1102"
                            "Type" = "3:3"
                            "ContextData" = "8:"
                            "Attributes" = "3:0"
                            "Setting" = "3:1"
                            "Value" = "8:#1202"
                            "DefaultValue" = "8:#1202"
                            "UsePlugInResources" = "11:TRUE"
                            }
                            "Welcome"
                            {
                            "Name" = "8:Welcome"
                            "DisplayName" = "8:#1003"
                            "Description" = "8:#1103"
                            "Type" = "3:3"
                            "ContextData" = "8:"
                            "Attributes" = "3:0"
                            "Setting" = "3:1"
                            "Value" = "8:#1203"
                            "DefaultValue" = "8:#1203"
                            "UsePlugInResources" = "11:TRUE"
                            }
                        }
                    }
                }
            }
        }
        "MergeModule"
        {
        }
        "ProjectOutput"
        {
            "{5259A561-127C-4D43-A0A1-72F10C7B3BF8}:_319288C1BB014A75969F241372DD84EC"
            {
            "SourcePath" = "8:..\\DaminionOllamaApp\\obj\\Debug\\net8.0-windows10.0.26100.0\\apphost.exe"
            "TargetName" = "8:"
            "Tag" = "8:"
            "Folder" = "8:_6B0DAD6A59A54B11868BFB09D7CF6F09"
            "Condition" = "8:"
            "Transitive" = "11:FALSE"
            "Vital" = "11:TRUE"
            "ReadOnly" = "11:FALSE"
            "Hidden" = "11:FALSE"
            "System" = "11:FALSE"
            "Permanent" = "11:FALSE"
            "SharedLegacy" = "11:FALSE"
            "PackageAs" = "3:1"
            "Register" = "3:1"
            "Exclude" = "11:FALSE"
            "IsDependency" = "11:FALSE"
            "IsolateTo" = "8:"
            "ProjectOutputGroupRegister" = "3:1"
            "OutputConfiguration" = "8:"
            "OutputGroupCanonicalName" = "8:PublishItems"
            "OutputProjectGuid" = "8:{A6BE4A87-B4BA-41BC-8395-EF576BC47F22}"
            "ShowKeyOutput" = "11:TRUE"
                "ExcludeFilters"
                {
                }
            }
            "{5259A561-127C-4D43-A0A1-72F10C7B3BF8}:_E2DAFB006AF642CAB42D64D1B361FE3B"
            {
            "SourcePath" = "8:"
            "TargetName" = "8:"
            "Tag" = "8:"
            "Folder" = "8:_6B0DAD6A59A54B11868BFB09D7CF6F09"
            "Condition" = "8:"
            "Transitive" = "11:FALSE"
            "Vital" = "11:TRUE"
            "ReadOnly" = "11:FALSE"
            "Hidden" = "11:FALSE"
            "System" = "11:FALSE"
            "Permanent" = "11:FALSE"
            "SharedLegacy" = "11:FALSE"
            "PackageAs" = "3:1"
            "Register" = "3:1"
            "Exclude" = "11:FALSE"
            "IsDependency" = "11:FALSE"
            "IsolateTo" = "8:"
            "ProjectOutputGroupRegister" = "3:1"
            "OutputConfiguration" = "8:Debug|Any CPU"
            "OutputGroupCanonicalName" = "8:PublishItems"
            "OutputProjectGuid" = "8:{8D73EA54-88AC-4F14-88A0-9468CD8C1862}"
            "ShowKeyOutput" = "11:TRUE"
                "ExcludeFilters"
                {
                }
            }
        }
    }
}

]]>
</File>


<File Path="C:\Users\Dean Kruger\source\repos\DaminionOllamaProcessor\DaminionOllamaProcessor.sln">
<![CDATA[

Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.13.35931.197
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DaminionOllamaInteractionLib", "DaminionOllamaInteractionLib\DaminionOllamaInteractionLib.csproj", "{8D73EA54-88AC-4F14-88A0-9468CD8C1862}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DaminionOllamaApp", "DaminionOllamaApp\DaminionOllamaApp.csproj", "{A6BE4A87-B4BA-41BC-8395-EF576BC47F22}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		DefaultBuild|Any CPU = DefaultBuild|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{8D73EA54-88AC-4F14-88A0-9468CD8C1862}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{8D73EA54-88AC-4F14-88A0-9468CD8C1862}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{8D73EA54-88AC-4F14-88A0-9468CD8C1862}.DefaultBuild|Any CPU.ActiveCfg = Release|Any CPU
		{8D73EA54-88AC-4F14-88A0-9468CD8C1862}.DefaultBuild|Any CPU.Build.0 = Release|Any CPU
		{8D73EA54-88AC-4F14-88A0-9468CD8C1862}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{8D73EA54-88AC-4F14-88A0-9468CD8C1862}.Release|Any CPU.Build.0 = Release|Any CPU
		{A6BE4A87-B4BA-41BC-8395-EF576BC47F22}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{A6BE4A87-B4BA-41BC-8395-EF576BC47F22}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{A6BE4A87-B4BA-41BC-8395-EF576BC47F22}.DefaultBuild|Any CPU.ActiveCfg = Release|Any CPU
		{A6BE4A87-B4BA-41BC-8395-EF576BC47F22}.DefaultBuild|Any CPU.Build.0 = Release|Any CPU
		{A6BE4A87-B4BA-41BC-8395-EF576BC47F22}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{A6BE4A87-B4BA-41BC-8395-EF576BC47F22}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {7A6AC139-D40F-460C-9FDE-646E70B1777E}
	EndGlobalSection
EndGlobal

]]>
</File>

